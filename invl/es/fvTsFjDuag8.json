{
  "video_id": "fvTsFjDuag8",
  "title": "Valgrind",
  "json": [
    {
      "index": 1,
      "start_time": 0.0,
      "end_time": 2000.0,
      "text": "[Powered by Google Translate] [Valgrind]"
    },
    {
      "index": 2,
      "start_time": 2000.0,
      "end_time": 5000.0,
      "text": "[Nate Hardison, Harvard University]"
    },
    {
      "index": 3,
      "start_time": 5000.0,
      "end_time": 7000.0,
      "text": "Esto es CS50, CS50.TV]"
    },
    {
      "index": 4,
      "start_time": 7000.0,
      "end_time": 10000.0,
      "text": "Algunos de los errores más difíciles en los programas en C"
    },
    {
      "index": 5,
      "start_time": 10000.0,
      "end_time": 13000.0,
      "text": "provienen de la mala gestión de la memoria."
    },
    {
      "index": 6,
      "start_time": 13000.0,
      "end_time": 15000.0,
      "text": "Hay un gran número de formas de enredar las cosas,"
    },
    {
      "index": 7,
      "start_time": 15000.0,
      "end_time": 17000.0,
      "text": "incluyendo la asignación de la cantidad incorrecta de la memoria,"
    },
    {
      "index": 8,
      "start_time": 17000.0,
      "end_time": 20000.0,
      "text": "olvidar inicializar variables,"
    },
    {
      "index": 9,
      "start_time": 20000.0,
      "end_time": 23000.0,
      "text": "escrito antes o después del final de un tampón,"
    },
    {
      "index": 10,
      "start_time": 23000.0,
      "end_time": 25000.0,
      "text": "y la liberación de mantener los tiempos de memoria múltiples."
    },
    {
      "index": 11,
      "start_time": 25000.0,
      "end_time": 28000.0,
      "text": "Los síntomas van desde fallos intermitentes"
    },
    {
      "index": 12,
      "start_time": 28000.0,
      "end_time": 30000.0,
      "text": "a los valores misteriosamente sobrescritos,"
    },
    {
      "index": 13,
      "start_time": 30000.0,
      "end_time": 34000.0,
      "text": "a menudo en lugares y tiempos muy alejados del error original."
    },
    {
      "index": 14,
      "start_time": 34000.0,
      "end_time": 37000.0,
      "text": "Rastreando el problema observado de nuevo a la causa subyacente"
    },
    {
      "index": 15,
      "start_time": 37000.0,
      "end_time": 39000.0,
      "text": "puede ser un reto,"
    },
    {
      "index": 16,
      "start_time": 39000.0,
      "end_time": 42000.0,
      "text": "pero, afortunadamente, hay un programa llamado útil Valgrind"
    },
    {
      "index": 17,
      "start_time": 42000.0,
      "end_time": 44000.0,
      "text": "que se puede hacer mucho para ayudar."
    },
    {
      "index": 18,
      "start_time": 44000.0,
      "end_time": 47000.0,
      "text": ">> Ejecutar un programa bajo Valgrind para que"
    },
    {
      "index": 19,
      "start_time": 47000.0,
      "end_time": 50000.0,
      "text": "comprobación extensa de asignaciones de memoria heap y accesos."
    },
    {
      "index": 20,
      "start_time": 50000.0,
      "end_time": 53000.0,
      "text": "Cuando Valgrind detecta un problema, se le da inmediata,"
    },
    {
      "index": 21,
      "start_time": 53000.0,
      "end_time": 56000.0,
      "text": "información directa que le permite"
    },
    {
      "index": 22,
      "start_time": 56000.0,
      "end_time": 58000.0,
      "text": "más fácilmente encontrar y solucionar el problema."
    },
    {
      "index": 23,
      "start_time": 58000.0,
      "end_time": 61000.0,
      "text": "Valgrind también informes sobre problemas de memoria menos mortales,"
    },
    {
      "index": 24,
      "start_time": 61000.0,
      "end_time": 64000.0,
      "text": "tales como pérdidas de memoria, asignación de memoria heap,"
    },
    {
      "index": 25,
      "start_time": 64000.0,
      "end_time": 67000.0,
      "text": "y olvidarse de liberarlo."
    },
    {
      "index": 26,
      "start_time": 67000.0,
      "end_time": 70000.0,
      "text": "Como nuestro compilador, Clang, en nuestro depurador GDB,"
    },
    {
      "index": 27,
      "start_time": 70000.0,
      "end_time": 74000.0,
      "text": "Valgrind es software libre, y se instala en el aparato."
    },
    {
      "index": 28,
      "start_time": 74000.0,
      "end_time": 76000.0,
      "text": "Valgrind se ejecuta en el ejecutable binario,"
    },
    {
      "index": 29,
      "start_time": 76000.0,
      "end_time": 80000.0,
      "text": "no tu. co. archivos de origen h de código,"
    },
    {
      "index": 30,
      "start_time": 80000.0,
      "end_time": 83000.0,
      "text": "así que asegúrese de que usted haya compilado una copia actualizada al día de su programa"
    },
    {
      "index": 31,
      "start_time": 83000.0,
      "end_time": 85000.0,
      "text": "utilizando Clang o hacer."
    },
    {
      "index": 32,
      "start_time": 85000.0,
      "end_time": 88000.0,
      "text": "A continuación, ejecuta el programa bajo Valgrind puede ser"
    },
    {
      "index": 33,
      "start_time": 88000.0,
      "end_time": 92000.0,
      "text": "tan simple como prefijo el símbolo del programa estándar con el Valgrind palabra,"
    },
    {
      "index": 34,
      "start_time": 92000.0,
      "end_time": 95000.0,
      "text": "que se inicia Valgrind y ejecuta el programa en el interior de la misma."
    },
    {
      "index": 35,
      "start_time": 95000.0,
      "end_time": 98000.0,
      "text": "Al iniciar, Valgrind hace algún complejo"
    },
    {
      "index": 36,
      "start_time": 98000.0,
      "end_time": 101000.0,
      "text": "jiggering para configurar el ejecutable de la vigilancia a la memoria,"
    },
    {
      "index": 37,
      "start_time": 101000.0,
      "end_time": 104000.0,
      "text": "por lo que puede tardar un poco para ponerse en marcha."
    },
    {
      "index": 38,
      "start_time": 104000.0,
      "end_time": 108000.0,
      "text": "Entonces, el programa se ejecutará normalmente, pueden ser mucho más lentamente,"
    },
    {
      "index": 39,
      "start_time": 108000.0,
      "end_time": 112000.0,
      "text": "y cuando termina, Valgrind imprimirá un resumen de su uso de memoria."
    },
    {
      "index": 40,
      "start_time": 112000.0,
      "end_time": 118000.0,
      "text": "Si todo va bien, se verá algo como esto:"
    },
    {
      "index": 41,
      "start_time": 118000.0,
      "end_time": 121000.0,
      "text": "En este caso,. / Clean_program"
    },
    {
      "index": 42,
      "start_time": 121000.0,
      "end_time": 124000.0,
      "text": "es la ruta de acceso al programa que desea ejecutar."
    },
    {
      "index": 43,
      "start_time": 124000.0,
      "end_time": 126000.0,
      "text": "Y mientras esto no se toma ningún argumento,"
    },
    {
      "index": 44,
      "start_time": 126000.0,
      "end_time": 129000.0,
      "text": "si lo hiciera yo acababa de ellos rumbo a la final de la orden como de costumbre."
    },
    {
      "index": 45,
      "start_time": 129000.0,
      "end_time": 132000.0,
      "text": "Programa Clean es un programa poco tonto que he creado"
    },
    {
      "index": 46,
      "start_time": 132000.0,
      "end_time": 135000.0,
      "text": "que asigna espacio para un bloque de enteros en el montón,"
    },
    {
      "index": 47,
      "start_time": 135000.0,
      "end_time": 139000.0,
      "text": "poner algunos valores dentro de ellos, y libera toda la manzana."
    },
    {
      "index": 48,
      "start_time": 139000.0,
      "end_time": 143000.0,
      "text": "Esto es lo que usted está tirando para, sin errores y sin fugas."
    },
    {
      "index": 49,
      "start_time": 143000.0,
      "end_time": 147000.0,
      "text": ">> Otra métrica importante es el número total de bytes asignados."
    },
    {
      "index": 50,
      "start_time": 147000.0,
      "end_time": 152000.0,
      "text": "Dependiendo del programa, si sus asignaciones están en megabytes o más,"
    },
    {
      "index": 51,
      "start_time": 152000.0,
      "end_time": 154000.0,
      "text": "usted está probablemente haciendo algo mal."
    },
    {
      "index": 52,
      "start_time": 154000.0,
      "end_time": 157000.0,
      "text": "¿Estás innecesariamente almacenar duplicados?"
    },
    {
      "index": 53,
      "start_time": 157000.0,
      "end_time": 160000.0,
      "text": "¿Está utilizando la pila de almacenamiento, cuando sería mejor usar la pila?"
    },
    {
      "index": 54,
      "start_time": 160000.0,
      "end_time": 163000.0,
      "text": "Por lo tanto, los errores de memoria pueden ser verdaderamente mal."
    },
    {
      "index": 55,
      "start_time": 163000.0,
      "end_time": 166000.0,
      "text": "Los más evidentes causar accidentes espectaculares,"
    },
    {
      "index": 56,
      "start_time": 166000.0,
      "end_time": 169000.0,
      "text": "pero aun así, todavía puede ser difícil de identificar"
    },
    {
      "index": 57,
      "start_time": 169000.0,
      "end_time": 171000.0,
      "text": "exactamente lo que condujo a la caída."
    },
    {
      "index": 58,
      "start_time": 171000.0,
      "end_time": 174000.0,
      "text": "Peor aún, un programa con un error de memoria"
    },
    {
      "index": 59,
      "start_time": 174000.0,
      "end_time": 176000.0,
      "text": "todavía puede compilar limpiamente"
    },
    {
      "index": 60,
      "start_time": 176000.0,
      "end_time": 178000.0,
      "text": "y todavía puede parecen funcionar correctamente"
    },
    {
      "index": 61,
      "start_time": 178000.0,
      "end_time": 181000.0,
      "text": "porque se las arregló para tener suerte la mayor parte del tiempo."
    },
    {
      "index": 62,
      "start_time": 181000.0,
      "end_time": 184000.0,
      "text": "Después de varios \"resultados exitosos\""
    },
    {
      "index": 63,
      "start_time": 184000.0,
      "end_time": 187000.0,
      "text": "usted podría pensar que un accidente es un golpe de suerte de la computadora,"
    },
    {
      "index": 64,
      "start_time": 187000.0,
      "end_time": 190000.0,
      "text": "pero el equipo nunca se equivoca."
    },
    {
      "index": 65,
      "start_time": 190000.0,
      "end_time": 193000.0,
      "text": ">> Ejecución de Valgrind puede ayudarle a localizar la causa de los errores de memoria visibles"
    },
    {
      "index": 66,
      "start_time": 193000.0,
      "end_time": 198000.0,
      "text": "así como encontrar al acecho errores que ni siquiera aún conocemos."
    },
    {
      "index": 67,
      "start_time": 198000.0,
      "end_time": 202000.0,
      "text": "Cada vez Valgrind detecta un problema, se muestra información acerca de lo que observa."
    },
    {
      "index": 68,
      "start_time": 202000.0,
      "end_time": 204000.0,
      "text": "Cada artículo es bastante escueto -"
    },
    {
      "index": 69,
      "start_time": 204000.0,
      "end_time": 207000.0,
      "text": "la línea de la fuente de la instrucción infractora, cuál es el problema,"
    },
    {
      "index": 70,
      "start_time": 207000.0,
      "end_time": 210000.0,
      "text": "y un poco de información acerca de la memoria involucrados -"
    },
    {
      "index": 71,
      "start_time": 210000.0,
      "end_time": 214000.0,
      "text": "pero a menudo es suficiente información para dirigir su atención hacia el lugar correcto."
    },
    {
      "index": 72,
      "start_time": 214000.0,
      "end_time": 217000.0,
      "text": "Aquí está un ejemplo de Valgrind ejecuta en un programa defectuoso"
    },
    {
      "index": 73,
      "start_time": 217000.0,
      "end_time": 220000.0,
      "text": "que hace una lectura válida de la memoria heap."
    },
    {
      "index": 74,
      "start_time": 220000.0,
      "end_time": 229000.0,
      "text": "No vemos los errores o advertencias de compilación."
    },
    {
      "index": 75,
      "start_time": 229000.0,
      "end_time": 233000.0,
      "text": "Uh-oh, el resumen error dice que hay dos errores -"
    },
    {
      "index": 76,
      "start_time": 233000.0,
      "end_time": 236000.0,
      "text": "dos lecturas inválidas de tamaño 4 - bytes, es decir."
    },
    {
      "index": 77,
      "start_time": 236000.0,
      "end_time": 241000.0,
      "text": "Tanto mala lee producido en la función principal de invalid_read.c,"
    },
    {
      "index": 78,
      "start_time": 241000.0,
      "end_time": 244000.0,
      "text": "el primero en la línea 16 y la segunda en la línea 19."
    },
    {
      "index": 79,
      "start_time": 244000.0,
      "end_time": 246000.0,
      "text": "Veamos el código."
    },
    {
      "index": 80,
      "start_time": 246000.0,
      "end_time": 251000.0,
      "text": "Parece que la primera llamada a printf intenta leer un int allá del final de nuestro bloque de memoria."
    },
    {
      "index": 81,
      "start_time": 251000.0,
      "end_time": 253000.0,
      "text": "Si miramos hacia atrás en la salida de Valgrind,"
    },
    {
      "index": 82,
      "start_time": 253000.0,
      "end_time": 256000.0,
      "text": "vemos que Valgrind nos dijo exactamente eso."
    },
    {
      "index": 83,
      "start_time": 256000.0,
      "end_time": 259000.0,
      "text": "La dirección que estamos tratando de leer empieza 0 bytes"
    },
    {
      "index": 84,
      "start_time": 259000.0,
      "end_time": 262000.0,
      "text": "más allá del extremo del bloque de tamaño 16 bytes -"
    },
    {
      "index": 85,
      "start_time": 262000.0,
      "end_time": 265000.0,
      "text": "cuatro enteros de 32-bit que nos asignan."
    },
    {
      "index": 86,
      "start_time": 265000.0,
      "end_time": 269000.0,
      "text": "Es decir, la dirección que estábamos tratando de leer empieza justo al final de nuestro bloque,"
    },
    {
      "index": 87,
      "start_time": 269000.0,
      "end_time": 272000.0,
      "text": "tal como vemos en nuestra llamada printf malo."
    },
    {
      "index": 88,
      "start_time": 272000.0,
      "end_time": 276000.0,
      "text": "Ahora, no es válido lecturas no parece ser tan grande de un acuerdo,"
    },
    {
      "index": 89,
      "start_time": 276000.0,
      "end_time": 279000.0,
      "text": "pero si usted está utilizando esos datos para controlar el flujo del programa -"
    },
    {
      "index": 90,
      "start_time": 279000.0,
      "end_time": 282000.0,
      "text": "por ejemplo, como parte de una sentencia if o loop -"
    },
    {
      "index": 91,
      "start_time": 282000.0,
      "end_time": 285000.0,
      "text": "entonces las cosas pueden ir mal en silencio."
    },
    {
      "index": 92,
      "start_time": 285000.0,
      "end_time": 287000.0,
      "text": "Mira cómo puedo ejecutar el programa invalid_read"
    },
    {
      "index": 93,
      "start_time": 287000.0,
      "end_time": 290000.0,
      "text": "y nada fuera de lo común sucede."
    },
    {
      "index": 94,
      "start_time": 290000.0,
      "end_time": 292000.0,
      "text": "Da miedo, ¿eh?"
    },
    {
      "index": 95,
      "start_time": 292000.0,
      "end_time": 296000.0,
      "text": ">> Ahora, echemos un vistazo a algunos tipos más de los errores que pueden surgir en el código,"
    },
    {
      "index": 96,
      "start_time": 296000.0,
      "end_time": 299000.0,
      "text": "y vamos a ver cómo Valgrind los detecta."
    },
    {
      "index": 97,
      "start_time": 299000.0,
      "end_time": 301000.0,
      "text": "Acabamos de ver un ejemplo de un invalid_read,"
    },
    {
      "index": 98,
      "start_time": 301000.0,
      "end_time": 304000.0,
      "text": "por lo que ahora vamos a ver un invalid_write."
    },
    {
      "index": 99,
      "start_time": 304000.0,
      "end_time": 309000.0,
      "text": "Una vez más, no hay errores o advertencias de compilación."
    },
    {
      "index": 100,
      "start_time": 309000.0,
      "end_time": 312000.0,
      "text": "Bueno, Valgrind dice que hay dos errores en este programa -"
    },
    {
      "index": 101,
      "start_time": 312000.0,
      "end_time": 315000.0,
      "text": "y invalid_write y invalid_read un archivo."
    },
    {
      "index": 102,
      "start_time": 315000.0,
      "end_time": 318000.0,
      "text": "Vamos a ver este código."
    },
    {
      "index": 103,
      "start_time": 318000.0,
      "end_time": 321000.0,
      "text": "Parece que tenemos un ejemplo del clásico strlen además de un bug."
    },
    {
      "index": 104,
      "start_time": 321000.0,
      "end_time": 324000.0,
      "text": "El código no malloc un byte extra de espacio"
    },
    {
      "index": 105,
      "start_time": 324000.0,
      "end_time": 326000.0,
      "text": "por el carácter / 0,"
    },
    {
      "index": 106,
      "start_time": 326000.0,
      "end_time": 330000.0,
      "text": "así que cuando str copia fue a escribir en ssubstrlen \"CS50 rocks!\""
    },
    {
      "index": 107,
      "start_time": 330000.0,
      "end_time": 333000.0,
      "text": "lo escribió un byte más allá del final de nuestro bloque."
    },
    {
      "index": 108,
      "start_time": 333000.0,
      "end_time": 336000.0,
      "text": "El invalid_read viene cuando hacemos nuestra llamada a printf."
    },
    {
      "index": 109,
      "start_time": 336000.0,
      "end_time": 340000.0,
      "text": "Printf termina la lectura de memoria no válida cuando se lee la / 0 carácter"
    },
    {
      "index": 110,
      "start_time": 340000.0,
      "end_time": 343000.0,
      "text": "como se ve en el extremo de esta cadena E es impresión."
    },
    {
      "index": 111,
      "start_time": 343000.0,
      "end_time": 345000.0,
      "text": "Pero nada de esto escapó Valgrind."
    },
    {
      "index": 112,
      "start_time": 345000.0,
      "end_time": 348000.0,
      "text": "Vemos que llamó la invalid_write como parte de la copia de str"
    },
    {
      "index": 113,
      "start_time": 348000.0,
      "end_time": 351000.0,
      "text": "en la línea 11 de la principal, y la invalid_read es parte de printf."
    },
    {
      "index": 114,
      "start_time": 351000.0,
      "end_time": 354000.0,
      "text": "Rock on, Valgrind."
    },
    {
      "index": 115,
      "start_time": 354000.0,
      "end_time": 357000.0,
      "text": "De nuevo, esto no parece ser un gran problema."
    },
    {
      "index": 116,
      "start_time": 357000.0,
      "end_time": 360000.0,
      "text": "Podemos ejecutar este programa una y otra vez fuera de Valgrind"
    },
    {
      "index": 117,
      "start_time": 360000.0,
      "end_time": 363000.0,
      "text": "y no ve ningún síntoma de error."
    },
    {
      "index": 118,
      "start_time": 363000.0,
      "end_time": 366000.0,
      "text": ">> Sin embargo, vamos a ver una ligera variación de esto para ver"
    },
    {
      "index": 119,
      "start_time": 366000.0,
      "end_time": 369000.0,
      "text": "cómo las cosas pueden ponerse muy mal."
    },
    {
      "index": 120,
      "start_time": 369000.0,
      "end_time": 374000.0,
      "text": "Así que, es cierto, estamos abusando de cosas más que sólo un poco en este código."
    },
    {
      "index": 121,
      "start_time": 374000.0,
      "end_time": 377000.0,
      "text": "Sólo estamos asignando espacio en el montón de dos cadenas"
    },
    {
      "index": 122,
      "start_time": 377000.0,
      "end_time": 379000.0,
      "text": "la longitud de CS50 rocas,"
    },
    {
      "index": 123,
      "start_time": 379000.0,
      "end_time": 382000.0,
      "text": "esta vez, recordando la / 0 caracteres."
    },
    {
      "index": 124,
      "start_time": 382000.0,
      "end_time": 385000.0,
      "text": "Pero luego tirar de una cadena de super-larga en el bloque de memoria"
    },
    {
      "index": 125,
      "start_time": 385000.0,
      "end_time": 387000.0,
      "text": "S que está apuntando."
    },
    {
      "index": 126,
      "start_time": 387000.0,
      "end_time": 390000.0,
      "text": "¿Qué efecto tendrá esto en el bloque de memoria que apunta a T?"
    },
    {
      "index": 127,
      "start_time": 390000.0,
      "end_time": 394000.0,
      "text": "Bueno, si los puntos de T a la memoria que hay justo al lado de S,"
    },
    {
      "index": 128,
      "start_time": 394000.0,
      "end_time": 397000.0,
      "text": "viene justo después de ella,"
    },
    {
      "index": 129,
      "start_time": 397000.0,
      "end_time": 399000.0,
      "text": "entonces podríamos haber escrito sobre parte de T."
    },
    {
      "index": 130,
      "start_time": 399000.0,
      "end_time": 401000.0,
      "text": "Vamos a ejecutar este código."
    },
    {
      "index": 131,
      "start_time": 401000.0,
      "end_time": 403000.0,
      "text": "Mira lo que pasó."
    },
    {
      "index": 132,
      "start_time": 403000.0,
      "end_time": 407000.0,
      "text": "Las cadenas se almacenan en nuestros bloques montón ambos parecían haber impreso correctamente."
    },
    {
      "index": 133,
      "start_time": 407000.0,
      "end_time": 409000.0,
      "text": "Nada parece mal en absoluto."
    },
    {
      "index": 134,
      "start_time": 409000.0,
      "end_time": 412000.0,
      "text": "Sin embargo, volvamos a nuestro código y"
    },
    {
      "index": 135,
      "start_time": 412000.0,
      "end_time": 415000.0,
      "text": "comentar la línea donde copiamos CS50 rocas"
    },
    {
      "index": 136,
      "start_time": 415000.0,
      "end_time": 419000.0,
      "text": "en el segundo bloque de memoria, a la que apunta t."
    },
    {
      "index": 137,
      "start_time": 419000.0,
      "end_time": 422000.0,
      "text": "Ahora, cuando ejecute este código debemos"
    },
    {
      "index": 138,
      "start_time": 422000.0,
      "end_time": 426000.0,
      "text": "sólo ver el contenido del primer bloque de memoria imprimir."
    },
    {
      "index": 139,
      "start_time": 426000.0,
      "end_time": 429000.0,
      "text": "Whoa, aunque nosotros no lo hicimos str copia"
    },
    {
      "index": 140,
      "start_time": 429000.0,
      "end_time": 432000.0,
      "text": "los caracteres en el bloque montón segundo, el apuntado por T,"
    },
    {
      "index": 141,
      "start_time": 432000.0,
      "end_time": 435000.0,
      "text": "obtenemos una impresión."
    },
    {
      "index": 142,
      "start_time": 435000.0,
      "end_time": 438000.0,
      "text": "De hecho, la cadena se metió en nuestro primer bloque"
    },
    {
      "index": 143,
      "start_time": 438000.0,
      "end_time": 441000.0,
      "text": "invadieron el bloque primero y en el segundo bloque,"
    },
    {
      "index": 144,
      "start_time": 441000.0,
      "end_time": 443000.0,
      "text": "haciendo que todo parezca normal."
    },
    {
      "index": 145,
      "start_time": 443000.0,
      "end_time": 446000.0,
      "text": "Valgrind, sin embargo, nos cuenta la historia real."
    },
    {
      "index": 146,
      "start_time": 446000.0,
      "end_time": 448000.0,
      "text": "Ahí vamos."
    },
    {
      "index": 147,
      "start_time": 448000.0,
      "end_time": 452000.0,
      "text": "Todos aquellos inválido lee y escribe."
    },
    {
      "index": 148,
      "start_time": 452000.0,
      "end_time": 456000.0,
      "text": ">> Veamos un ejemplo de otro tipo de error."
    },
    {
      "index": 149,
      "start_time": 456000.0,
      "end_time": 459000.0,
      "text": "Aquí hacemos algo bastante lamentable."
    },
    {
      "index": 150,
      "start_time": 459000.0,
      "end_time": 461000.0,
      "text": "Cogemos el espacio para un entero en el heap,"
    },
    {
      "index": 151,
      "start_time": 461000.0,
      "end_time": 465000.0,
      "text": "y nos inicializar un puntero int - p - para apuntar a ese espacio."
    },
    {
      "index": 152,
      "start_time": 465000.0,
      "end_time": 468000.0,
      "text": "Sin embargo, mientras que nuestro puntero se inicializa,"
    },
    {
      "index": 153,
      "start_time": 468000.0,
      "end_time": 472000.0,
      "text": "los datos que se está apuntando a sólo lo ha basura está en esa parte de la pila."
    },
    {
      "index": 154,
      "start_time": 472000.0,
      "end_time": 475000.0,
      "text": "Así que cuando cargamos esos datos en int i,"
    },
    {
      "index": 155,
      "start_time": 475000.0,
      "end_time": 477000.0,
      "text": "que técnicamente i inicializar,"
    },
    {
      "index": 156,
      "start_time": 477000.0,
      "end_time": 480000.0,
      "text": "pero lo hacemos con datos de la chatarra."
    },
    {
      "index": 157,
      "start_time": 480000.0,
      "end_time": 483000.0,
      "text": "La llamada a afirmar, que es una macro de depuración práctico"
    },
    {
      "index": 158,
      "start_time": 483000.0,
      "end_time": 486000.0,
      "text": "se define en el bien llamado afirmar biblioteca,"
    },
    {
      "index": 159,
      "start_time": 486000.0,
      "end_time": 489000.0,
      "text": "abortará el programa si su condición de prueba falla."
    },
    {
      "index": 160,
      "start_time": 489000.0,
      "end_time": 491000.0,
      "text": "Es decir, si no es 0."
    },
    {
      "index": 161,
      "start_time": 491000.0,
      "end_time": 494000.0,
      "text": "Dependiendo de lo que había en el espacio del montón, apuntado por p,"
    },
    {
      "index": 162,
      "start_time": 494000.0,
      "end_time": 498000.0,
      "text": "este programa puede trabajar a veces y no en otros momentos."
    },
    {
      "index": 163,
      "start_time": 498000.0,
      "end_time": 500000.0,
      "text": "Si funciona, sólo estamos teniendo suerte."
    },
    {
      "index": 164,
      "start_time": 500000.0,
      "end_time": 504000.0,
      "text": "El compilador no detectará este error, pero Valgrind voluntad segura."
    },
    {
      "index": 165,
      "start_time": 504000.0,
      "end_time": 508000.0,
      "text": "Allí vemos que el error resultante de nuestro uso de esos datos no deseados."
    },
    {
      "index": 166,
      "start_time": 508000.0,
      "end_time": 512000.0,
      "text": ">> Al asignar memoria del montón, pero no lo desasignar o liberarlo,"
    },
    {
      "index": 167,
      "start_time": 512000.0,
      "end_time": 514000.0,
      "text": "que se llama una fuga."
    },
    {
      "index": 168,
      "start_time": 514000.0,
      "end_time": 517000.0,
      "text": "Para un pequeño, efímero programa que se ejecuta y sale inmediatamente,"
    },
    {
      "index": 169,
      "start_time": 517000.0,
      "end_time": 519000.0,
      "text": "fugas son bastante inofensivos,"
    },
    {
      "index": 170,
      "start_time": 519000.0,
      "end_time": 522000.0,
      "text": "pero para un proyecto de mayor tamaño y / o la longevidad,"
    },
    {
      "index": 171,
      "start_time": 522000.0,
      "end_time": 526000.0,
      "text": "incluso una pequeña fuga puede complicar en algo importante."
    },
    {
      "index": 172,
      "start_time": 526000.0,
      "end_time": 529000.0,
      "text": "Para CS50, esperamos que"
    },
    {
      "index": 173,
      "start_time": 529000.0,
      "end_time": 531000.0,
      "text": "cuidar de liberar toda la memoria heap que asigne,"
    },
    {
      "index": 174,
      "start_time": 531000.0,
      "end_time": 534000.0,
      "text": "ya que queremos que usted construya los conocimientos necesarios para manejar adecuadamente el proceso manual"
    },
    {
      "index": 175,
      "start_time": 534000.0,
      "end_time": 536000.0,
      "text": "requerido por C."
    },
    {
      "index": 176,
      "start_time": 536000.0,
      "end_time": 539000.0,
      "text": "Para ello, el programa debe tener un exacto"
    },
    {
      "index": 177,
      "start_time": 539000.0,
      "end_time": 543000.0,
      "text": "uno-a-uno correspondencia entre malloc y llamadas gratuitas."
    },
    {
      "index": 178,
      "start_time": 543000.0,
      "end_time": 546000.0,
      "text": "Afortunadamente, Valgrind puede ayudar con las pérdidas de memoria también."
    },
    {
      "index": 179,
      "start_time": 546000.0,
      "end_time": 549000.0,
      "text": "Aquí hay un programa llamado fugas leak.c que asigna"
    },
    {
      "index": 180,
      "start_time": 549000.0,
      "end_time": 553000.0,
      "text": "espacio en el montón, escribe en él, pero no lo liberará."
    },
    {
      "index": 181,
      "start_time": 553000.0,
      "end_time": 556000.0,
      "text": "Nos compilarlo con make y ejecutar el programa bajo Valgrind,"
    },
    {
      "index": 182,
      "start_time": 556000.0,
      "end_time": 558000.0,
      "text": "y vemos que, si bien no tenemos errores de memoria,"
    },
    {
      "index": 183,
      "start_time": 558000.0,
      "end_time": 560000.0,
      "text": "tenemos una fuga."
    },
    {
      "index": 184,
      "start_time": 560000.0,
      "end_time": 563000.0,
      "text": "Hay 16 bytes definitivamente perdidos,"
    },
    {
      "index": 185,
      "start_time": 563000.0,
      "end_time": 567000.0,
      "text": "lo que significa que el puntero a la memoria que no estaba en el ámbito cuando el programa se cierra."
    },
    {
      "index": 186,
      "start_time": 567000.0,
      "end_time": 570000.0,
      "text": "Ahora, Valgrind no nos da un montón de información acerca de la fuga,"
    },
    {
      "index": 187,
      "start_time": 570000.0,
      "end_time": 575000.0,
      "text": "pero si seguimos esta pequeña nota que da hacia el fondo de su informe"
    },
    {
      "index": 188,
      "start_time": 575000.0,
      "end_time": 578000.0,
      "text": "volver a ejecutar con - Fuga-check = completo"
    },
    {
      "index": 189,
      "start_time": 578000.0,
      "end_time": 581000.0,
      "text": "para ver los detalles completos de memoria perdida,"
    },
    {
      "index": 190,
      "start_time": 581000.0,
      "end_time": 584000.0,
      "text": "vamos a obtener más información."
    },
    {
      "index": 191,
      "start_time": 584000.0,
      "end_time": 586000.0,
      "text": "Ahora bien, en el resumen montón,"
    },
    {
      "index": 192,
      "start_time": 586000.0,
      "end_time": 590000.0,
      "text": "Valgrind nos dice que la memoria que se perdió fue asignado inicialmente."
    },
    {
      "index": 193,
      "start_time": 590000.0,
      "end_time": 592000.0,
      "text": "Así como sabemos de mirar en el código fuente,"
    },
    {
      "index": 194,
      "start_time": 592000.0,
      "end_time": 595000.0,
      "text": "Valgrind nos informa que filtró la memoria"
    },
    {
      "index": 195,
      "start_time": 595000.0,
      "end_time": 598000.0,
      "text": "asignado con una llamada a malloc en la línea 8 de leak.c"
    },
    {
      "index": 196,
      "start_time": 598000.0,
      "end_time": 600000.0,
      "text": "en la función principal."
    },
    {
      "index": 197,
      "start_time": 600000.0,
      "end_time": 602000.0,
      "text": "Bastante ingenioso."
    },
    {
      "index": 198,
      "start_time": 602000.0,
      "end_time": 604000.0,
      "text": ">> Valgrind clasifica fugas usando estos términos:"
    },
    {
      "index": 199,
      "start_time": 604000.0,
      "end_time": 607000.0,
      "text": "Definitivamente perdido - esto es la pila de memoria asignada"
    },
    {
      "index": 200,
      "start_time": 607000.0,
      "end_time": 610000.0,
      "text": "en que el programa ya no tiene un puntero."
    },
    {
      "index": 201,
      "start_time": 610000.0,
      "end_time": 614000.0,
      "text": "Valgrind sabe que una vez tuvo el puntero, pero desde entonces han perdido la pista."
    },
    {
      "index": 202,
      "start_time": 614000.0,
      "end_time": 617000.0,
      "text": "Esta memoria es, sin duda filtrado."
    },
    {
      "index": 203,
      "start_time": 617000.0,
      "end_time": 620000.0,
      "text": "Indirectamente perdido - esta es la pila de memoria asignada"
    },
    {
      "index": 204,
      "start_time": 620000.0,
      "end_time": 624000.0,
      "text": "a la que sólo los punteros a que también se pierden."
    },
    {
      "index": 205,
      "start_time": 624000.0,
      "end_time": 627000.0,
      "text": "Por ejemplo, si usted perdió su puntero al primer nodo de una lista enlazada,"
    },
    {
      "index": 206,
      "start_time": 627000.0,
      "end_time": 630000.0,
      "text": "entonces el primer nodo en sí sería definitivamente perdido,"
    },
    {
      "index": 207,
      "start_time": 630000.0,
      "end_time": 634000.0,
      "text": "mientras que los nodos subsiguientes serían indirectamente perdido."
    },
    {
      "index": 208,
      "start_time": 634000.0,
      "end_time": 637000.0,
      "text": "Posiblemente perdido - esta es la pila de memoria asignada"
    },
    {
      "index": 209,
      "start_time": 637000.0,
      "end_time": 641000.0,
      "text": "a la que Valgrind no puede estar seguro si hay un puntero o no."
    },
    {
      "index": 210,
      "start_time": 641000.0,
      "end_time": 644000.0,
      "text": "Todavía es accesible la pila de memoria asignada"
    },
    {
      "index": 211,
      "start_time": 644000.0,
      "end_time": 647000.0,
      "text": "en que el programa todavía tiene un puntero en la salida,"
    },
    {
      "index": 212,
      "start_time": 647000.0,
      "end_time": 650000.0,
      "text": "que significa típicamente que apunta una variable global a la misma."
    },
    {
      "index": 213,
      "start_time": 650000.0,
      "end_time": 653000.0,
      "text": "Para comprobar si estas filtraciones, usted también tendrá que incluir la opción"
    },
    {
      "index": 214,
      "start_time": 653000.0,
      "end_time": 655000.0,
      "text": "- Aún alcanzable = yes"
    },
    {
      "index": 215,
      "start_time": 655000.0,
      "end_time": 658000.0,
      "text": "en su advocación de Valgrind."
    },
    {
      "index": 216,
      "start_time": 658000.0,
      "end_time": 661000.0,
      "text": ">> Estos casos pueden requerir diferentes estrategias diferentes para limpiarlas,"
    },
    {
      "index": 217,
      "start_time": 661000.0,
      "end_time": 665000.0,
      "text": "pero las fugas deben ser eliminados."
    },
    {
      "index": 218,
      "start_time": 665000.0,
      "end_time": 668000.0,
      "text": "Por desgracia, la fijación de las fugas pueden ser difícil de hacer,"
    },
    {
      "index": 219,
      "start_time": 668000.0,
      "end_time": 671000.0,
      "text": "ya que las llamadas incorrectas a libre puede explotar su programa."
    },
    {
      "index": 220,
      "start_time": 671000.0,
      "end_time": 674000.0,
      "text": "Por ejemplo, si nos fijamos en invalid_free.c,"
    },
    {
      "index": 221,
      "start_time": 674000.0,
      "end_time": 678000.0,
      "text": "vemos un ejemplo de desasignación mal recuerdo."
    },
    {
      "index": 222,
      "start_time": 678000.0,
      "end_time": 681000.0,
      "text": "Lo que debería ser una sola llamada a liberar a todo el bloque"
    },
    {
      "index": 223,
      "start_time": 681000.0,
      "end_time": 684000.0,
      "text": "de memoria apuntada por int_block,"
    },
    {
      "index": 224,
      "start_time": 684000.0,
      "end_time": 687000.0,
      "text": "en cambio, ha convertido en un intento por liberar a cada sección del tamaño de int"
    },
    {
      "index": 225,
      "start_time": 687000.0,
      "end_time": 689000.0,
      "text": "de la memoria individualmente."
    },
    {
      "index": 226,
      "start_time": 689000.0,
      "end_time": 692000.0,
      "text": "Esto fallará catastróficamente."
    },
    {
      "index": 227,
      "start_time": 692000.0,
      "end_time": 694000.0,
      "text": "Boom! ¡Qué error."
    },
    {
      "index": 228,
      "start_time": 694000.0,
      "end_time": 696000.0,
      "text": "Esto definitivamente no es bueno."
    },
    {
      "index": 229,
      "start_time": 696000.0,
      "end_time": 699000.0,
      "text": "Si usted está atascado con este tipo de error, sin embargo, y usted no sabe dónde buscar,"
    },
    {
      "index": 230,
      "start_time": 699000.0,
      "end_time": 701000.0,
      "text": "recurrir a su nuevo mejor amigo."
    },
    {
      "index": 231,
      "start_time": 701000.0,
      "end_time": 704000.0,
      "text": "Usted lo adivinó - Valgrind."
    },
    {
      "index": 232,
      "start_time": 704000.0,
      "end_time": 707000.0,
      "text": "Valgrind, como siempre, sabe exactamente lo que pasa."
    },
    {
      "index": 233,
      "start_time": 707000.0,
      "end_time": 710000.0,
      "text": "Los recuentos alloc y libre no coinciden."
    },
    {
      "index": 234,
      "start_time": 710000.0,
      "end_time": 712000.0,
      "text": "Tenemos un alloc y 4 libra."
    },
    {
      "index": 235,
      "start_time": 712000.0,
      "end_time": 715000.0,
      "text": "Y Valgrind también nos dice que la primera llamada gratuita malo -"
    },
    {
      "index": 236,
      "start_time": 715000.0,
      "end_time": 718000.0,
      "text": "la que desencadenó la explosión - se viene -"
    },
    {
      "index": 237,
      "start_time": 718000.0,
      "end_time": 720000.0,
      "text": "la línea 16."
    },
    {
      "index": 238,
      "start_time": 720000.0,
      "end_time": 723000.0,
      "text": "Como puede ver, las llamadas malas para liberar son realmente malas,"
    },
    {
      "index": 239,
      "start_time": 723000.0,
      "end_time": 725000.0,
      "text": "lo que se recomienda dejar que su fuga programa"
    },
    {
      "index": 240,
      "start_time": 725000.0,
      "end_time": 728000.0,
      "text": "mientras que usted está trabajando en conseguir el correcto funcionamiento."
    },
    {
      "index": 241,
      "start_time": 728000.0,
      "end_time": 732000.0,
      "text": "Comience a buscar fugas sólo después de que su programa está funcionando correctamente,"
    },
    {
      "index": 242,
      "start_time": 732000.0,
      "end_time": 734000.0,
      "text": "sin otros errores."
    },
    {
      "index": 243,
      "start_time": 734000.0,
      "end_time": 736000.0,
      "text": ">> Y eso es todo lo que tenemos para este video."
    },
    {
      "index": 244,
      "start_time": 736000.0,
      "end_time": 738000.0,
      "text": "Ahora, ¿qué estás esperando?"
    },
    {
      "index": 245,
      "start_time": 738000.0,
      "end_time": 741000.0,
      "text": "Ir ejecutar Valgrind en sus programas en estos momentos."
    },
    {
      "index": 246,
      "start_time": 741000.0,
      "end_time": 745000.0,
      "text": "Mi nombre es Nate Hardison. Esto es CS50. [CS50.TV]"
    }
  ]
}