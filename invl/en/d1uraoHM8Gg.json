{
  "video_id": "d1uraoHM8Gg",
  "title": "The Rust Programming Language",
  "es": 0,
  "json": [
    {
      "index": 1,
      "start_time": 25272.0,
      "end_time": 26480.0,
      "text": "[? RAIF LEVINE: All ?] right."
    },
    {
      "index": 2,
      "start_time": 26480.0,
      "end_time": 28200.0,
      "text": "Thanks everybody for coming today."
    },
    {
      "index": 3,
      "start_time": 28200.0,
      "end_time": 31280.0,
      "text": "I&#39;m [? Raif ?] Levine of the Android UI Toolkit Team."
    },
    {
      "index": 4,
      "start_time": 31280.0,
      "end_time": 35270.0,
      "text": "And it is my pleasure to introduce today Alex Crichton"
    },
    {
      "index": 5,
      "start_time": 35270.0,
      "end_time": 39200.0,
      "text": "of the Mozilla Research."
    },
    {
      "index": 6,
      "start_time": 39200.0,
      "end_time": 42990.0,
      "text": "And he is a member of the Rust core team."
    },
    {
      "index": 7,
      "start_time": 42990.0,
      "end_time": 45800.0,
      "text": "And he is here to tell us about Rust,"
    },
    {
      "index": 8,
      "start_time": 45800.0,
      "end_time": 48630.0,
      "text": "one of the more exciting and interesting languages,"
    },
    {
      "index": 9,
      "start_time": 48630.0,
      "end_time": 50145.0,
      "text": "I think, in the past few years."
    },
    {
      "index": 10,
      "start_time": 52149.0,
      "end_time": 53690.0,
      "text": "ALEX CRICHTON: Thank you, [? Raif ?]."
    },
    {
      "index": 11,
      "start_time": 53690.0,
      "end_time": 56820.0,
      "text": "So I&#39;m going to give just a whirlwind tour of what Rust"
    },
    {
      "index": 12,
      "start_time": 56820.0,
      "end_time": 59130.0,
      "text": "is, why you might feel like using it,"
    },
    {
      "index": 13,
      "start_time": 59130.0,
      "end_time": 62034.0,
      "text": "and what are the unique aspects of it."
    },
    {
      "index": 14,
      "start_time": 62034.0,
      "end_time": 63450.0,
      "text": "So the first thing that I normally"
    },
    {
      "index": 15,
      "start_time": 63450.0,
      "end_time": 65690.0,
      "text": "get if I ever talk about a programming language is"
    },
    {
      "index": 16,
      "start_time": 65690.0,
      "end_time": 67434.0,
      "text": "why do we have yet another one?"
    },
    {
      "index": 17,
      "start_time": 67434.0,
      "end_time": 69850.0,
      "text": "So if you take a look around, we have this whole landscape"
    },
    {
      "index": 18,
      "start_time": 69850.0,
      "end_time": 72890.0,
      "text": "of programming languages today, they all fill various niches."
    },
    {
      "index": 19,
      "start_time": 72890.0,
      "end_time": 74510.0,
      "text": "They solve lots of problems."
    },
    {
      "index": 20,
      "start_time": 74510.0,
      "end_time": 77190.0,
      "text": "But it turns out that you can organize these languages"
    },
    {
      "index": 21,
      "start_time": 77190.0,
      "end_time": 78600.0,
      "text": "along a spectrum."
    },
    {
      "index": 22,
      "start_time": 78600.0,
      "end_time": 80350.0,
      "text": "And the spectrum is this trade-off"
    },
    {
      "index": 23,
      "start_time": 80350.0,
      "end_time": 82690.0,
      "text": "between control and safety."
    },
    {
      "index": 24,
      "start_time": 82690.0,
      "end_time": 85060.0,
      "text": "So on one end of the spectrum, we have C and C++,"
    },
    {
      "index": 25,
      "start_time": 85060.0,
      "end_time": 86370.0,
      "text": "which give us lots of control."
    },
    {
      "index": 26,
      "start_time": 86370.0,
      "end_time": 87900.0,
      "text": "We know exactly what&#39;s going to run our machine."
    },
    {
      "index": 27,
      "start_time": 87900.0,
      "end_time": 89771.0,
      "text": "We have lots of control over memory layout."
    },
    {
      "index": 28,
      "start_time": 89771.0,
      "end_time": 91020.0,
      "text": "We don&#39;t have a lot of safety."
    },
    {
      "index": 29,
      "start_time": 91020.0,
      "end_time": 93186.0,
      "text": "We have segfaults, buffer overruns, very common bugs"
    },
    {
      "index": 30,
      "start_time": 93186.0,
      "end_time": 94080.0,
      "text": "like that."
    },
    {
      "index": 31,
      "start_time": 94080.0,
      "end_time": 96200.0,
      "text": "Whereas on the other side, we have JavaScript."
    },
    {
      "index": 32,
      "start_time": 96200.0,
      "end_time": 96790.0,
      "text": "We have Ruby."
    },
    {
      "index": 33,
      "start_time": 96790.0,
      "end_time": 97560.0,
      "text": "We have Python."
    },
    {
      "index": 34,
      "start_time": 97560.0,
      "end_time": 99690.0,
      "text": "They&#39;re very safe languages, but you don&#39;t quite"
    },
    {
      "index": 35,
      "start_time": 99690.0,
      "end_time": 101315.0,
      "text": "know what&#39;s going to happen at runtime."
    },
    {
      "index": 36,
      "start_time": 101315.0,
      "end_time": 103531.0,
      "text": "So in JavaScript, we have JITs behind the scenes,"
    },
    {
      "index": 37,
      "start_time": 103531.0,
      "end_time": 105530.0,
      "text": "or you really don&#39;t know what&#39;s going to happen."
    },
    {
      "index": 38,
      "start_time": 105530.0,
      "end_time": 108820.0,
      "text": "Because it&#39;ll change as the program is running."
    },
    {
      "index": 39,
      "start_time": 108820.0,
      "end_time": 110760.0,
      "text": "So what Rust is doing is completely"
    },
    {
      "index": 40,
      "start_time": 110760.0,
      "end_time": 112220.0,
      "text": "stepping off this line."
    },
    {
      "index": 41,
      "start_time": 112220.0,
      "end_time": 114260.0,
      "text": "Rust is saying, we are not going to give you"
    },
    {
      "index": 42,
      "start_time": 114260.0,
      "end_time": 116600.0,
      "text": "a trade-off between control and safety."
    },
    {
      "index": 43,
      "start_time": 116600.0,
      "end_time": 118380.0,
      "text": "But rather, we&#39;re going to give you both."
    },
    {
      "index": 44,
      "start_time": 118380.0,
      "end_time": 120671.0,
      "text": "So Rust is a systems programming language which is kind"
    },
    {
      "index": 45,
      "start_time": 120671.0,
      "end_time": 122910.0,
      "text": "of filling this niche that hasn&#39;t been filled by many"
    },
    {
      "index": 46,
      "start_time": 122910.0,
      "end_time": 125880.0,
      "text": "of the languages today, where you get both the very low-level"
    },
    {
      "index": 47,
      "start_time": 125880.0,
      "end_time": 129350.0,
      "text": "control of C and C++, along with the high-level safety"
    },
    {
      "index": 48,
      "start_time": 129350.0,
      "end_time": 131770.0,
      "text": "and constructs that you would expect from Ruby,"
    },
    {
      "index": 49,
      "start_time": 131770.0,
      "end_time": 133580.0,
      "text": "and JavaScript, and Python."
    },
    {
      "index": 50,
      "start_time": 133580.0,
      "end_time": 135020.0,
      "text": "So that might raise a question."
    },
    {
      "index": 51,
      "start_time": 135020.0,
      "end_time": 136420.0,
      "text": "We have all these languages."
    },
    {
      "index": 52,
      "start_time": 136420.0,
      "end_time": 139180.0,
      "text": "What kind of niches will benefit from this safety"
    },
    {
      "index": 53,
      "start_time": 139180.0,
      "end_time": 140595.0,
      "text": "and this control?"
    },
    {
      "index": 54,
      "start_time": 140595.0,
      "end_time": 141970.0,
      "text": "So, suppose you&#39;re building a web"
    },
    {
      "index": 55,
      "start_time": 141970.0,
      "end_time": 144000.0,
      "text": "browser, for example, Servo."
    },
    {
      "index": 56,
      "start_time": 144000.0,
      "end_time": 146700.0,
      "text": "Servo is a project in Mozilla Research"
    },
    {
      "index": 57,
      "start_time": 146700.0,
      "end_time": 150200.0,
      "text": "to write a parallel layout engine in Rust."
    },
    {
      "index": 58,
      "start_time": 150200.0,
      "end_time": 152080.0,
      "text": "So it&#39;s entirely written in Rust today."
    },
    {
      "index": 59,
      "start_time": 152080.0,
      "end_time": 155150.0,
      "text": "And it benefits from this control, this very high level"
    },
    {
      "index": 60,
      "start_time": 155150.0,
      "end_time": 155660.0,
      "text": "of control."
    },
    {
      "index": 61,
      "start_time": 155660.0,
      "end_time": 158510.0,
      "text": "Because browsers are very competitive in performance,"
    },
    {
      "index": 62,
      "start_time": 158510.0,
      "end_time": 160560.0,
      "text": "as we all very much well know."
    },
    {
      "index": 63,
      "start_time": 160560.0,
      "end_time": 163570.0,
      "text": "But at the same time, all major browsers today are written"
    },
    {
      "index": 64,
      "start_time": 163570.0,
      "end_time": 166360.0,
      "text": "in C++, so they&#39;re not getting this great level of safety."
    },
    {
      "index": 65,
      "start_time": 166360.0,
      "end_time": 167902.0,
      "text": "They have a lot of buffer overruns."
    },
    {
      "index": 66,
      "start_time": 167902.0,
      "end_time": 170110.0,
      "text": "They have a lot of segfaults, memory vulnerabilities."
    },
    {
      "index": 67,
      "start_time": 170110.0,
      "end_time": 172660.0,
      "text": "But by writing in Rust, we&#39;re able to totally eliminate"
    },
    {
      "index": 68,
      "start_time": 172660.0,
      "end_time": 174819.0,
      "text": "all these at compile time."
    },
    {
      "index": 69,
      "start_time": 174819.0,
      "end_time": 176360.0,
      "text": "And the other great thing about Servo"
    },
    {
      "index": 70,
      "start_time": 176360.0,
      "end_time": 177920.0,
      "text": "is this parallelism aspect."
    },
    {
      "index": 71,
      "start_time": 177920.0,
      "end_time": 180560.0,
      "text": "if you try and retrofit parallelism onto, for example,"
    },
    {
      "index": 72,
      "start_time": 180560.0,
      "end_time": 182897.0,
      "text": "Gecko, which is millions of lines of C++,"
    },
    {
      "index": 73,
      "start_time": 182897.0,
      "end_time": 184230.0,
      "text": "it&#39;s just not going to end well."
    },
    {
      "index": 74,
      "start_time": 184230.0,
      "end_time": 186480.0,
      "text": "So by using a language which from the ground up"
    },
    {
      "index": 75,
      "start_time": 186480.0,
      "end_time": 188220.0,
      "text": "will not allow this memory unsafety,"
    },
    {
      "index": 76,
      "start_time": 188220.0,
      "end_time": 192940.0,
      "text": "we&#39;re able to do very ambitious things like paralyzing layout."
    },
    {
      "index": 77,
      "start_time": 192940.0,
      "end_time": 194440.0,
      "text": "And on the other spectrum of things,"
    },
    {
      "index": 78,
      "start_time": 194440.0,
      "end_time": 195800.0,
      "text": "let&#39;s say you&#39;re not a C++ hacker."
    },
    {
      "index": 79,
      "start_time": 195800.0,
      "end_time": 197000.0,
      "text": "You&#39;re not a browser hacker."
    },
    {
      "index": 80,
      "start_time": 197000.0,
      "end_time": 198650.0,
      "text": "You&#39;re writing a Ruby gem."
    },
    {
      "index": 81,
      "start_time": 198650.0,
      "end_time": 200150.0,
      "text": "Skylight is a great example of this."
    },
    {
      "index": 82,
      "start_time": 200150.0,
      "end_time": 202380.0,
      "text": "It&#39;s a product of Tilde, where what they did"
    },
    {
      "index": 83,
      "start_time": 202380.0,
      "end_time": 205410.0,
      "text": "is they have a component that runs inside of the customer&#39;s"
    },
    {
      "index": 84,
      "start_time": 205410.0,
      "end_time": 208099.0,
      "text": "Rails apps will just kind if monitor how long it takes"
    },
    {
      "index": 85,
      "start_time": 208099.0,
      "end_time": 210390.0,
      "text": "to talk to the database, how long it takes for the HTTP"
    },
    {
      "index": 86,
      "start_time": 210390.0,
      "end_time": 213000.0,
      "text": "request, general analytics and monitoring about that."
    },
    {
      "index": 87,
      "start_time": 213000.0,
      "end_time": 215780.0,
      "text": "But the key aspect here is that they have very tight resource"
    },
    {
      "index": 88,
      "start_time": 215780.0,
      "end_time": 217524.0,
      "text": "constraints."
    },
    {
      "index": 89,
      "start_time": 217524.0,
      "end_time": 219940.0,
      "text": "They&#39;re a component running in their client&#39;s application."
    },
    {
      "index": 90,
      "start_time": 219940.0,
      "end_time": 221610.0,
      "text": "So they can&#39;t use too much memory,"
    },
    {
      "index": 91,
      "start_time": 221610.0,
      "end_time": 223360.0,
      "text": "or they can&#39;t take too long to run."
    },
    {
      "index": 92,
      "start_time": 223360.0,
      "end_time": 225070.0,
      "text": "So they were running into problems,"
    },
    {
      "index": 93,
      "start_time": 225070.0,
      "end_time": 227362.0,
      "text": "and they decided to rewrite their gem in Rust."
    },
    {
      "index": 94,
      "start_time": 227362.0,
      "end_time": 229945.0,
      "text": "And Rust is great for this use case because with the low level"
    },
    {
      "index": 95,
      "start_time": 229945.0,
      "end_time": 233380.0,
      "text": "of control that you get in C+, C, and C++,"
    },
    {
      "index": 96,
      "start_time": 233380.0,
      "end_time": 236440.0,
      "text": "they were able to satisfy these very tight memory constraints,"
    },
    {
      "index": 97,
      "start_time": 236440.0,
      "end_time": 238150.0,
      "text": "the very tight runtime constraints."
    },
    {
      "index": 98,
      "start_time": 238150.0,
      "end_time": 242250.0,
      "text": "But also, they were able to not compromise the safety"
    },
    {
      "index": 99,
      "start_time": 242250.0,
      "end_time": 243670.0,
      "text": "that they get from Ruby."
    },
    {
      "index": 100,
      "start_time": 243670.0,
      "end_time": 247465.0,
      "text": "So this is an example where they would have written their gem"
    },
    {
      "index": 101,
      "start_time": 247465.0,
      "end_time": 248670.0,
      "text": "in C and C++."
    },
    {
      "index": 102,
      "start_time": 248670.0,
      "end_time": 250567.0,
      "text": "But they were very hesitant to do so."
    },
    {
      "index": 103,
      "start_time": 250567.0,
      "end_time": 251400.0,
      "text": "They&#39;re a Ruby shop."
    },
    {
      "index": 104,
      "start_time": 251400.0,
      "end_time": 253649.0,
      "text": "They haven&#39;t done a lot of systems programming before."
    },
    {
      "index": 105,
      "start_time": 253649.0,
      "end_time": 256980.0,
      "text": "So it&#39;s kind of tough, kind of that first breach into systems"
    },
    {
      "index": 106,
      "start_time": 256980.00000000003,
      "end_time": 257690.00000000003,
      "text": "programming."
    },
    {
      "index": 107,
      "start_time": 257690.0,
      "end_time": 261000.0,
      "text": "And this is where Rust really helps out."
    },
    {
      "index": 108,
      "start_time": 261000.0,
      "end_time": 263520.0,
      "text": "So I want to talk a little bit about what I mean by control"
    },
    {
      "index": 109,
      "start_time": 263520.0,
      "end_time": 264970.0,
      "text": "and what I mean by safety."
    },
    {
      "index": 110,
      "start_time": 264970.0,
      "end_time": 266655.0,
      "text": "So this is a small example in C++."
    },
    {
      "index": 111,
      "start_time": 266655.0,
      "end_time": 268280.0,
      "text": "Well, the first thing we&#39;re going to do"
    },
    {
      "index": 112,
      "start_time": 268280.0,
      "end_time": 270006.0,
      "text": "is make a vector of strings on the stack."
    },
    {
      "index": 113,
      "start_time": 270006.0,
      "end_time": 271880.0,
      "text": "And then we&#39;re going to walk through and take"
    },
    {
      "index": 114,
      "start_time": 271880.0,
      "end_time": 272924.0,
      "text": "a pointer into that."
    },
    {
      "index": 115,
      "start_time": 272924.0,
      "end_time": 274465.0,
      "text": "So the first thing that we&#39;ll realize"
    },
    {
      "index": 116,
      "start_time": 274465.0,
      "end_time": 277910.0,
      "text": "is all of this is laid out inline, on the stack,"
    },
    {
      "index": 117,
      "start_time": 277910.0,
      "end_time": 278940.0,
      "text": "and on the heap."
    },
    {
      "index": 118,
      "start_time": 278940.0,
      "end_time": 281959.0,
      "text": "So, for example, this vector is comprised"
    },
    {
      "index": 119,
      "start_time": 281959.0,
      "end_time": 283750.0,
      "text": "of three separate fields, the data, length,"
    },
    {
      "index": 120,
      "start_time": 283750.0,
      "end_time": 286380.0,
      "text": "and capacity, which are stored directly inline on the stack."
    },
    {
      "index": 121,
      "start_time": 286380.0,
      "end_time": 288060.0,
      "text": "There&#39;s no extra indirection here."
    },
    {
      "index": 122,
      "start_time": 288060.0,
      "end_time": 290120.0,
      "text": "And then on the heap itself, we have"
    },
    {
      "index": 123,
      "start_time": 290120.0,
      "end_time": 292030.0,
      "text": "some strings which are themselves"
    },
    {
      "index": 124,
      "start_time": 292030.0,
      "end_time": 293162.0,
      "text": "just wrapping a vector."
    },
    {
      "index": 125,
      "start_time": 293162.0,
      "end_time": 294620.0,
      "text": "So if we take a look at that, we&#39;ll"
    },
    {
      "index": 126,
      "start_time": 294620.0,
      "end_time": 297550.0,
      "text": "see that it itself also has inline data."
    },
    {
      "index": 127,
      "start_time": 297550.0,
      "end_time": 299820.0,
      "text": "So this first element in the array on the heap"
    },
    {
      "index": 128,
      "start_time": 299820.0,
      "end_time": 302190.0,
      "text": "is just another data, length, and capacity,"
    },
    {
      "index": 129,
      "start_time": 302190.0,
      "end_time": 304440.0,
      "text": "which is pointing to more data for the string."
    },
    {
      "index": 130,
      "start_time": 304440.0,
      "end_time": 307370.0,
      "text": "So the key here is that there&#39;s not these extra layers"
    },
    {
      "index": 131,
      "start_time": 307370.0,
      "end_time": 308000.0,
      "text": "of indirection."
    },
    {
      "index": 132,
      "start_time": 308000.0,
      "end_time": 310500.0,
      "text": "It&#39;s only explicitly when we go onto the heap,"
    },
    {
      "index": 133,
      "start_time": 310500.0,
      "end_time": 313110.0,
      "text": "we&#39;re actually buying into this."
    },
    {
      "index": 134,
      "start_time": 313110.0,
      "end_time": 315950.0,
      "text": "And then the second part about control in C++ is you have"
    },
    {
      "index": 135,
      "start_time": 315950.0,
      "end_time": 317950.0,
      "text": "these very lightweight references."
    },
    {
      "index": 136,
      "start_time": 317950.0,
      "end_time": 319400.0,
      "text": "So this reference into the vector,"
    },
    {
      "index": 137,
      "start_time": 319400.0,
      "end_time": 321820.0,
      "text": "the first element of the vector is just this raw pointer"
    },
    {
      "index": 138,
      "start_time": 321820.0,
      "end_time": 323390.0,
      "text": "straight into memory."
    },
    {
      "index": 139,
      "start_time": 323390.0,
      "end_time": 325010.0,
      "text": "There&#39;s no extra metadata tracking it."
    },
    {
      "index": 140,
      "start_time": 325010.0,
      "end_time": 326730.0,
      "text": "There&#39;s no extra fanciness going on here."
    },
    {
      "index": 141,
      "start_time": 326730.0,
      "end_time": 328730.0,
      "text": "It&#39;s just a value pointing straight into memory."
    },
    {
      "index": 142,
      "start_time": 328730.0,
      "end_time": 330660.0,
      "text": "A little dangerous, as we&#39;ll see in a second,"
    },
    {
      "index": 143,
      "start_time": 330660.0,
      "end_time": 332480.0,
      "text": "but it&#39;s this high level of control."
    },
    {
      "index": 144,
      "start_time": 332480.0,
      "end_time": 334756.0,
      "text": "We know exactly what&#39;s going on."
    },
    {
      "index": 145,
      "start_time": 334756.0,
      "end_time": 336130.0,
      "text": "And then the final aspect of this"
    },
    {
      "index": 146,
      "start_time": 336130.0,
      "end_time": 338130.0,
      "text": "is we have deterministic destruction."
    },
    {
      "index": 147,
      "start_time": 338130.0,
      "end_time": 340820.0,
      "text": "Or what this means is that this vector of strings,"
    },
    {
      "index": 148,
      "start_time": 340820.0,
      "end_time": 343500.0,
      "text": "we know precisely when it&#39;s going to be deallocated."
    },
    {
      "index": 149,
      "start_time": 343500.0,
      "end_time": 346220.0,
      "text": "When this function returns is the exact moment at which"
    },
    {
      "index": 150,
      "start_time": 346220.0,
      "end_time": 347740.0,
      "text": "this destructor will run."
    },
    {
      "index": 151,
      "start_time": 347740.0,
      "end_time": 349580.0,
      "text": "And it will destroy all the components"
    },
    {
      "index": 152,
      "start_time": 349580.0,
      "end_time": 350940.0,
      "text": "of the vector itself."
    },
    {
      "index": 153,
      "start_time": 350940.0,
      "end_time": 353370.0,
      "text": "So this is where we have very fine-grained control"
    },
    {
      "index": 154,
      "start_time": 353370.0,
      "end_time": 354950.0,
      "text": "over the lifetime of the resources"
    },
    {
      "index": 155,
      "start_time": 354950.0,
      "end_time": 357130.0,
      "text": "that we have control of, either on the stack"
    },
    {
      "index": 156,
      "start_time": 357130.0,
      "end_time": 360750.0,
      "text": "or within all the containers themselves."
    },
    {
      "index": 157,
      "start_time": 360750.0,
      "end_time": 362390.0,
      "text": "And what this mostly boils down to"
    },
    {
      "index": 158,
      "start_time": 362390.0,
      "end_time": 365200.0,
      "text": "is something that we call zero-cost abstractions, where"
    },
    {
      "index": 159,
      "start_time": 365200.0,
      "end_time": 368180.0,
      "text": "this basically means that it&#39;s something that at compile time,"
    },
    {
      "index": 160,
      "start_time": 368180.0,
      "end_time": 371000.0,
      "text": "you can have this very nice interface, very easy to use."
    },
    {
      "index": 161,
      "start_time": 371000.0,
      "end_time": 372230.0,
      "text": "It&#39;s very fluent to use."
    },
    {
      "index": 162,
      "start_time": 372230.0,
      "end_time": 373962.0,
      "text": "But it all optimizes away to nothing."
    },
    {
      "index": 163,
      "start_time": 373962.0,
      "end_time": 375670.0,
      "text": "So once you push it through the compiler,"
    },
    {
      "index": 164,
      "start_time": 375670.0,
      "end_time": 376640.0,
      "text": "it&#39;s basically a shim."
    },
    {
      "index": 165,
      "start_time": 376640.0,
      "end_time": 378223.0,
      "text": "And it&#39;ll go to exactly what you would"
    },
    {
      "index": 166,
      "start_time": 378223.0,
      "end_time": 381462.0,
      "text": "have written if you did the very low-level operations yourself."
    },
    {
      "index": 167,
      "start_time": 381462.0,
      "end_time": 382920.0,
      "text": "And on the other this side of this,"
    },
    {
      "index": 168,
      "start_time": 382920.0,
      "end_time": 384290.0,
      "text": "let&#39;s take a look at Java."
    },
    {
      "index": 169,
      "start_time": 384290.0,
      "end_time": 387382.0,
      "text": "So if we take our previous example of a vector of strings,"
    },
    {
      "index": 170,
      "start_time": 387382.0,
      "end_time": 388840.0,
      "text": "then what&#39;s actually happening here"
    },
    {
      "index": 171,
      "start_time": 388840.0,
      "end_time": 391840.0,
      "text": "is the vector on the stack is a pointer to some data,"
    },
    {
      "index": 172,
      "start_time": 391840.0,
      "end_time": 393690.0,
      "text": "the length, and some capacity, which itself"
    },
    {
      "index": 173,
      "start_time": 393690.0,
      "end_time": 395272.0,
      "text": "is a pointer to some more data."
    },
    {
      "index": 174,
      "start_time": 395272.0,
      "end_time": 396980.0,
      "text": "But in there, we have yet another pointer"
    },
    {
      "index": 175,
      "start_time": 396980.0,
      "end_time": 400100.0,
      "text": "to the actual string value which has data, length, and capacity."
    },
    {
      "index": 176,
      "start_time": 400100.0,
      "end_time": 403071.0,
      "text": "We keep going with these extra layers of indirection."
    },
    {
      "index": 177,
      "start_time": 403071.0,
      "end_time": 404820.0,
      "text": "And this is something that&#39;s imposed on us"
    },
    {
      "index": 178,
      "start_time": 404820.0,
      "end_time": 406157.0,
      "text": "by the Java language itself."
    },
    {
      "index": 179,
      "start_time": 406157.0,
      "end_time": 408740.0,
      "text": "There&#39;s no way that we can get around this, these extra layers"
    },
    {
      "index": 180,
      "start_time": 408740.0,
      "end_time": 409365.0,
      "text": "of indirection."
    },
    {
      "index": 181,
      "start_time": 409365.0,
      "end_time": 411620.0,
      "text": "It&#39;s something that we just don&#39;t have control over,"
    },
    {
      "index": 182,
      "start_time": 411620.0,
      "end_time": 413690.0,
      "text": "where you have to buy into right up front."
    },
    {
      "index": 183,
      "start_time": 413690.0,
      "end_time": 416590.0,
      "text": "Unlike in C++, where we can eliminate these extra layers"
    },
    {
      "index": 184,
      "start_time": 416590.0,
      "end_time": 418307.0,
      "text": "and flatten it all down."
    },
    {
      "index": 185,
      "start_time": 418307.0,
      "end_time": 420390.0,
      "text": "And when I&#39;m talking about zero-cost abstractions,"
    },
    {
      "index": 186,
      "start_time": 420390.0,
      "end_time": 422110.0,
      "text": "it&#39;s not just memory layout."
    },
    {
      "index": 187,
      "start_time": 422110.0,
      "end_time": 423315.0,
      "text": "It&#39;s also static dispatch."
    },
    {
      "index": 188,
      "start_time": 426050.0,
      "end_time": 428840.0,
      "text": "It&#39;s the ability to know that a function call at runtime"
    },
    {
      "index": 189,
      "start_time": 428840.0,
      "end_time": 431810.0,
      "text": "is either going to be statically resolved or dynamically"
    },
    {
      "index": 190,
      "start_time": 431810.0,
      "end_time": 433315.0,
      "text": "resolved at runtime itself."
    },
    {
      "index": 191,
      "start_time": 433315.0,
      "end_time": 434690.0,
      "text": "This is a very powerful trade-off"
    },
    {
      "index": 192,
      "start_time": 434690.0,
      "end_time": 436720.0,
      "text": "where you want to make sure you know what&#39;s going on."
    },
    {
      "index": 193,
      "start_time": 436720.0,
      "end_time": 438803.0,
      "text": "And the same idea happens with template expansion,"
    },
    {
      "index": 194,
      "start_time": 438803.0,
      "end_time": 441430.0,
      "text": "which is generics in Java and C++,"
    },
    {
      "index": 195,
      "start_time": 441430.0,
      "end_time": 444900.0,
      "text": "where what it boils down to is that if I have a vector"
    },
    {
      "index": 196,
      "start_time": 444900.0,
      "end_time": 447070.0,
      "text": "of integers and a vector of strings,"
    },
    {
      "index": 197,
      "start_time": 447070.0,
      "end_time": 448770.0,
      "text": "those should probably be optimized very,"
    },
    {
      "index": 198,
      "start_time": 448770.0,
      "end_time": 449870.0,
      "text": "very differently."
    },
    {
      "index": 199,
      "start_time": 449870.0,
      "end_time": 452604.0,
      "text": "And it means that every time you instantiate those type"
    },
    {
      "index": 200,
      "start_time": 452604.0,
      "end_time": 454770.0,
      "text": "parameters, you get very specialized copies of code."
    },
    {
      "index": 201,
      "start_time": 454770.0,
      "end_time": 457780.0,
      "text": "So it&#39;s as if you wrote the most specialized"
    },
    {
      "index": 202,
      "start_time": 457780.0,
      "end_time": 462116.0,
      "text": "vector of integers for the vector of integers itself."
    },
    {
      "index": 203,
      "start_time": 462116.0,
      "end_time": 464310.0,
      "text": "And so, let&#39;s take a look at the safety aspect."
    },
    {
      "index": 204,
      "start_time": 464310.0,
      "end_time": 466970.0,
      "text": "That&#39;s an example of what I mean by control."
    },
    {
      "index": 205,
      "start_time": 466970.0,
      "end_time": 469830.0,
      "text": "But the safety comes into play especially in C++."
    },
    {
      "index": 206,
      "start_time": 469830.0,
      "end_time": 471550.0,
      "text": "So this is a classical example of where"
    },
    {
      "index": 207,
      "start_time": 471550.0,
      "end_time": 472660.0,
      "text": "something is going to go wrong."
    },
    {
      "index": 208,
      "start_time": 472660.0,
      "end_time": 475280.0,
      "text": "So the first thing that we do is we have our previous example"
    },
    {
      "index": 209,
      "start_time": 475280.0,
      "end_time": 476280.0,
      "text": "with the vector strings."
    },
    {
      "index": 210,
      "start_time": 476280.0,
      "end_time": 478520.0,
      "text": "And we take a pointer into the first element."
    },
    {
      "index": 211,
      "start_time": 478520.0,
      "end_time": 481110.0,
      "text": "But then we come along, and we try and mutate the vector."
    },
    {
      "index": 212,
      "start_time": 481110.0,
      "end_time": 483564.0,
      "text": "And some of you familiar with vectors in C++,"
    },
    {
      "index": 213,
      "start_time": 483564.0,
      "end_time": 485730.0,
      "text": "you&#39;ll know that when you&#39;ve exceeded the capacitive"
    },
    {
      "index": 214,
      "start_time": 485730.0,
      "end_time": 488320.0,
      "text": "of vector, you probably have to reallocate it, copy some data,"
    },
    {
      "index": 215,
      "start_time": 488320.0,
      "end_time": 489990.0,
      "text": "and then push the big data onto it."
    },
    {
      "index": 216,
      "start_time": 489990.0,
      "end_time": 492430.0,
      "text": "So let&#39;s say, in this case, we have to do that."
    },
    {
      "index": 217,
      "start_time": 492430.0,
      "end_time": 494620.0,
      "text": "We copy our data elsewhere, copy our first element"
    },
    {
      "index": 218,
      "start_time": 494620.0,
      "end_time": 496760.0,
      "text": "that&#39;s in our vector, push on some new data."
    },
    {
      "index": 219,
      "start_time": 496760.0,
      "end_time": 500330.0,
      "text": "And then the key aspect is we deallocate the contents"
    },
    {
      "index": 220,
      "start_time": 500330.0,
      "end_time": 502190.0,
      "text": "of the previous data pointer."
    },
    {
      "index": 221,
      "start_time": 502190.0,
      "end_time": 504460.0,
      "text": "And what this means is that this pointer,"
    },
    {
      "index": 222,
      "start_time": 504460.0,
      "end_time": 506500.0,
      "text": "our element pointer is now a dangling pointer"
    },
    {
      "index": 223,
      "start_time": 506500.0,
      "end_time": 507690.0,
      "text": "in the freed memory."
    },
    {
      "index": 224,
      "start_time": 507690.0,
      "end_time": 510210.0,
      "text": "And that basically implies that when we come around here"
    },
    {
      "index": 225,
      "start_time": 510210.0,
      "end_time": 512640.0,
      "text": "to print it out onto the standard output,"
    },
    {
      "index": 226,
      "start_time": 512640.0,
      "end_time": 514690.0,
      "text": "we&#39;re going to either get garbage, a segfault,"
    },
    {
      "index": 227,
      "start_time": 514690.00000000006,
      "end_time": 517230.00000000006,
      "text": "or this is what C++ calls undefined behavior."
    },
    {
      "index": 228,
      "start_time": 517230.0,
      "end_time": 519970.0,
      "text": "This is the crux of what we&#39;re trying to avoid."
    },
    {
      "index": 229,
      "start_time": 519970.0,
      "end_time": 523590.0,
      "text": "This is where the unsafety stems from."
    },
    {
      "index": 230,
      "start_time": 523590.00000000006,
      "end_time": 528500.0,
      "text": "So it&#39;s good to examine examples like this."
    },
    {
      "index": 231,
      "start_time": 528500.0,
      "end_time": 531570.0,
      "text": "But what we&#39;re really interested in"
    },
    {
      "index": 232,
      "start_time": 531570.0,
      "end_time": 534790.0,
      "text": "is these fundamental ingredients for what&#39;s going wrong here."
    },
    {
      "index": 233,
      "start_time": 534790.0,
      "end_time": 536210.0,
      "text": "Because this kind of example, you"
    },
    {
      "index": 234,
      "start_time": 536210.0,
      "end_time": 538130.0,
      "text": "can probably pattern match and figure it out."
    },
    {
      "index": 235,
      "start_time": 538130.0,
      "end_time": 540520.0,
      "text": "It&#39;s very difficult to find this in a much larger program"
    },
    {
      "index": 236,
      "start_time": 540520.0,
      "end_time": 542270.0,
      "text": "among many, many function calls deep."
    },
    {
      "index": 237,
      "start_time": 542270.0,
      "end_time": 544020.0,
      "text": "So the first thing we&#39;ll notice is there&#39;s"
    },
    {
      "index": 238,
      "start_time": 544020.0,
      "end_time": 545770.0,
      "text": "some aliasing going on here."
    },
    {
      "index": 239,
      "start_time": 545770.0,
      "end_time": 547984.0,
      "text": "This data pointer of the vector and the element"
    },
    {
      "index": 240,
      "start_time": 547984.0,
      "end_time": 550150.0,
      "text": "pointer on the stack are pointing to the same memory"
    },
    {
      "index": 241,
      "start_time": 550150.0,
      "end_time": 551634.0,
      "text": "location."
    },
    {
      "index": 242,
      "start_time": 551634.0,
      "end_time": 554050.0,
      "text": "Aliasing is basically where you have two pointers pointing"
    },
    {
      "index": 243,
      "start_time": 554050.0,
      "end_time": 556383.0,
      "text": "at a very similar location, but they don&#39;t know anything"
    },
    {
      "index": 244,
      "start_time": 556383.0,
      "end_time": 557180.0,
      "text": "about one another."
    },
    {
      "index": 245,
      "start_time": 557180.0,
      "end_time": 560014.0,
      "text": "So then we come in and mix in mutation."
    },
    {
      "index": 246,
      "start_time": 560014.0,
      "end_time": 561430.0,
      "text": "What we&#39;re doing is we&#39;re mutating"
    },
    {
      "index": 247,
      "start_time": 561430.0,
      "end_time": 562990.0,
      "text": "the data pointer of the vector."
    },
    {
      "index": 248,
      "start_time": 562990.0,
      "end_time": 565560.0,
      "text": "But we&#39;re not mutating the alias reference"
    },
    {
      "index": 249,
      "start_time": 565560.0,
      "end_time": 567190.0,
      "text": "of the element itself."
    },
    {
      "index": 250,
      "start_time": 567190.0,
      "end_time": 570740.0,
      "text": "So it&#39;s these two fundamental ingredients in combination--"
    },
    {
      "index": 251,
      "start_time": 570740.0,
      "end_time": 572690.0,
      "text": "aliasing and mutation."
    },
    {
      "index": 252,
      "start_time": 572690.0,
      "end_time": 575540.0,
      "text": "It&#39;s OK to have either of them independently."
    },
    {
      "index": 253,
      "start_time": 575540.0,
      "end_time": 577230.0,
      "text": "But when we have them simultaneously"
    },
    {
      "index": 254,
      "start_time": 577230.0,
      "end_time": 579740.0,
      "text": "is when these memory and safety bugs start to come up."
    },
    {
      "index": 255,
      "start_time": 579740.0,
      "end_time": 582115.0,
      "text": "So I&#39;ll harp on this a lot more in the rest of this talk."
    },
    {
      "index": 256,
      "start_time": 582115.0,
      "end_time": 584770.0,
      "text": "And we&#39;ll see a little bit more in detail."
    },
    {
      "index": 257,
      "start_time": 584770.0,
      "end_time": 587067.0,
      "text": "So you might be asking, what about garbage collection?"
    },
    {
      "index": 258,
      "start_time": 587067.0,
      "end_time": 589150.0,
      "text": "This sounds like a problem that garbage collectors"
    },
    {
      "index": 259,
      "start_time": 589150.0,
      "end_time": 591660.0,
      "text": "are tasked to solve, forbidding dangling pointers,"
    },
    {
      "index": 260,
      "start_time": 591660.0,
      "end_time": 593360.0,
      "text": "forbidding these various references,"
    },
    {
      "index": 261,
      "start_time": 593360.0,
      "end_time": 595290.0,
      "text": "rewriting things at runtime."
    },
    {
      "index": 262,
      "start_time": 595290.0,
      "end_time": 597120.0,
      "text": "But it turns out that garbage collectors"
    },
    {
      "index": 263,
      "start_time": 597120.0,
      "end_time": 599422.0,
      "text": "don&#39;t come without a downside."
    },
    {
      "index": 264,
      "start_time": 599422.0,
      "end_time": 601380.0,
      "text": "Garbage collectors don&#39;t have a lot of control."
    },
    {
      "index": 265,
      "start_time": 601380.0,
      "end_time": 604410.0,
      "text": "They don&#39;t have this low-level of C and C++."
    },
    {
      "index": 266,
      "start_time": 604410.0,
      "end_time": 605720.0,
      "text": "You have these GC pauses."
    },
    {
      "index": 267,
      "start_time": 605720.0,
      "end_time": 609670.0,
      "text": "You have these variable runtimes actually allocating data."
    },
    {
      "index": 268,
      "start_time": 609670.0,
      "end_time": 612200.0,
      "text": "It&#39;s very tough to reason about what&#39;s going to happen."
    },
    {
      "index": 269,
      "start_time": 612200.0,
      "end_time": 616270.0,
      "text": "And then an aspect of garbage collectors"
    },
    {
      "index": 270,
      "start_time": 616270.0,
      "end_time": 619640.0,
      "text": "which is not really cited that often is they require runtime."
    },
    {
      "index": 271,
      "start_time": 619640.0,
      "end_time": 622820.0,
      "text": "And this is a very strong aspect of C and C++ where,"
    },
    {
      "index": 272,
      "start_time": 622820.0,
      "end_time": 624990.0,
      "text": "for example, if I write a library in C,"
    },
    {
      "index": 273,
      "start_time": 624990.0,
      "end_time": 626630.0,
      "text": "I can run it basically anywhere."
    },
    {
      "index": 274,
      "start_time": 626630.0,
      "end_time": 628580.0,
      "text": "Because there&#39;s no assumption about the host"
    },
    {
      "index": 275,
      "start_time": 628580.0,
      "end_time": 630380.0,
      "text": "runtime that I&#39;m running inside of."
    },
    {
      "index": 276,
      "start_time": 630380.0,
      "end_time": 632550.0,
      "text": "So with a garbage collector, it&#39;s"
    },
    {
      "index": 277,
      "start_time": 632550.0,
      "end_time": 634660.0,
      "text": "very difficult to embed what you&#39;re"
    },
    {
      "index": 278,
      "start_time": 634660.0,
      "end_time": 636030.0,
      "text": "writing into other languages."
    },
    {
      "index": 279,
      "start_time": 636030.0,
      "end_time": 638320.0,
      "text": "And we&#39;ll see how it&#39;s really beneficial to not have"
    },
    {
      "index": 280,
      "start_time": 638320.0,
      "end_time": 640800.0,
      "text": "this runtime behind the scenes."
    },
    {
      "index": 281,
      "start_time": 640800.0,
      "end_time": 642262.0,
      "text": "And then the worst part about this"
    },
    {
      "index": 282,
      "start_time": 642262.0,
      "end_time": 644720.0,
      "text": "is that it&#39;s insufficient to solve all the problems that we"
    },
    {
      "index": 283,
      "start_time": 644720.0,
      "end_time": 645660.0,
      "text": "want to solve."
    },
    {
      "index": 284,
      "start_time": 645660.0,
      "end_time": 647940.0,
      "text": "Garbage collectors don&#39;t automatically"
    },
    {
      "index": 285,
      "start_time": 647940.0,
      "end_time": 650850.0,
      "text": "get you away from iterator invalidation, from data races."
    },
    {
      "index": 286,
      "start_time": 650850.0,
      "end_time": 652410.0,
      "text": "These are these concurrency bugs that"
    },
    {
      "index": 287,
      "start_time": 652410.0,
      "end_time": 654980.0,
      "text": "are very difficult to weed out."
    },
    {
      "index": 288,
      "start_time": 654980.0,
      "end_time": 656890.0,
      "text": "So it turns out that all of these problems"
    },
    {
      "index": 289,
      "start_time": 656890.0,
      "end_time": 659000.0,
      "text": "are very closely interrelated."
    },
    {
      "index": 290,
      "start_time": 659000.0,
      "end_time": 662010.0,
      "text": "And we would love to solve them all at once."
    },
    {
      "index": 291,
      "start_time": 662010.0,
      "end_time": 664340.0,
      "text": "And garbage collection doesn&#39;t quite fit the bill."
    },
    {
      "index": 292,
      "start_time": 664340.0,
      "end_time": 667670.0,
      "text": "So what Rust has is a system called ownership/borrowing."
    },
    {
      "index": 293,
      "start_time": 667670.0,
      "end_time": 670330.0,
      "text": "This is going to be the main focus for the rest of the talk."
    },
    {
      "index": 294,
      "start_time": 670330.0,
      "end_time": 671960.0,
      "text": "I&#39;m going to talk a lot about ownership/borrowing"
    },
    {
      "index": 295,
      "start_time": 671960.0,
      "end_time": 674001.0,
      "text": "and some of the great things we&#39;ll get out of it."
    },
    {
      "index": 296,
      "start_time": 674001.0,
      "end_time": 676820.0,
      "text": "But it suffices to say for now that ownership/borrowing"
    },
    {
      "index": 297,
      "start_time": 676820.0,
      "end_time": 678047.0,
      "text": "doesn&#39;t need a runtime."
    },
    {
      "index": 298,
      "start_time": 678047.0,
      "end_time": 679880.0,
      "text": "It&#39;s totally aesthetic analysis [INAUDIBLE]."
    },
    {
      "index": 299,
      "start_time": 679880.0,
      "end_time": 681310.0,
      "text": "It&#39;s zero-cost at runtime."
    },
    {
      "index": 300,
      "start_time": 681310.0,
      "end_time": 682360.0,
      "text": "It&#39;s all static analysis."
    },
    {
      "index": 301,
      "start_time": 682360.0,
      "end_time": 683985.0,
      "text": "There&#39;s nothing going on under the hood"
    },
    {
      "index": 302,
      "start_time": 683985.0,
      "end_time": 685910.0,
      "text": "when you&#39;re actually running code."
    },
    {
      "index": 303,
      "start_time": 685910.0,
      "end_time": 687300.0,
      "text": "It&#39;s totally memory safe."
    },
    {
      "index": 304,
      "start_time": 687300.0,
      "end_time": 690030.0,
      "text": "This is the crux on which all of the memory safety of Rust"
    },
    {
      "index": 305,
      "start_time": 690030.0,
      "end_time": 693000.0,
      "text": "is built is these concepts of ownership/borrowing."
    },
    {
      "index": 306,
      "start_time": 693000.0,
      "end_time": 697122.0,
      "text": "And finally, using these, we&#39;re able to prevent all data races."
    },
    {
      "index": 307,
      "start_time": 697122.0,
      "end_time": 698830.0,
      "text": "Which means that all your concurrent code"
    },
    {
      "index": 308,
      "start_time": 698830.0,
      "end_time": 701190.0,
      "text": "you write in Rust, you will not have a data race."
    },
    {
      "index": 309,
      "start_time": 701190.0,
      "end_time": 703770.0,
      "text": "Which is an incredibly powerful thing to say if we&#39;re coming"
    },
    {
      "index": 310,
      "start_time": 703770.0,
      "end_time": 706680.0,
      "text": "from, for example, C or C++, where it&#39;s very difficult"
    },
    {
      "index": 311,
      "start_time": 706680.0,
      "end_time": 709790.0,
      "text": "to know if you ever might have a data race or it won&#39;t."
    },
    {
      "index": 312,
      "start_time": 709790.0,
      "end_time": 712550.0,
      "text": "And we take a look back again at C++."
    },
    {
      "index": 313,
      "start_time": 712550.0,
      "end_time": 713920.0,
      "text": "C++ gets us one of these things."
    },
    {
      "index": 314,
      "start_time": 713920.0,
      "end_time": 715640.0,
      "text": "We don&#39;t need a runtime with C++."
    },
    {
      "index": 315,
      "start_time": 715640.0,
      "end_time": 717840.0,
      "text": "Garbage collection also gets us one of these things."
    },
    {
      "index": 316,
      "start_time": 717840.0,
      "end_time": 719710.0,
      "text": "It gets us memory safety."
    },
    {
      "index": 317,
      "start_time": 719710.0,
      "end_time": 722790.0,
      "text": "But the great thing about ownership/borrowing"
    },
    {
      "index": 318,
      "start_time": 722790.0,
      "end_time": 724800.0,
      "text": "is this free abstraction at runtime"
    },
    {
      "index": 319,
      "start_time": 724800.0,
      "end_time": 726300.0,
      "text": "gets us all of these simultaneously."
    },
    {
      "index": 320,
      "start_time": 728840.0,
      "end_time": 732170.0,
      "text": "So I want to give some credit to the Rust 1.0 community,"
    },
    {
      "index": 321,
      "start_time": 732170.0,
      "end_time": 736780.0,
      "text": "in the sense that we would not be here at 1.0 without them."
    },
    {
      "index": 322,
      "start_time": 736780.0,
      "end_time": 739130.0,
      "text": "The Rust community is very large, very active,"
    },
    {
      "index": 323,
      "start_time": 739130.0,
      "end_time": 742030.0,
      "text": "incredibly helpful, incredibly kind, incredibly welcoming."
    },
    {
      "index": 324,
      "start_time": 742030.0,
      "end_time": 743710.0,
      "text": "And you can see this across our forums,"
    },
    {
      "index": 325,
      "start_time": 743710.0,
      "end_time": 746519.0,
      "text": "IRC our Subreddit, on GitHub, on issues and pull requests,"
    },
    {
      "index": 326,
      "start_time": 746519.0,
      "end_time": 748560.0,
      "text": "basically everyone is proud to be a part of this."
    },
    {
      "index": 327,
      "start_time": 748560.0,
      "end_time": 750830.0,
      "text": "And they were absolutely instrumental to coming"
    },
    {
      "index": 328,
      "start_time": 750830.0,
      "end_time": 753170.0,
      "text": "across the finish line for 1.0, both in terms"
    },
    {
      "index": 329,
      "start_time": 753170.0,
      "end_time": 754800.0,
      "text": "of giving feedback on our designs,"
    },
    {
      "index": 330,
      "start_time": 754800.0,
      "end_time": 756077.0,
      "text": "proposing their own designs."
    },
    {
      "index": 331,
      "start_time": 756077.0,
      "end_time": 758410.0,
      "text": "I would highly encourage anyone who&#39;s interested in Rust"
    },
    {
      "index": 332,
      "start_time": 758410.0,
      "end_time": 758910.0,
      "text": "to jump in."
    },
    {
      "index": 333,
      "start_time": 758910.0,
      "end_time": 761790.0,
      "text": "And don&#39;t feel afraid to ask stupid questions"
    },
    {
      "index": 334,
      "start_time": 761790.0,
      "end_time": 763200.0,
      "text": "or ask any questions anywhere."
    },
    {
      "index": 335,
      "start_time": 763200.0,
      "end_time": 764720.0,
      "text": "Because it&#39;ll be answered almost instantly"
    },
    {
      "index": 336,
      "start_time": 764720.0,
      "end_time": 766011.0,
      "text": "by someone who&#39;s super helpful."
    },
    {
      "index": 337,
      "start_time": 768590.0,
      "end_time": 770690.0,
      "text": "All right, so I want to take the rest of this talk"
    },
    {
      "index": 338,
      "start_time": 770690.0,
      "end_time": 772840.0,
      "text": "and talk a lot about what I mean by ownership,"
    },
    {
      "index": 339,
      "start_time": 772840.0,
      "end_time": 775010.0,
      "text": "and what I mean by borrowing, and some of the great things"
    },
    {
      "index": 340,
      "start_time": 775010.0,
      "end_time": 776509.0,
      "text": "that we&#39;re going to get out of this."
    },
    {
      "index": 341,
      "start_time": 776509.0,
      "end_time": 778590.0,
      "text": "And the first of this is ownership."
    },
    {
      "index": 342,
      "start_time": 778590.0,
      "end_time": 781670.0,
      "text": "So ownership is basically the English term,"
    },
    {
      "index": 343,
      "start_time": 781670.0,
      "end_time": 782520.0,
      "text": "what it means by it."
    },
    {
      "index": 344,
      "start_time": 782520.0,
      "end_time": 783610.0,
      "text": "I own a resource."
    },
    {
      "index": 345,
      "start_time": 783610.0,
      "end_time": 785510.0,
      "text": "So in this case, let&#39;s say I own a book."
    },
    {
      "index": 346,
      "start_time": 785510.0,
      "end_time": 787830.0,
      "text": "I can then decide to send this book to someone else."
    },
    {
      "index": 347,
      "start_time": 787830.0,
      "end_time": 789880.0,
      "text": "And I can then decide to go away."
    },
    {
      "index": 348,
      "start_time": 789880.0,
      "end_time": 792080.0,
      "text": "And we knew that this book, because it has an owner,"
    },
    {
      "index": 349,
      "start_time": 792080.0,
      "end_time": 794085.0,
      "text": "we don&#39;t deallocate it or anything."
    },
    {
      "index": 350,
      "start_time": 794085.0,
      "end_time": 796210.0,
      "text": "It&#39;s totally independent of me, the previous owner,"
    },
    {
      "index": 351,
      "start_time": 796210.0,
      "end_time": 797290.0,
      "text": "at this point."
    },
    {
      "index": 352,
      "start_time": 797290.0,
      "end_time": 799430.0,
      "text": "But as the owner of a book, I can then also"
    },
    {
      "index": 353,
      "start_time": 799430.0,
      "end_time": 800752.0,
      "text": "decide to go away."
    },
    {
      "index": 354,
      "start_time": 800752.0,
      "end_time": 802460.0,
      "text": "At which point, we know this book has not"
    },
    {
      "index": 355,
      "start_time": 802460.0,
      "end_time": 804830.0,
      "text": "moved to anyone else, so we can totally destroy it."
    },
    {
      "index": 356,
      "start_time": 804830.0,
      "end_time": 808970.0,
      "text": "We can release all resources associated with this book."
    },
    {
      "index": 357,
      "start_time": 808970.0,
      "end_time": 811660.0,
      "text": "So I was talking about these fundamental ingredients"
    },
    {
      "index": 358,
      "start_time": 811660.0,
      "end_time": 812880.0,
      "text": "of aliasing a mutation."
    },
    {
      "index": 359,
      "start_time": 812880.0,
      "end_time": 814700.0,
      "text": "And we&#39;ll see that with ownership, we&#39;re"
    },
    {
      "index": 360,
      "start_time": 814700.0,
      "end_time": 816419.0,
      "text": "totally forbidding the aliasing aspect."
    },
    {
      "index": 361,
      "start_time": 816419.0,
      "end_time": 818710.0,
      "text": "We&#39;re still going to allow free mutation through these."
    },
    {
      "index": 362,
      "start_time": 818710.0,
      "end_time": 820260.0,
      "text": "But by forbidding aliasing, we&#39;re"
    },
    {
      "index": 363,
      "start_time": 820260.0,
      "end_time": 822390.0,
      "text": "still going to prevent us from this whole class of memory"
    },
    {
      "index": 364,
      "start_time": 822390.0,
      "end_time": 822890.0,
      "text": "unsafety."
    },
    {
      "index": 365,
      "start_time": 825167.0,
      "end_time": 827750.0,
      "text": "So I&#39;m going to walk you through an example of what&#39;s actually"
    },
    {
      "index": 366,
      "start_time": 827750.0,
      "end_time": 829940.0,
      "text": "happening here at runtime, what&#39;s actually going on"
    },
    {
      "index": 367,
      "start_time": 829940.0,
      "end_time": 830649.0,
      "text": "under the hood."
    },
    {
      "index": 368,
      "start_time": 830649.0,
      "end_time": 832190.0,
      "text": "So here&#39;s a small example where we&#39;re"
    },
    {
      "index": 369,
      "start_time": 832190.0,
      "end_time": 833773.0,
      "text": "going to create a vector on the stack."
    },
    {
      "index": 370,
      "start_time": 833773.0,
      "end_time": 836177.0,
      "text": "And you notice that like C++, there&#39;s no extra layers"
    },
    {
      "index": 371,
      "start_time": 836177.0,
      "end_time": 837010.0,
      "text": "of indirection here."
    },
    {
      "index": 372,
      "start_time": 837010.0,
      "end_time": 839385.0,
      "text": "These fields are stored directly on the stack, this data,"
    },
    {
      "index": 373,
      "start_time": 839385.0,
      "end_time": 840820.0,
      "text": "length, and capacity."
    },
    {
      "index": 374,
      "start_time": 840820.0,
      "end_time": 843060.0,
      "text": "We&#39;re going to come along and push some data onto it,"
    },
    {
      "index": 375,
      "start_time": 843060.0,
      "end_time": 844341.0,
      "text": "so push a 1, push a 2."
    },
    {
      "index": 376,
      "start_time": 844341.0,
      "end_time": 846340.0,
      "text": "And then we&#39;ll get to the point that we&#39;re going"
    },
    {
      "index": 377,
      "start_time": 846340.0,
      "end_time": 848070.0,
      "text": "to call this function take."
    },
    {
      "index": 378,
      "start_time": 848070.0,
      "end_time": 849570.0,
      "text": "And the key part about this function"
    },
    {
      "index": 379,
      "start_time": 849570.0,
      "end_time": 852040.0,
      "text": "is that it says that it&#39;s going to take ownership"
    },
    {
      "index": 380,
      "start_time": 852040.0,
      "end_time": 853420.0,
      "text": "of the specter of integers."
    },
    {
      "index": 381,
      "start_time": 853420.0,
      "end_time": 854960.0,
      "text": "That&#39;s this Vec."
    },
    {
      "index": 382,
      "start_time": 854960.0,
      "end_time": 856824.0,
      "text": "It&#39;s taking that bare type."
    },
    {
      "index": 383,
      "start_time": 856824.0,
      "end_time": 858490.0,
      "text": "What it means is, it&#39;s taking ownership."
    },
    {
      "index": 384,
      "start_time": 858490.0,
      "end_time": 860300.0,
      "text": "It&#39;s consuming ownership."
    },
    {
      "index": 385,
      "start_time": 860300.0,
      "end_time": 863570.0,
      "text": "So on the give side of things, what&#39;s actually going to happen"
    },
    {
      "index": 386,
      "start_time": 863570.0,
      "end_time": 866260.0,
      "text": "is we&#39;re going to create a shallow copy at runtime"
    },
    {
      "index": 387,
      "start_time": 866260.0,
      "end_time": 866939.0,
      "text": "of this vector."
    },
    {
      "index": 388,
      "start_time": 866939.0,
      "end_time": 868980.0,
      "text": "Now we&#39;ll notice that there&#39;s some aliasing going"
    },
    {
      "index": 389,
      "start_time": 868980.0,
      "end_time": 871769.0,
      "text": "on here, which is what ownership is preventing."
    },
    {
      "index": 390,
      "start_time": 871769.0,
      "end_time": 873310.0,
      "text": "So the key aspect is that we&#39;re going"
    },
    {
      "index": 391,
      "start_time": 873310.0,
      "end_time": 875010.0,
      "text": "to forget this previous copy."
    },
    {
      "index": 392,
      "start_time": 875010.0,
      "end_time": 877890.0,
      "text": "This copy that give has-- the shallow copy--"
    },
    {
      "index": 393,
      "start_time": 877890.0,
      "end_time": 878840.0,
      "text": "is totally forgotten."
    },
    {
      "index": 394,
      "start_time": 878840.0,
      "end_time": 881640.0,
      "text": "And we no longer have access to it."
    },
    {
      "index": 395,
      "start_time": 881640.0,
      "end_time": 883652.0,
      "text": "So then as the function take runs,"
    },
    {
      "index": 396,
      "start_time": 883652.0,
      "end_time": 885110.0,
      "text": "it now has ownership of the vector."
    },
    {
      "index": 397,
      "start_time": 885110.0,
      "end_time": 886387.0,
      "text": "It has its own shallow copy."
    },
    {
      "index": 398,
      "start_time": 886387.0,
      "end_time": 887720.0,
      "text": "And it can do whatever it wants."
    },
    {
      "index": 399,
      "start_time": 887720.0,
      "end_time": 888350.0,
      "text": "It can read from it."
    },
    {
      "index": 400,
      "start_time": 888350.0,
      "end_time": 889224.0,
      "text": "It can write from it."
    },
    {
      "index": 401,
      "start_time": 889224.0,
      "end_time": 891910.0,
      "text": "It can do basically [INAUDIBLE] however it likes."
    },
    {
      "index": 402,
      "start_time": 891910.0,
      "end_time": 894330.0,
      "text": "And then once we get to the end of the function take,"
    },
    {
      "index": 403,
      "start_time": 894330.0,
      "end_time": 897130.0,
      "text": "we know that we have not passed ownership of the specter"
    },
    {
      "index": 404,
      "start_time": 897130.0,
      "end_time": 898210.0,
      "text": "anywhere else."
    },
    {
      "index": 405,
      "start_time": 898210.0,
      "end_time": 900720.0,
      "text": "So this is the precise time at which we could deallocate it."
    },
    {
      "index": 406,
      "start_time": 900720.0,
      "end_time": 903590.0,
      "text": "We know that there&#39;s no one else who can have access to it."
    },
    {
      "index": 407,
      "start_time": 903590.0,
      "end_time": 905340.0,
      "text": "We&#39;re the sole owners of it."
    },
    {
      "index": 408,
      "start_time": 905340.0,
      "end_time": 907370.0,
      "text": "So as a result of it falling out of our scope,"
    },
    {
      "index": 409,
      "start_time": 907370.0,
      "end_time": 911790.0,
      "text": "we can free all the resources associated with the vector."
    },
    {
      "index": 410,
      "start_time": 911790.0,
      "end_time": 914970.0,
      "text": "And then once we come back to the function give,"
    },
    {
      "index": 411,
      "start_time": 914970.0,
      "end_time": 916470.0,
      "text": "the vector has been forgotten, so we"
    },
    {
      "index": 412,
      "start_time": 916470.0,
      "end_time": 919840.0,
      "text": "don&#39;t have to worry about using a dangling reference."
    },
    {
      "index": 413,
      "start_time": 919840.0,
      "end_time": 924160.0,
      "text": "And so the compiler is the one that&#39;s enforcing these moves."
    },
    {
      "index": 414,
      "start_time": 924160.0,
      "end_time": 926660.0,
      "text": "When we call the function take, we move the vector Vec"
    },
    {
      "index": 415,
      "start_time": 926660.0,
      "end_time": 928150.0,
      "text": "into the function take."
    },
    {
      "index": 416,
      "start_time": 928150.0,
      "end_time": 931970.0,
      "text": "And if, for example, we tried to actually use the vector"
    },
    {
      "index": 417,
      "start_time": 931970.0,
      "end_time": 933820.0,
      "text": "after we had moved it, say, for example,"
    },
    {
      "index": 418,
      "start_time": 933820.0,
      "end_time": 935500.0,
      "text": "we try to push some [INAUDIBLE] onto it,"
    },
    {
      "index": 419,
      "start_time": 935500.0,
      "end_time": 937090.0,
      "text": "the compiler rejects this, saying"
    },
    {
      "index": 420,
      "start_time": 937090.0,
      "end_time": 938290.0,
      "text": "the vector has been moved."
    },
    {
      "index": 421,
      "start_time": 938290.0,
      "end_time": 940940.0,
      "text": "And so we are not allowed to have access to it."
    },
    {
      "index": 422,
      "start_time": 940940.0,
      "end_time": 943520.0,
      "text": "And this primarily prevents use after free."
    },
    {
      "index": 423,
      "start_time": 943520.0,
      "end_time": 945270.0,
      "text": "So this is this entire class of bugs."
    },
    {
      "index": 424,
      "start_time": 945270.0,
      "end_time": 949175.0,
      "text": "Because we&#39;re tracking the owner of a value, who can access it"
    },
    {
      "index": 425,
      "start_time": 949175.0,
      "end_time": 950475.0,
      "text": "at any one point in time."
    },
    {
      "index": 426,
      "start_time": 950475.0,
      "end_time": 952350.0,
      "text": "Then we know that when the owner has gone out"
    },
    {
      "index": 427,
      "start_time": 952350.0,
      "end_time": 955330.0,
      "text": "of scope, that the resource has now been freed."
    },
    {
      "index": 428,
      "start_time": 955330.0,
      "end_time": 957390.0,
      "text": "And there are no variable that could possibly"
    },
    {
      "index": 429,
      "start_time": 957390.0,
      "end_time": 958300.0,
      "text": "be referencing it."
    },
    {
      "index": 430,
      "start_time": 958300.0,
      "end_time": 962570.0,
      "text": "Because the sole owner has gone out of scope."
    },
    {
      "index": 431,
      "start_time": 962570.0,
      "end_time": 965120.0,
      "text": "So this all sounds great."
    },
    {
      "index": 432,
      "start_time": 965120.0,
      "end_time": 967850.0,
      "text": "But it&#39;s kind of clunky if we only had ownership."
    },
    {
      "index": 433,
      "start_time": 967850.0,
      "end_time": 970500.0,
      "text": "So we need the system which we call borrowing,"
    },
    {
      "index": 434,
      "start_time": 970500.0,
      "end_time": 972710.0,
      "text": "which kind of helps us lend out a value"
    },
    {
      "index": 435,
      "start_time": 972710.0,
      "end_time": 974640.0,
      "text": "for a small period of time."
    },
    {
      "index": 436,
      "start_time": 974640.0,
      "end_time": 975637.0,
      "text": "So I have ownership."
    },
    {
      "index": 437,
      "start_time": 975637.0,
      "end_time": 976470.0,
      "text": "I can pass it along."
    },
    {
      "index": 438,
      "start_time": 976470.0,
      "end_time": 978180.0,
      "text": "Someone can pass me back ownership,"
    },
    {
      "index": 439,
      "start_time": 978180.0,
      "end_time": 979990.0,
      "text": "but it&#39;s not very ergonomic to do that."
    },
    {
      "index": 440,
      "start_time": 979990.0,
      "end_time": 982110.0,
      "text": "So borrowing is what comes into play"
    },
    {
      "index": 441,
      "start_time": 982110.0,
      "end_time": 984510.0,
      "text": "where I, as the owner of a value,"
    },
    {
      "index": 442,
      "start_time": 984510.0,
      "end_time": 987130.0,
      "text": "can then decide to lend it out for a period of time."
    },
    {
      "index": 443,
      "start_time": 987130.0,
      "end_time": 989824.0,
      "text": "But I&#39;m still in control of the lifetime of the resource."
    },
    {
      "index": 444,
      "start_time": 989824.0,
      "end_time": 990990.0,
      "text": "You don&#39;t get to control it."
    },
    {
      "index": 445,
      "start_time": 990990.0,
      "end_time": 992580.0,
      "text": "You can access it, but I&#39;m the one"
    },
    {
      "index": 446,
      "start_time": 992580.0,
      "end_time": 996310.0,
      "text": "that&#39;s going to decide where to free it and when to free it."
    },
    {
      "index": 447,
      "start_time": 996310.0,
      "end_time": 998140.0,
      "text": "So we have two primary kinds of borrows"
    },
    {
      "index": 448,
      "start_time": 998140.0,
      "end_time": 1000730.0,
      "text": "in Rust, the first of which is a shared borrow."
    },
    {
      "index": 449,
      "start_time": 1000730.0,
      "end_time": 1002440.0,
      "text": "And a shared borrow means what it"
    },
    {
      "index": 450,
      "start_time": 1002440.0,
      "end_time": 1004590.0,
      "text": "says, where I, as the owner of a resource,"
    },
    {
      "index": 451,
      "start_time": 1004590.0,
      "end_time": 1006960.0,
      "text": "can send out multiple copies of my resource, just"
    },
    {
      "index": 452,
      "start_time": 1006960.0,
      "end_time": 1009770.0,
      "text": "references to it, into [INAUDIBLE] functions"
    },
    {
      "index": 453,
      "start_time": 1009770.0,
      "end_time": 1011616.0,
      "text": "or threads, and yes."
    },
    {
      "index": 454,
      "start_time": 1011620.0,
      "end_time": 1013244.0,
      "text": "And then what&#39;s actually happening here"
    },
    {
      "index": 455,
      "start_time": 1013240.0,
      "end_time": 1015110.0,
      "text": "is the aliasing and mutation that we&#39;re"
    },
    {
      "index": 456,
      "start_time": 1015110.0,
      "end_time": 1016880.0,
      "text": "trying to prevent simultaneously,"
    },
    {
      "index": 457,
      "start_time": 1016880.0,
      "end_time": 1019200.0,
      "text": "we&#39;re totally forbidding the mutation aspect of this."
    },
    {
      "index": 458,
      "start_time": 1019200.0,
      "end_time": 1021450.0,
      "text": "Because there&#39;s aliasing happening via shared borrows,"
    },
    {
      "index": 459,
      "start_time": 1021450.0,
      "end_time": 1023616.0,
      "text": "we&#39;re not going to allow mutation through the shared"
    },
    {
      "index": 460,
      "start_time": 1023620.0,
      "end_time": 1024424.0,
      "text": "borrows themselves."
    },
    {
      "index": 461,
      "start_time": 1024420.0000000001,
      "end_time": 1026650.0000000001,
      "text": "And as you might guess, on the flip side,"
    },
    {
      "index": 462,
      "start_time": 1026650.0000000001,
      "end_time": 1030040.0000000001,
      "text": "we have mutable borrows, where mutable borrows,"
    },
    {
      "index": 463,
      "start_time": 1030040.0,
      "end_time": 1033119.0,
      "text": "I, as the owner, can lend out a mutable borrow to someone else."
    },
    {
      "index": 464,
      "start_time": 1033119.9999999999,
      "end_time": 1035980.9999999999,
      "text": "They can then pass it along to someone else that they like."
    },
    {
      "index": 465,
      "start_time": 1035980.0,
      "end_time": 1038640.0,
      "text": "And then it will implicitly return back on up the stack"
    },
    {
      "index": 466,
      "start_time": 1038640.0000000001,
      "end_time": 1040859.0000000001,
      "text": "once everyone starts returning."
    },
    {
      "index": 467,
      "start_time": 1040859.9999999999,
      "end_time": 1043290.9999999999,
      "text": "So what&#39;s going on here is these two ingredients"
    },
    {
      "index": 468,
      "start_time": 1043290.0,
      "end_time": 1048342.0,
      "text": "of aliasing and mutation, the mutable borrows,"
    },
    {
      "index": 469,
      "start_time": 1048339.9999999999,
      "end_time": 1050048.0,
      "text": "unlike the shared borrows, are preventing"
    },
    {
      "index": 470,
      "start_time": 1050050.0,
      "end_time": 1052440.0,
      "text": "aliasing but allowing mutation."
    },
    {
      "index": 471,
      "start_time": 1052440.0,
      "end_time": 1055090.0,
      "text": "So these are two different kinds of references"
    },
    {
      "index": 472,
      "start_time": 1055090.0,
      "end_time": 1058810.0,
      "text": "to get these two aspects of either aliasing or mutation."
    },
    {
      "index": 473,
      "start_time": 1058810.0,
      "end_time": 1060770.0,
      "text": "But they&#39;re in totally separate classes."
    },
    {
      "index": 474,
      "start_time": 1060770.0,
      "end_time": 1062320.0,
      "text": "Because if they were to overlap, then"
    },
    {
      "index": 475,
      "start_time": 1062320.0,
      "end_time": 1063486.0,
      "text": "we have them simultaneously."
    },
    {
      "index": 476,
      "start_time": 1063490.0,
      "end_time": 1066694.0,
      "text": "And that&#39;s where memory&#39;s unsafety bugs come out."
    },
    {
      "index": 477,
      "start_time": 1066690.0,
      "end_time": 1069380.0,
      "text": "So let&#39;s take a look back at our previous example of a shared"
    },
    {
      "index": 478,
      "start_time": 1069380.0,
      "end_time": 1070850.0,
      "text": "reference going on here."
    },
    {
      "index": 479,
      "start_time": 1070850.0,
      "end_time": 1072140.0,
      "text": "So we have the same idea."
    },
    {
      "index": 480,
      "start_time": 1072140.0,
      "end_time": 1074250.0,
      "text": "We have a vector pushing the data onto it."
    },
    {
      "index": 481,
      "start_time": 1074250.0,
      "end_time": 1077370.0,
      "text": "But then instead of passing ownership to this function use,"
    },
    {
      "index": 482,
      "start_time": 1077370.0,
      "end_time": 1079270.0,
      "text": "we&#39;re going to pass a borrow for it."
    },
    {
      "index": 483,
      "start_time": 1079270.0,
      "end_time": 1081680.0,
      "text": "So that&#39;s what this ampersand sigil out in front means."
    },
    {
      "index": 484,
      "start_time": 1081680.0,
      "end_time": 1084750.0,
      "text": "This ampersand means that I&#39;m taking a borrow of this vector."
    },
    {
      "index": 485,
      "start_time": 1084750.0,
      "end_time": 1086297.0,
      "text": "I&#39;m not taking ownership."
    },
    {
      "index": 486,
      "start_time": 1086300.0,
      "end_time": 1088133.0,
      "text": "And that&#39;s the same idea on the caller side."
    },
    {
      "index": 487,
      "start_time": 1088130.0,
      "end_time": 1089879.0,
      "text": "I have this ampersand out in front to say,"
    },
    {
      "index": 488,
      "start_time": 1089880.0,
      "end_time": 1092687.0,
      "text": "I&#39;m loaning out ownership of the resource that I currently own."
    },
    {
      "index": 489,
      "start_time": 1092690.0,
      "end_time": 1094564.0,
      "text": "And then you&#39;re going to be able to access it"
    },
    {
      "index": 490,
      "start_time": 1094560.0,
      "end_time": 1096099.0,
      "text": "for a small period of time."
    },
    {
      "index": 491,
      "start_time": 1096100.0,
      "end_time": 1097891.0,
      "text": "So at runtime, what&#39;s actually happening is"
    },
    {
      "index": 492,
      "start_time": 1097890.0,
      "end_time": 1099306.0,
      "text": "we&#39;re just creating a raw pointer."
    },
    {
      "index": 493,
      "start_time": 1099310.0,
      "end_time": 1100434.0,
      "text": "That&#39;s all references are."
    },
    {
      "index": 494,
      "start_time": 1100430.0,
      "end_time": 1102346.0,
      "text": "And this vec pointer is just pointing directly"
    },
    {
      "index": 495,
      "start_time": 1102350.0,
      "end_time": 1103834.0,
      "text": "onto the stack itself."
    },
    {
      "index": 496,
      "start_time": 1103830.0,
      "end_time": 1105460.0,
      "text": "And then the function use is going"
    },
    {
      "index": 497,
      "start_time": 1105460.0,
      "end_time": 1109590.0,
      "text": "to use this raw pointer, read whatever it likes from it."
    },
    {
      "index": 498,
      "start_time": 1109590.0,
      "end_time": 1111455.0,
      "text": "And then once it&#39;s returned, this reference"
    },
    {
      "index": 499,
      "start_time": 1111450.0,
      "end_time": 1112655.0,
      "text": "has gone out of scope."
    },
    {
      "index": 500,
      "start_time": 1112660.0,
      "end_time": 1114368.0,
      "text": "So we totally forget about the reference."
    },
    {
      "index": 501,
      "start_time": 1117130.0,
      "end_time": 1120942.0,
      "text": "So another thing to emphasize is this."
    },
    {
      "index": 502,
      "start_time": 1120940.0,
      "end_time": 1123260.0,
      "text": "If this function use tried to, for example,"
    },
    {
      "index": 503,
      "start_time": 1123260.0,
      "end_time": 1125550.0,
      "text": "mutate the vector by pushing some more data onto it"
    },
    {
      "index": 504,
      "start_time": 1125550.0,
      "end_time": 1128081.0,
      "text": "or for modifying some various elements of the array,"
    },
    {
      "index": 505,
      "start_time": 1128080.0,
      "end_time": 1129579.0,
      "text": "those are all completely disallowed."
    },
    {
      "index": 506,
      "start_time": 1129580.0,
      "end_time": 1132370.0,
      "text": "Because mutation through a shared reference"
    },
    {
      "index": 507,
      "start_time": 1132370.0,
      "end_time": 1135260.0,
      "text": "is not allowed in this case for vectors of integers."
    },
    {
      "index": 508,
      "start_time": 1135260.0,
      "end_time": 1138190.0,
      "text": "So these two are forbidden by the compiler saying that you"
    },
    {
      "index": 509,
      "start_time": 1138190.0,
      "end_time": 1140580.0,
      "text": "cannot mutate through a shared reference."
    },
    {
      "index": 510,
      "start_time": 1140580.0,
      "end_time": 1142330.0,
      "text": "And this isn&#39;t 100% true."
    },
    {
      "index": 511,
      "start_time": 1142330.0,
      "end_time": 1144520.0,
      "text": "There are some controlled circumstances"
    },
    {
      "index": 512,
      "start_time": 1144520.0,
      "end_time": 1147370.0,
      "text": "in which we do allow mutation through shared references."
    },
    {
      "index": 513,
      "start_time": 1147370.0,
      "end_time": 1150100.0,
      "text": "I&#39;ll talk about a few more of them later on in the talk."
    },
    {
      "index": 514,
      "start_time": 1150100.0,
      "end_time": 1152999.0,
      "text": "But it suffices to say that if you see this &amp;T."
    },
    {
      "index": 515,
      "start_time": 1153000.0,
      "end_time": 1154791.0,
      "text": "what it means is that you cannot mutate it."
    },
    {
      "index": 516,
      "start_time": 1154790.0,
      "end_time": 1155950.0,
      "text": "It&#39;s essentially immutable."
    },
    {
      "index": 517,
      "start_time": 1158540.0,
      "end_time": 1161020.0,
      "text": "So let&#39;s take a look at some mutable references now."
    },
    {
      "index": 518,
      "start_time": 1161020.0,
      "end_time": 1164910.0,
      "text": "So the mutable references are denoted by this &amp;mut tag."
    },
    {
      "index": 519,
      "start_time": 1164910.0,
      "end_time": 1166580.0,
      "text": "And because we have a mutable reference,"
    },
    {
      "index": 520,
      "start_time": 1166580.0,
      "end_time": 1169220.0,
      "text": "the compiler is going to allow us to do things like push."
    },
    {
      "index": 521,
      "start_time": 1169220.0,
      "end_time": 1171000.0,
      "text": "So in this example, we&#39;re just going"
    },
    {
      "index": 522,
      "start_time": 1171000.0,
      "end_time": 1174240.0,
      "text": "to iterate over one vector, push some data onto a new vector,"
    },
    {
      "index": 523,
      "start_time": 1174240.0,
      "end_time": 1177260.0,
      "text": "and just create a separate copy of that."
    },
    {
      "index": 524,
      "start_time": 1177260.0,
      "end_time": 1179330.0,
      "text": "So I want to walk you through what&#39;s"
    },
    {
      "index": 525,
      "start_time": 1179330.0,
      "end_time": 1182160.0,
      "text": "happening here at runtime or how this iteration actually"
    },
    {
      "index": 526,
      "start_time": 1182160.0,
      "end_time": 1183050.0,
      "text": "happens."
    },
    {
      "index": 527,
      "start_time": 1183050.0,
      "end_time": 1184230.0,
      "text": "And the first thing that we&#39;re going to do"
    },
    {
      "index": 528,
      "start_time": 1184230.0,
      "end_time": 1186063.0,
      "text": "is we&#39;re going to create this element point."
    },
    {
      "index": 529,
      "start_time": 1186060.0,
      "end_time": 1188656.0,
      "text": "Our iterator is going to give us a pointer into the vector."
    },
    {
      "index": 530,
      "start_time": 1188660.0,
      "end_time": 1191201.0,
      "text": "And those pointers are pointing directly into the first slot."
    },
    {
      "index": 531,
      "start_time": 1191200.0,
      "end_time": 1194329.0,
      "text": "This is kind of like the element pointer we saw earlier in C++."
    },
    {
      "index": 532,
      "start_time": 1194330.0,
      "end_time": 1196621.0,
      "text": "And then when we come around to actually push some data"
    },
    {
      "index": 533,
      "start_time": 1196620.0,
      "end_time": 1199078.0,
      "text": "onto the new vector, we&#39;re just going to read that pointer,"
    },
    {
      "index": 534,
      "start_time": 1199080.0,
      "end_time": 1202552.0,
      "text": "push some data, and then run to the next leaf of the iteration."
    },
    {
      "index": 535,
      "start_time": 1202550.0,
      "end_time": 1205500.0,
      "text": "But the key idea here is that iteration is the zero-cost"
    },
    {
      "index": 536,
      "start_time": 1205500.0,
      "end_time": 1209490.0,
      "text": "abstraction, as fast as you would write it in C and C++."
    },
    {
      "index": 537,
      "start_time": 1209490.0,
      "end_time": 1211710.0,
      "text": "This increment stuff, all it&#39;s doing"
    },
    {
      "index": 538,
      "start_time": 1211710.0,
      "end_time": 1214400.0,
      "text": "is swinging this pointer down to the second slot and then just"
    },
    {
      "index": 539,
      "start_time": 1214400.0,
      "end_time": 1216720.0,
      "text": "kind of forgetting about the first pointer."
    },
    {
      "index": 540,
      "start_time": 1216720.0,
      "end_time": 1220600.0,
      "text": "So some of you might have seen an example like this before."
    },
    {
      "index": 541,
      "start_time": 1220600.0,
      "end_time": 1223560.0,
      "text": "Now, you might be wondering what if this from vector"
    },
    {
      "index": 542,
      "start_time": 1223560.0,
      "end_time": 1225117.0,
      "text": "and this to vector are equal."
    },
    {
      "index": 543,
      "start_time": 1225120.0,
      "end_time": 1226953.0,
      "text": "What if we&#39;re trying to push onto what we&#39;re"
    },
    {
      "index": 544,
      "start_time": 1226950.0,
      "end_time": 1228750.0,
      "text": "reading from at the same time."
    },
    {
      "index": 545,
      "start_time": 1228750.0,
      "end_time": 1231980.0,
      "text": "So if we walk through and see what&#39;s going on, let&#39;s say we"
    },
    {
      "index": 546,
      "start_time": 1231980.0,
      "end_time": 1235870.0,
      "text": "have that reallocation happen, like we saw at the beginning"
    },
    {
      "index": 547,
      "start_time": 1235870.0,
      "end_time": 1236766.0,
      "text": "with C++."
    },
    {
      "index": 548,
      "start_time": 1236770.0,
      "end_time": 1238464.0,
      "text": "So we have our vector of 123."
    },
    {
      "index": 549,
      "start_time": 1238460.0,
      "end_time": 1240360.0,
      "text": "We push the first element, reallocate."
    },
    {
      "index": 550,
      "start_time": 1240360.0,
      "end_time": 1242170.0,
      "text": "We now have 1231."
    },
    {
      "index": 551,
      "start_time": 1242170.0,
      "end_time": 1243960.0,
      "text": "But the key thing that&#39;s going to go wrong"
    },
    {
      "index": 552,
      "start_time": 1243960.0,
      "end_time": 1247169.0,
      "text": "here is, as we go to the next loop of the iteration,"
    },
    {
      "index": 553,
      "start_time": 1247170.0,
      "end_time": 1248961.0,
      "text": "we&#39;re going to update this element pointer."
    },
    {
      "index": 554,
      "start_time": 1248960.0,
      "end_time": 1250626.0,
      "text": "But now it&#39;s pointing into freed memory."
    },
    {
      "index": 555,
      "start_time": 1250630.0,
      "end_time": 1253224.0,
      "text": "This dangling pointer just was hanging out here."
    },
    {
      "index": 556,
      "start_time": 1253220.0,
      "end_time": 1257040.0,
      "text": "And this would be a problem if Rust were going to allow this."
    },
    {
      "index": 557,
      "start_time": 1257040.0,
      "end_time": 1259690.0,
      "text": "But if we actually try to write this down in Rust,"
    },
    {
      "index": 558,
      "start_time": 1259690.0,
      "end_time": 1261875.0,
      "text": "we can actually see what&#39;s going on here."
    },
    {
      "index": 559,
      "start_time": 1261880.0,
      "end_time": 1263255.0,
      "text": "The first thing we&#39;ll do is we&#39;ll"
    },
    {
      "index": 560,
      "start_time": 1263250.0,
      "end_time": 1264417.0,
      "text": "take out a shared reference."
    },
    {
      "index": 561,
      "start_time": 1264420.0,
      "end_time": 1265877.0,
      "text": "And the next thing that we&#39;ll do is"
    },
    {
      "index": 562,
      "start_time": 1265870.0,
      "end_time": 1267586.0,
      "text": "try to take out this mutable reference."
    },
    {
      "index": 563,
      "start_time": 1267590.0,
      "end_time": 1269048.0,
      "text": "But what&#39;s actually going to happen"
    },
    {
      "index": 564,
      "start_time": 1269050.0,
      "end_time": 1272002.0,
      "text": "is the compiler is forbidding both shared references"
    },
    {
      "index": 565,
      "start_time": 1272000.0,
      "end_time": 1275240.0,
      "text": "and mutable references from happening at the same time."
    },
    {
      "index": 566,
      "start_time": 1275240.0,
      "end_time": 1277600.0,
      "text": "So the compiler has this notion of when"
    },
    {
      "index": 567,
      "start_time": 1277600.0,
      "end_time": 1279160.0,
      "text": "a shared reference is active and when"
    },
    {
      "index": 568,
      "start_time": 1279160.0,
      "end_time": 1280410.0,
      "text": "a mutable reference is active."
    },
    {
      "index": 569,
      "start_time": 1280410.0,
      "end_time": 1282118.0,
      "text": "And these can never overlap, because that"
    },
    {
      "index": 570,
      "start_time": 1282120.0,
      "end_time": 1286002.0,
      "text": "would be allowing simultaneous mutation and aliasing."
    },
    {
      "index": 571,
      "start_time": 1286000.0,
      "end_time": 1288385.0,
      "text": "And this ends up giving us a very nice property"
    },
    {
      "index": 572,
      "start_time": 1288390.0,
      "end_time": 1291265.0,
      "text": "of mutable references in that a mutable reference is"
    },
    {
      "index": 573,
      "start_time": 1291260.0,
      "end_time": 1294760.0,
      "text": "the only way to access the data that it contains,"
    },
    {
      "index": 574,
      "start_time": 1294760.0,
      "end_time": 1296842.0,
      "text": "which is a very strong guarantee to provide"
    },
    {
      "index": 575,
      "start_time": 1296840.0,
      "end_time": 1298298.0,
      "text": "that if I have a mutable reference,"
    },
    {
      "index": 576,
      "start_time": 1298300.0,
      "end_time": 1300290.0,
      "text": "I am the only one that can either read or write"
    },
    {
      "index": 577,
      "start_time": 1300290.0,
      "end_time": 1301780.0,
      "text": "to this data at this point in time."
    },
    {
      "index": 578,
      "start_time": 1301780.0,
      "end_time": 1304410.0,
      "text": "And this also applies across many threads as well."
    },
    {
      "index": 579,
      "start_time": 1304410.0,
      "end_time": 1306017.0,
      "text": "So we&#39;ll see later how we can leverage"
    },
    {
      "index": 580,
      "start_time": 1306020.0,
      "end_time": 1307603.0,
      "text": "these kinds of guarantees and leverage"
    },
    {
      "index": 581,
      "start_time": 1307600.0,
      "end_time": 1312540.0,
      "text": "these kinds of static guarantees that Rust gives us"
    },
    {
      "index": 582,
      "start_time": 1312540.0,
      "end_time": 1315330.0,
      "text": "in various fashions."
    },
    {
      "index": 583,
      "start_time": 1315330.0,
      "end_time": 1316831.0,
      "text": "So this might seem a little unwieldy"
    },
    {
      "index": 584,
      "start_time": 1316830.0,
      "end_time": 1318412.0,
      "text": "if you&#39;re looking at, OK, I can either"
    },
    {
      "index": 585,
      "start_time": 1318410.0,
      "end_time": 1320387.0,
      "text": "have a shared reference or a mutable reference."
    },
    {
      "index": 586,
      "start_time": 1320390.0,
      "end_time": 1322290.0,
      "text": "But I&#39;ve got to make sure they somehow match up."
    },
    {
      "index": 587,
      "start_time": 1322290.0,
      "end_time": 1324498.0,
      "text": "But I don&#39;t want to have to contort code to make sure"
    },
    {
      "index": 588,
      "start_time": 1324500.0,
      "end_time": 1325772.0,
      "text": "that it actually works out."
    },
    {
      "index": 589,
      "start_time": 1325770.0,
      "end_time": 1328560.0,
      "text": "So in this case, we&#39;re going to take a pointer into the vector,"
    },
    {
      "index": 590,
      "start_time": 1328560.0,
      "end_time": 1330850.0,
      "text": "just &amp;vec[i]."
    },
    {
      "index": 591,
      "start_time": 1330850.0,
      "end_time": 1333324.0,
      "text": "But the compiler, when we come down to this vec.push,"
    },
    {
      "index": 592,
      "start_time": 1333320.0,
      "end_time": 1334486.0,
      "text": "this needs to be disallowed."
    },
    {
      "index": 593,
      "start_time": 1334490.0,
      "end_time": 1336400.0,
      "text": "Because this pointer could become"
    },
    {
      "index": 594,
      "start_time": 1336400.0,
      "end_time": 1338740.0,
      "text": "invalid if we allow the push."
    },
    {
      "index": 595,
      "start_time": 1338740.0,
      "end_time": 1342210.0,
      "text": "So the compiler has this notion of the lifetime of references."
    },
    {
      "index": 596,
      "start_time": 1342210.0,
      "end_time": 1344490.0,
      "text": "So know that the lifetime of this elem reference"
    },
    {
      "index": 597,
      "start_time": 1344490.0,
      "end_time": 1346110.0,
      "text": "is the scope of this for loop."
    },
    {
      "index": 598,
      "start_time": 1346110.0,
      "end_time": 1348350.0,
      "text": "And we know that because the mutation happens"
    },
    {
      "index": 599,
      "start_time": 1348350.0,
      "end_time": 1350017.0,
      "text": "in the lifetime of the shared reference,"
    },
    {
      "index": 600,
      "start_time": 1350020.0,
      "end_time": 1351811.0,
      "text": "it&#39;s completely disallowed by the compiler."
    },
    {
      "index": 601,
      "start_time": 1351810.0,
      "end_time": 1354382.0,
      "text": "And it prevents these two from happening at the same time."
    },
    {
      "index": 602,
      "start_time": 1354380.0,
      "end_time": 1357000.0,
      "text": "But once we&#39;ve gone outside the loop,"
    },
    {
      "index": 603,
      "start_time": 1357000.0,
      "end_time": 1359930.0,
      "text": "the compiler knows that the shared reference has fallen out"
    },
    {
      "index": 604,
      "start_time": 1359930.0,
      "end_time": 1360430.0,
      "text": "of scope."
    },
    {
      "index": 605,
      "start_time": 1360430.0,
      "end_time": 1362030.0,
      "text": "There&#39;s no active shared references,"
    },
    {
      "index": 606,
      "start_time": 1362030.0,
      "end_time": 1363600.0,
      "text": "so we can allow mutation."
    },
    {
      "index": 607,
      "start_time": 1363600.0,
      "end_time": 1365150.0,
      "text": "And what this basically boils down to"
    },
    {
      "index": 608,
      "start_time": 1365150.0,
      "end_time": 1368710.0,
      "text": "is that in code, basically, you can chunk up"
    },
    {
      "index": 609,
      "start_time": 1368710.0,
      "end_time": 1370830.0,
      "text": "the time which a vector is alive for"
    },
    {
      "index": 610,
      "start_time": 1370830.0,
      "end_time": 1372810.0,
      "text": "or any resource is alive for."
    },
    {
      "index": 611,
      "start_time": 1372810.0,
      "end_time": 1375200.0,
      "text": "And it can either be borrowed in a shared fashion"
    },
    {
      "index": 612,
      "start_time": 1375200.0,
      "end_time": 1376880.0,
      "text": "or borrowed in a mutable fashion."
    },
    {
      "index": 613,
      "start_time": 1376880.0,
      "end_time": 1378360.0,
      "text": "And it can happen a bunch of times."
    },
    {
      "index": 614,
      "start_time": 1378360.0,
      "end_time": 1379526.0,
      "text": "They just can never overlap."
    },
    {
      "index": 615,
      "start_time": 1382240.0,
      "end_time": 1384290.0,
      "text": "So those are the fundamental concepts"
    },
    {
      "index": 616,
      "start_time": 1384290.0,
      "end_time": 1387090.0,
      "text": "of ownership/borrowing in Rust, this whole idea of I"
    },
    {
      "index": 617,
      "start_time": 1387090.0,
      "end_time": 1387870.0,
      "text": "own a resource."
    },
    {
      "index": 618,
      "start_time": 1387870.0,
      "end_time": 1389640.0,
      "text": "I can pass it around to other threads."
    },
    {
      "index": 619,
      "start_time": 1389640.0,
      "end_time": 1391720.0,
      "text": "But I can pass around ownership so that you"
    },
    {
      "index": 620,
      "start_time": 1391720.0,
      "end_time": 1393117.0,
      "text": "get to control the lifetime."
    },
    {
      "index": 621,
      "start_time": 1393120.0,
      "end_time": 1395703.0,
      "text": "But I can also lend on a borrow, where you can either read it,"
    },
    {
      "index": 622,
      "start_time": 1395700.0,
      "end_time": 1396575.0,
      "text": "or you can mutate it."
    },
    {
      "index": 623,
      "start_time": 1396570.0,
      "end_time": 1398375.0,
      "text": "But I&#39;m still in control of the lifetime"
    },
    {
      "index": 624,
      "start_time": 1398380.0,
      "end_time": 1400210.0,
      "text": "of the resource itself."
    },
    {
      "index": 625,
      "start_time": 1400210.0,
      "end_time": 1403350.0,
      "text": "So I want to give you a taste of how using these two concepts"
    },
    {
      "index": 626,
      "start_time": 1403350.0,
      "end_time": 1405670.0,
      "text": "baked into the language, which are somewhat simple,"
    },
    {
      "index": 627,
      "start_time": 1405670.0,
      "end_time": 1407820.0,
      "text": "we can build up concurrency abstractions."
    },
    {
      "index": 628,
      "start_time": 1407820.0,
      "end_time": 1410037.0,
      "text": "We can build up these great concurrency libraries."
    },
    {
      "index": 629,
      "start_time": 1410040.0,
      "end_time": 1411623.0,
      "text": "And one of the great things about Rust"
    },
    {
      "index": 630,
      "start_time": 1411620.0,
      "end_time": 1414750.0,
      "text": "is that there&#39;s all these ways to tackle concurrency."
    },
    {
      "index": 631,
      "start_time": 1414750.0,
      "end_time": 1415750.0,
      "text": "There&#39;s message passing."
    },
    {
      "index": 632,
      "start_time": 1415750.0,
      "end_time": 1416666.0,
      "text": "There&#39;s shared memory."
    },
    {
      "index": 633,
      "start_time": 1416670.0,
      "end_time": 1417344.0,
      "text": "There&#39;s mutexes."
    },
    {
      "index": 634,
      "start_time": 1417340.0,
      "end_time": 1419000.0,
      "text": "There&#39;s all these different paradigms."
    },
    {
      "index": 635,
      "start_time": 1419000.0,
      "end_time": 1422067.0,
      "text": "But in Rust, these are all 100% built into libraries."
    },
    {
      "index": 636,
      "start_time": 1422070.0,
      "end_time": 1424403.0,
      "text": "None of these are actually found in the language itself."
    },
    {
      "index": 637,
      "start_time": 1424400.0,
      "end_time": 1426483.0,
      "text": "Because they&#39;re all leveraging ownership/borrowing"
    },
    {
      "index": 638,
      "start_time": 1426480.0,
      "end_time": 1429139.0,
      "text": "to give you a safe interface at compile time."
    },
    {
      "index": 639,
      "start_time": 1429140.0,
      "end_time": 1431348.0,
      "text": "And one of the other cool things we&#39;ll see about this"
    },
    {
      "index": 640,
      "start_time": 1431350.0,
      "end_time": 1434990.0,
      "text": "is that you typically have these standard best practices"
    },
    {
      "index": 641,
      "start_time": 1434990.0,
      "end_time": 1437330.0,
      "text": "whenever you&#39;re using these paradigms."
    },
    {
      "index": 642,
      "start_time": 1437330.0,
      "end_time": 1438970.0,
      "text": "And Rust is going to statically enforce"
    },
    {
      "index": 643,
      "start_time": 1438970.0,
      "end_time": 1440720.0,
      "text": "that you must follow these best practices."
    },
    {
      "index": 644,
      "start_time": 1440720.0,
      "end_time": 1441880.0,
      "text": "You cannot break them."
    },
    {
      "index": 645,
      "start_time": 1441880.0,
      "end_time": 1444352.0,
      "text": "And I&#39;ll show you some examples as we go through."
    },
    {
      "index": 646,
      "start_time": 1444350.0,
      "end_time": 1446558.0,
      "text": "So the fundamental thing that we&#39;re trying to prevent"
    },
    {
      "index": 647,
      "start_time": 1446560.0,
      "end_time": 1448140.0,
      "text": "is something called a data race."
    },
    {
      "index": 648,
      "start_time": 1448140.0,
      "end_time": 1450245.0,
      "text": "A data race is what happens when two threads,"
    },
    {
      "index": 649,
      "start_time": 1450240.0,
      "end_time": 1452865.0,
      "text": "in an unsynchronized fashion, access the same memory"
    },
    {
      "index": 650,
      "start_time": 1452870.0,
      "end_time": 1455330.0,
      "text": "so where at least one is a write."
    },
    {
      "index": 651,
      "start_time": 1455330.0,
      "end_time": 1457950.0,
      "text": "And in terms of C++, this is called undefined behavior."
    },
    {
      "index": 652,
      "start_time": 1457950.0,
      "end_time": 1459930.0,
      "text": "A data race will lead to undefined behavior."
    },
    {
      "index": 653,
      "start_time": 1459930.0,
      "end_time": 1461430.0,
      "text": "And basically, what&#39;s happening here"
    },
    {
      "index": 654,
      "start_time": 1461430.0,
      "end_time": 1464420.0,
      "text": "is because we use LLVM as a back end,"
    },
    {
      "index": 655,
      "start_time": 1464420.0,
      "end_time": 1466860.0,
      "text": "LLVM assumes that a data race is undefined behavior."
    },
    {
      "index": 656,
      "start_time": 1466860.0,
      "end_time": 1468630.0,
      "text": "So the optimizer can do whatever it"
    },
    {
      "index": 657,
      "start_time": 1468630.0,
      "end_time": 1471950.0,
      "text": "wants if it detects the code could have a data race."
    },
    {
      "index": 658,
      "start_time": 1471950.0,
      "end_time": 1474420.0,
      "text": "So we need to prevent this to prevent our optimization"
    },
    {
      "index": 659,
      "start_time": 1474420.0,
      "end_time": 1477540.0,
      "text": "passes from going awry and doing all sorts of crazy stuff."
    },
    {
      "index": 660,
      "start_time": 1479800.0,
      "end_time": 1482050.0,
      "text": "If you take a look at the ingredients for a data race,"
    },
    {
      "index": 661,
      "start_time": 1482050.0,
      "end_time": 1484820.0,
      "text": "like if we were looking at some ingredients for the memory"
    },
    {
      "index": 662,
      "start_time": 1484820.0,
      "end_time": 1486830.0,
      "text": "unsafety we saw earlier, these three ingredients"
    },
    {
      "index": 663,
      "start_time": 1486830.0,
      "end_time": 1489210.0,
      "text": "of aliasing with more than one thread,"
    },
    {
      "index": 664,
      "start_time": 1489210.0,
      "end_time": 1491190.0,
      "text": "with mutation, where at least one&#39;s a write,"
    },
    {
      "index": 665,
      "start_time": 1491190.0,
      "end_time": 1492760.0,
      "text": "and then unsynchronized."
    },
    {
      "index": 666,
      "start_time": 1492760.0,
      "end_time": 1495440.0,
      "text": "It turns out two of these sound pretty familiar."
    },
    {
      "index": 667,
      "start_time": 1495440.0,
      "end_time": 1497550.0,
      "text": "Two of these sound like our previous system"
    },
    {
      "index": 668,
      "start_time": 1497550.0,
      "end_time": 1500350.0,
      "text": "of ownership/borrowing are going to help us also forbid"
    },
    {
      "index": 669,
      "start_time": 1500350.0,
      "end_time": 1501770.0,
      "text": "data races at the same time."
    },
    {
      "index": 670,
      "start_time": 1504260.0,
      "end_time": 1506634.0,
      "text": "So I want to talk first about messaging, message passing,"
    },
    {
      "index": 671,
      "start_time": 1506630.0,
      "end_time": 1508440.0,
      "text": "where this is going to leverage ownership"
    },
    {
      "index": 672,
      "start_time": 1508440.0,
      "end_time": 1511250.0,
      "text": "in Rust, where I have ownership of a message."
    },
    {
      "index": 673,
      "start_time": 1511250.0,
      "end_time": 1512460.0,
      "text": "Another thread comes along."
    },
    {
      "index": 674,
      "start_time": 1512460.0,
      "end_time": 1513980.0,
      "text": "I can then send them a message."
    },
    {
      "index": 675,
      "start_time": 1513980.0,
      "end_time": 1516490.0,
      "text": "And then they can also decide to send me a message."
    },
    {
      "index": 676,
      "start_time": 1516490.0,
      "end_time": 1519410.0,
      "text": "And the key idea here is that we&#39;re passing ownership"
    },
    {
      "index": 677,
      "start_time": 1519410.0,
      "end_time": 1521230.0,
      "text": "of messages between threads."
    },
    {
      "index": 678,
      "start_time": 1521230.0,
      "end_time": 1523740.0,
      "text": "So typically, whenever you&#39;re using message passing,"
    },
    {
      "index": 679,
      "start_time": 1523740.0,
      "end_time": 1526470.0,
      "text": "you have this best practice that once you&#39;ve sent a message,"
    },
    {
      "index": 680,
      "start_time": 1526470.0,
      "end_time": 1528387.0,
      "text": "you no longer access what you just sent."
    },
    {
      "index": 681,
      "start_time": 1528390.0,
      "end_time": 1530223.0,
      "text": "But you don&#39;t really have a static guarantee"
    },
    {
      "index": 682,
      "start_time": 1530220.0,
      "end_time": 1531845.0,
      "text": "that you&#39;re not accessing what you just"
    },
    {
      "index": 683,
      "start_time": 1531840.0,
      "end_time": 1533085.0,
      "text": "sent across the other thread."
    },
    {
      "index": 684,
      "start_time": 1533090.0,
      "end_time": 1536370.0,
      "text": "So what Rust is going to do is, because of ownership, we"
    },
    {
      "index": 685,
      "start_time": 1536370.0,
      "end_time": 1538710.0,
      "text": "can ensure that once we&#39;ve put a message into a channel"
    },
    {
      "index": 686,
      "start_time": 1538710.0,
      "end_time": 1542210.0,
      "text": "or across the threads, I no longer have access to it."
    },
    {
      "index": 687,
      "start_time": 1542210.0,
      "end_time": 1544605.0,
      "text": "So we&#39;re enforcing this isolation"
    },
    {
      "index": 688,
      "start_time": 1544600.0,
      "end_time": 1551295.0,
      "text": "of threads at compile time all with no overhead and zero-cost."
    },
    {
      "index": 689,
      "start_time": 1551300.0,
      "end_time": 1553110.0,
      "text": "So to run you through an example,"
    },
    {
      "index": 690,
      "start_time": 1553110.0,
      "end_time": 1554280.0,
      "text": "we have two threads here."
    },
    {
      "index": 691,
      "start_time": 1554280.0,
      "end_time": 1556910.0,
      "text": "The parent thread takes the receiver end of a channel."
    },
    {
      "index": 692,
      "start_time": 1556910.0,
      "end_time": 1558820.0,
      "text": "And it&#39;s going to spawn a child thread, which"
    },
    {
      "index": 693,
      "start_time": 1558820.0,
      "end_time": 1561040.0,
      "text": "is going to take the transmission onto this channel."
    },
    {
      "index": 694,
      "start_time": 1561040.0,
      "end_time": 1562498.0,
      "text": "And what we&#39;re going to end up with"
    },
    {
      "index": 695,
      "start_time": 1562500.0,
      "end_time": 1565629.0,
      "text": "is these two pointers pointing at shared memories."
    },
    {
      "index": 696,
      "start_time": 1565630.0,
      "end_time": 1567213.0,
      "text": "The shared state of the channel itself"
    },
    {
      "index": 697,
      "start_time": 1567210.0,
      "end_time": 1569880.0,
      "text": "is the queue of messages on the channel."
    },
    {
      "index": 698,
      "start_time": 1569880.0,
      "end_time": 1571459.0,
      "text": "And then as the child starts running,"
    },
    {
      "index": 699,
      "start_time": 1571460.0,
      "end_time": 1573251.0,
      "text": "it&#39;s going to create a vector on its stack."
    },
    {
      "index": 700,
      "start_time": 1573250.0,
      "end_time": 1574791.0,
      "text": "It&#39;s going to push some data onto it,"
    },
    {
      "index": 701,
      "start_time": 1574790.0,
      "end_time": 1576399.0,
      "text": "add some new data onto the vector."
    },
    {
      "index": 702,
      "start_time": 1576400.0,
      "end_time": 1578330.0,
      "text": "And then it&#39;s going to decide that it wants"
    },
    {
      "index": 703,
      "start_time": 1578330.0,
      "end_time": 1580050.0,
      "text": "to send it along this channel."
    },
    {
      "index": 704,
      "start_time": 1580050.0,
      "end_time": 1582510.0,
      "text": "So like the moves we saw earlier, what&#39;s going to happen"
    },
    {
      "index": 705,
      "start_time": 1582510.0,
      "end_time": 1585070.0,
      "text": "is this will create a shallow copy at runtime."
    },
    {
      "index": 706,
      "start_time": 1585070.0,
      "end_time": 1588430.0,
      "text": "And it&#39;ll transfer ownership of the value from the child"
    },
    {
      "index": 707,
      "start_time": 1588430.0,
      "end_time": 1590440.0,
      "text": "onto the channel itself."
    },
    {
      "index": 708,
      "start_time": 1590440.0,
      "end_time": 1592740.0,
      "text": "Then it&#39;s key that this ownership is not"
    },
    {
      "index": 709,
      "start_time": 1592740.0,
      "end_time": 1594920.0,
      "text": "transferring to another thread, but rather,"
    },
    {
      "index": 710,
      "start_time": 1594920.0,
      "end_time": 1595980.0,
      "text": "to a channel itself."
    },
    {
      "index": 711,
      "start_time": 1595980.0,
      "end_time": 1600880.0,
      "text": "So the owner of this data is now the channel and not the threads"
    },
    {
      "index": 712,
      "start_time": 1600880.0,
      "end_time": 1601990.0,
      "text": "themselves."
    },
    {
      "index": 713,
      "start_time": 1601990.0,
      "end_time": 1603490.0,
      "text": "So we come back to the parent, which"
    },
    {
      "index": 714,
      "start_time": 1603490.0,
      "end_time": 1605406.0,
      "text": "decides they&#39;re the ones to receive a message,"
    },
    {
      "index": 715,
      "start_time": 1605410.0,
      "end_time": 1607824.0,
      "text": "where we&#39;re going to take this shallow copy of the data"
    },
    {
      "index": 716,
      "start_time": 1607820.0,
      "end_time": 1610355.0,
      "text": "from the channel, transfer ownership over to the parent."
    },
    {
      "index": 717,
      "start_time": 1610350.0,
      "end_time": 1612335.0,
      "text": "And now the parent can have access to it"
    },
    {
      "index": 718,
      "start_time": 1612340.0,
      "end_time": 1614230.0,
      "text": "and do whatever it wants to it."
    },
    {
      "index": 719,
      "start_time": 1614230.0,
      "end_time": 1615980.0,
      "text": "Now, some key things to get away from this"
    },
    {
      "index": 720,
      "start_time": 1615980.0,
      "end_time": 1619110.0,
      "text": "are the child no longer has access to the vector."
    },
    {
      "index": 721,
      "start_time": 1619110.0,
      "end_time": 1621690.0,
      "text": "Because we have moved the data onto the channel,"
    },
    {
      "index": 722,
      "start_time": 1621690.0,
      "end_time": 1624274.0,
      "text": "there&#39;s no way for the child to continue to modify it"
    },
    {
      "index": 723,
      "start_time": 1624270.0,
      "end_time": 1624936.0,
      "text": "or to mutate it."
    },
    {
      "index": 724,
      "start_time": 1624940.0,
      "end_time": 1625980.0,
      "text": "It&#39;s passed ownership."
    },
    {
      "index": 725,
      "start_time": 1625980.0,
      "end_time": 1627560.0,
      "text": "It&#39;s relinquished ownership."
    },
    {
      "index": 726,
      "start_time": 1627560.0,
      "end_time": 1629200.0,
      "text": "Whereas on the parent side, we can"
    },
    {
      "index": 727,
      "start_time": 1629200.0,
      "end_time": 1632710.0,
      "text": "be guaranteed that once we&#39;ve received a message, that we"
    },
    {
      "index": 728,
      "start_time": 1632710.0,
      "end_time": 1633810.0,
      "text": "contain ownership."
    },
    {
      "index": 729,
      "start_time": 1633810.0,
      "end_time": 1635647.0,
      "text": "And there are no other outstanding aliases"
    },
    {
      "index": 730,
      "start_time": 1635650.0,
      "end_time": 1636233.0,
      "text": "or references."
    },
    {
      "index": 731,
      "start_time": 1636230.0,
      "end_time": 1638480.0,
      "text": "We know that we are the only way people who can"
    },
    {
      "index": 732,
      "start_time": 1638480.0,
      "end_time": 1640104.0,
      "text": "access this data at this time."
    },
    {
      "index": 733,
      "start_time": 1640100.0,
      "end_time": 1641516.0,
      "text": "And then the other thing is that I"
    },
    {
      "index": 734,
      "start_time": 1641520.0,
      "end_time": 1644410.0,
      "text": "want to emphasize this is all a shallow copy happening here"
    },
    {
      "index": 735,
      "start_time": 1644410.0,
      "end_time": 1645210.0,
      "text": "at runtime."
    },
    {
      "index": 736,
      "start_time": 1645210.0,
      "end_time": 1648020.0,
      "text": "So the data inside this vector itself was never moved around."
    },
    {
      "index": 737,
      "start_time": 1648020.0,
      "end_time": 1650875.0,
      "text": "They never copied it to other locations."
    },
    {
      "index": 738,
      "start_time": 1650880.0,
      "end_time": 1652535.0,
      "text": "All we had to do was move this point"
    },
    {
      "index": 739,
      "start_time": 1652530.0,
      "end_time": 1655234.0,
      "text": "around into the same data."
    },
    {
      "index": 740,
      "start_time": 1655230.0,
      "end_time": 1657146.0,
      "text": "So the next paradigm that I want to talk about"
    },
    {
      "index": 741,
      "start_time": 1657150.0,
      "end_time": 1659180.0,
      "text": "is shared read-only access."
    },
    {
      "index": 742,
      "start_time": 1659180.0,
      "end_time": 1661807.0,
      "text": "Typically, message passing is great for a lot"
    },
    {
      "index": 743,
      "start_time": 1661810.0,
      "end_time": 1663393.0,
      "text": "of various algorithms and various ways"
    },
    {
      "index": 744,
      "start_time": 1663390.0,
      "end_time": 1664181.0,
      "text": "to set up a system."
    },
    {
      "index": 745,
      "start_time": 1664180.0,
      "end_time": 1667089.0,
      "text": "But a lot of times, you don&#39;t want"
    },
    {
      "index": 746,
      "start_time": 1667090.0,
      "end_time": 1668560.0,
      "text": "to have to send data around."
    },
    {
      "index": 747,
      "start_time": 1668560.0,
      "end_time": 1670351.0,
      "text": "You want to send it once, and then everyone"
    },
    {
      "index": 748,
      "start_time": 1670350.0,
      "end_time": 1672529.0,
      "text": "has access to this larger array, or large image,"
    },
    {
      "index": 749,
      "start_time": 1672530.0,
      "end_time": 1674250.0,
      "text": "or whatever you want."
    },
    {
      "index": 750,
      "start_time": 1674250.0,
      "end_time": 1677110.0,
      "text": "And what Rust has for this is something that we call Arc."
    },
    {
      "index": 751,
      "start_time": 1677110.0,
      "end_time": 1679150.0,
      "text": "And Arc stands for Atomically Reference Counted."
    },
    {
      "index": 752,
      "start_time": 1679150.0,
      "end_time": 1681870.0,
      "text": "And what this means is that it&#39;s a reference count on top."
    },
    {
      "index": 753,
      "start_time": 1681870.0,
      "end_time": 1684530.0,
      "text": "And then we will modify the reference count atomically."
    },
    {
      "index": 754,
      "start_time": 1684530.0,
      "end_time": 1687100.0,
      "text": "And the actual memory representation for this pointer"
    },
    {
      "index": 755,
      "start_time": 1687100.0,
      "end_time": 1689310.0,
      "text": "is we store the reference count inline"
    },
    {
      "index": 756,
      "start_time": 1689310.0,
      "end_time": 1691590.0,
      "text": "with the rest of the data in the Arc itself."
    },
    {
      "index": 757,
      "start_time": 1691590.0,
      "end_time": 1693860.0,
      "text": "So the data fields of this vector"
    },
    {
      "index": 758,
      "start_time": 1693860.0,
      "end_time": 1695490.0,
      "text": "found at the end of the Arc pointer."
    },
    {
      "index": 759,
      "start_time": 1695490.0,
      "end_time": 1697740.0,
      "text": "But all we have to do is tack on this reference count."
    },
    {
      "index": 760,
      "start_time": 1697740.0,
      "end_time": 1701410.0,
      "text": "So this is the whole zero-cost aspect of-- the Arc"
    },
    {
      "index": 761,
      "start_time": 1701410.0,
      "end_time": 1703580.0,
      "text": "isn&#39;t giving you any extra layers of indirection"
    },
    {
      "index": 762,
      "start_time": 1703580.0,
      "end_time": 1705450.0,
      "text": "than you&#39;re already asking for."
    },
    {
      "index": 763,
      "start_time": 1705450.0,
      "end_time": 1709570.0,
      "text": "But one of the key aspects about Arc is when you create it,"
    },
    {
      "index": 764,
      "start_time": 1709570.0,
      "end_time": 1711560.0,
      "text": "it took ownership of the value."
    },
    {
      "index": 765,
      "start_time": 1711560.0,
      "end_time": 1714290.0,
      "text": "So this Arc consumed ownership of the vector when"
    },
    {
      "index": 766,
      "start_time": 1714290.0,
      "end_time": 1716830.0,
      "text": "it was created, which means that it"
    },
    {
      "index": 767,
      "start_time": 1716830.0,
      "end_time": 1720981.0,
      "text": "knows it has a static guarantee that there are no aliases."
    },
    {
      "index": 768,
      "start_time": 1720980.0,
      "end_time": 1722229.0,
      "text": "There&#39;s no mutable references."
    },
    {
      "index": 769,
      "start_time": 1722230.0,
      "end_time": 1724700.0,
      "text": "There&#39;s no one else that could possibly access this data"
    },
    {
      "index": 770,
      "start_time": 1724700.0,
      "end_time": 1726170.0,
      "text": "when it was created."
    },
    {
      "index": 771,
      "start_time": 1726170.0,
      "end_time": 1729110.0,
      "text": "So the Arc has complete control over how it gives you"
    },
    {
      "index": 772,
      "start_time": 1729110.0,
      "end_time": 1731170.0,
      "text": "access to the internal data."
    },
    {
      "index": 773,
      "start_time": 1731170.0,
      "end_time": 1735080.0,
      "text": "So being a shared read-only state primitive,"
    },
    {
      "index": 774,
      "start_time": 1735080.0,
      "end_time": 1737400.0,
      "text": "we&#39;re only going to allow shared references from this."
    },
    {
      "index": 775,
      "start_time": 1737400.0,
      "end_time": 1739210.0,
      "text": "So from an Arc, we can get a reference"
    },
    {
      "index": 776,
      "start_time": 1739210.0,
      "end_time": 1740770.0,
      "text": "to a vector of integers."
    },
    {
      "index": 777,
      "start_time": 1740770.0,
      "end_time": 1742880.0,
      "text": "And this, in a concurrent context, is immutable."
    },
    {
      "index": 778,
      "start_time": 1742880.0,
      "end_time": 1745820.0,
      "text": "So we&#39;re totally safe from data races in this case."
    },
    {
      "index": 779,
      "start_time": 1745820.0,
      "end_time": 1747905.0,
      "text": "Because there&#39;s no mutation going on here."
    },
    {
      "index": 780,
      "start_time": 1747910.0,
      "end_time": 1749535.0,
      "text": "We&#39;re only allowing aliasing, but we&#39;re"
    },
    {
      "index": 781,
      "start_time": 1749530.0,
      "end_time": 1751650.0,
      "text": "forbidding the mutation aspect."
    },
    {
      "index": 782,
      "start_time": 1751650.0,
      "end_time": 1753870.0,
      "text": "And so the key idea here is that we"
    },
    {
      "index": 783,
      "start_time": 1753870.0,
      "end_time": 1758070.0,
      "text": "can use ownerships to understand that we control access."
    },
    {
      "index": 784,
      "start_time": 1758070.0,
      "end_time": 1760810.0,
      "text": "And then using borrowing, we can control what kind of access"
    },
    {
      "index": 785,
      "start_time": 1760810.0,
      "end_time": 1761929.0,
      "text": "we give you in the Arc."
    },
    {
      "index": 786,
      "start_time": 1761930.0,
      "end_time": 1763471.0,
      "text": "So we&#39;re not giving immutable access."
    },
    {
      "index": 787,
      "start_time": 1763470.0,
      "end_time": 1766880.0,
      "text": "You can&#39;t mutate, which is kind of the best practice in shared"
    },
    {
      "index": 788,
      "start_time": 1766880.0,
      "end_time": 1767890.0,
      "text": "state concurrency."
    },
    {
      "index": 789,
      "start_time": 1767890.0,
      "end_time": 1770150.0,
      "text": "But it&#39;s not necessarily enforced at compile time."
    },
    {
      "index": 790,
      "start_time": 1770150.0,
      "end_time": 1772608.0,
      "text": "And you might accidentally have some mutation occasionally."
    },
    {
      "index": 791,
      "start_time": 1772610.0,
      "end_time": 1776631.0,
      "text": "But in Rust, it&#39;s totally forbidden at compile time."
    },
    {
      "index": 792,
      "start_time": 1776630.0,
      "end_time": 1778421.0,
      "text": "So the next thing that I want to talk about"
    },
    {
      "index": 793,
      "start_time": 1778420.0,
      "end_time": 1779840.0,
      "text": "is locked mutable access."
    },
    {
      "index": 794,
      "start_time": 1779840.0,
      "end_time": 1781630.0,
      "text": "This is when you have some mutexes use"
    },
    {
      "index": 795,
      "start_time": 1781630.0,
      "end_time": 1784190.0,
      "text": "some extra synchronization to prevent threads"
    },
    {
      "index": 796,
      "start_time": 1784190.0,
      "end_time": 1786380.0,
      "text": "from running in simultaneously."
    },
    {
      "index": 797,
      "start_time": 1786380.0,
      "end_time": 1788880.0,
      "text": "So we&#39;ll take a look at a small example here where all we do"
    },
    {
      "index": 798,
      "start_time": 1788880.0,
      "end_time": 1792880.0,
      "text": "is we take a mutex, we lock it, push some more data onto it."
    },
    {
      "index": 799,
      "start_time": 1792880.0,
      "end_time": 1795620.0,
      "text": "And the first thing you&#39;ll notice is this type parameter."
    },
    {
      "index": 800,
      "start_time": 1795620.0,
      "end_time": 1798110.0,
      "text": "We have a mutex of a vector of integers."
    },
    {
      "index": 801,
      "start_time": 1800740.0,
      "end_time": 1803502.0,
      "text": "You don&#39;t see this a lot everywhere else."
    },
    {
      "index": 802,
      "start_time": 1803500.0,
      "end_time": 1805083.0,
      "text": "This is kind of following the paradigm"
    },
    {
      "index": 803,
      "start_time": 1805080.0,
      "end_time": 1808169.0,
      "text": "of you locked in a not code."
    },
    {
      "index": 804,
      "start_time": 1808170.0,
      "end_time": 1810836.0,
      "text": "So typically, you&#39;ll see mutexes around a certain block of code."
    },
    {
      "index": 805,
      "start_time": 1810840.0,
      "end_time": 1812550.0,
      "text": "And then you&#39;ll access some data inside of it."
    },
    {
      "index": 806,
      "start_time": 1812550.0,
      "end_time": 1813970.0,
      "text": "And it&#39;s this implicit assumption"
    },
    {
      "index": 807,
      "start_time": 1813970.0,
      "end_time": 1816626.0,
      "text": "that you&#39;d better access that data only inside those mutexes."
    },
    {
      "index": 808,
      "start_time": 1816630.0,
      "end_time": 1818004.0,
      "text": "Because if you access it outside,"
    },
    {
      "index": 809,
      "start_time": 1818000.0,
      "end_time": 1819740.0,
      "text": "you might be causing some data races."
    },
    {
      "index": 810,
      "start_time": 1819740.0,
      "end_time": 1822350.0,
      "text": "So in Rust, this is a static guarantee that you&#39;re given."
    },
    {
      "index": 811,
      "start_time": 1822350.0,
      "end_time": 1825640.0,
      "text": "You are given a mutex which is explicitly protecting"
    },
    {
      "index": 812,
      "start_time": 1825640.0,
      "end_time": 1827280.0,
      "text": "the data that it is containing."
    },
    {
      "index": 813,
      "start_time": 1827280.0,
      "end_time": 1829770.0,
      "text": "And then like Arc, we have complete control"
    },
    {
      "index": 814,
      "start_time": 1829770.0,
      "end_time": 1832690.0,
      "text": "over the ownership of the data when it was created."
    },
    {
      "index": 815,
      "start_time": 1832690.0,
      "end_time": 1836350.0,
      "text": "So the mutex is only allowing you access once you&#39;ve actually"
    },
    {
      "index": 816,
      "start_time": 1836350.0,
      "end_time": 1837880.0,
      "text": "locked the mutex."
    },
    {
      "index": 817,
      "start_time": 1837880.0,
      "end_time": 1840830.0,
      "text": "So in this case, when we lock the mutex itself,"
    },
    {
      "index": 818,
      "start_time": 1840830.0,
      "end_time": 1842060.0,
      "text": "we&#39;re getting a sentinel."
    },
    {
      "index": 819,
      "start_time": 1842060.0,
      "end_time": 1843780.0,
      "text": "We&#39;re getting kind of a placeholder value"
    },
    {
      "index": 820,
      "start_time": 1843780.0,
      "end_time": 1846030.0,
      "text": "which serves as a smart pointer, in a sense,"
    },
    {
      "index": 821,
      "start_time": 1846030.0,
      "end_time": 1848320.0,
      "text": "to the data that&#39;s inside the mutex."
    },
    {
      "index": 822,
      "start_time": 1848320.0,
      "end_time": 1850820.0,
      "text": "So through this, we can mutate it."
    },
    {
      "index": 823,
      "start_time": 1850820.0,
      "end_time": 1851700.0,
      "text": "We can read it."
    },
    {
      "index": 824,
      "start_time": 1851700.0,
      "end_time": 1854030.0,
      "text": "So in this case, we&#39;re going to push some data onto it."
    },
    {
      "index": 825,
      "start_time": 1854030.0,
      "end_time": 1858150.0,
      "text": "But the key idea here is that we can only access the data"
    },
    {
      "index": 826,
      "start_time": 1858150.0,
      "end_time": 1859410.0,
      "text": "through this guard."
    },
    {
      "index": 827,
      "start_time": 1859410.0,
      "end_time": 1862560.0,
      "text": "And we can only get this guard if we&#39;ve locked the mutex."
    },
    {
      "index": 828,
      "start_time": 1862560.0,
      "end_time": 1865020.0,
      "text": "So this is where we are protecting this data."
    },
    {
      "index": 829,
      "start_time": 1865020.0,
      "end_time": 1867540.0,
      "text": "And you can only ever access it if you acquire the mutex,"
    },
    {
      "index": 830,
      "start_time": 1867540.0,
      "end_time": 1870080.0,
      "text": "preventing the data races that would happen if you access it"
    },
    {
      "index": 831,
      "start_time": 1870080.0,
      "end_time": 1871230.0,
      "text": "outside."
    },
    {
      "index": 832,
      "start_time": 1871230.0,
      "end_time": 1873710.0,
      "text": "And the other great thing about these mutexes in Rust"
    },
    {
      "index": 833,
      "start_time": 1873710.0,
      "end_time": 1875740.0,
      "text": "is that we know exactly when this lock is"
    },
    {
      "index": 834,
      "start_time": 1875740.0,
      "end_time": 1877010.0,
      "text": "going to be released."
    },
    {
      "index": 835,
      "start_time": 1877010.0,
      "end_time": 1879300.0,
      "text": "So, because we have deterministic destruction like"
    },
    {
      "index": 836,
      "start_time": 1879300.0,
      "end_time": 1881437.0,
      "text": "in C++, when this guard goes out of scope,"
    },
    {
      "index": 837,
      "start_time": 1881440.0,
      "end_time": 1883773.0,
      "text": "it&#39;s going to automatically unlock the mutex that it was"
    },
    {
      "index": 838,
      "start_time": 1883770.0,
      "end_time": 1885600.0,
      "text": "associated with."
    },
    {
      "index": 839,
      "start_time": 1885600.0,
      "end_time": 1888470.0,
      "text": "So another key aspect here is that if I try and borrow"
    },
    {
      "index": 840,
      "start_time": 1888470.0,
      "end_time": 1890320.0,
      "text": "the data from this guard, if I try and take"
    },
    {
      "index": 841,
      "start_time": 1890320.0,
      "end_time": 1892616.0,
      "text": "a borrow out of the Rust lifetime system,"
    },
    {
      "index": 842,
      "start_time": 1892620.0,
      "end_time": 1894744.0,
      "text": "like I was talking about earlier with these scopes,"
    },
    {
      "index": 843,
      "start_time": 1894740.0,
      "end_time": 1897120.0,
      "text": "can prevent us from having that reference outliving"
    },
    {
      "index": 844,
      "start_time": 1897120.0,
      "end_time": 1898260.0,
      "text": "the guard itself."
    },
    {
      "index": 845,
      "start_time": 1898260.0,
      "end_time": 1900470.0,
      "text": "So we can make sure that all references, even shared"
    },
    {
      "index": 846,
      "start_time": 1900470.0,
      "end_time": 1902511.0,
      "text": "references which you&#39;ll pull out from this guard,"
    },
    {
      "index": 847,
      "start_time": 1902510.0,
      "end_time": 1906459.0,
      "text": "are only ever accessible while the mutex itself is locked."
    },
    {
      "index": 848,
      "start_time": 1906460.0,
      "end_time": 1908835.0,
      "text": "So we can use all these ownership and borrowing"
    },
    {
      "index": 849,
      "start_time": 1908830.0,
      "end_time": 1910715.0,
      "text": "guarantees that Rust gives us to make sure"
    },
    {
      "index": 850,
      "start_time": 1910720.0,
      "end_time": 1913080.0,
      "text": "that because the datas only have access in lock,"
    },
    {
      "index": 851,
      "start_time": 1913080.0,
      "end_time": 1916612.0,
      "text": "we totally prevented data races here."
    },
    {
      "index": 852,
      "start_time": 1916610.0,
      "end_time": 1918318.0,
      "text": "And the last thing that Rust will give us"
    },
    {
      "index": 853,
      "start_time": 1918320.0,
      "end_time": 1921802.0,
      "text": "is these extra tools to check whether types"
    },
    {
      "index": 854,
      "start_time": 1921800.0,
      "end_time": 1923508.0,
      "text": "are sendable across threads, for example."
    },
    {
      "index": 855,
      "start_time": 1923510.0,
      "end_time": 1926010.0,
      "text": "This is one example of a trait that Rust gives."
    },
    {
      "index": 856,
      "start_time": 1926010.0,
      "end_time": 1928180.0,
      "text": "So what this function is saying is"
    },
    {
      "index": 857,
      "start_time": 1928180.0,
      "end_time": 1931290.0,
      "text": "that I&#39;m a function which can transfer any type which"
    },
    {
      "index": 858,
      "start_time": 1931290.0,
      "end_time": 1932640.0,
      "text": "is sendable to other friends."
    },
    {
      "index": 859,
      "start_time": 1932640.0,
      "end_time": 1936510.0,
      "text": "And then an example of this is Arc, like we saw earlier,"
    },
    {
      "index": 860,
      "start_time": 1936510.0,
      "end_time": 1938700.0,
      "text": "is indeed sendable to another thread."
    },
    {
      "index": 861,
      "start_time": 1938700.0,
      "end_time": 1942160.0,
      "text": "But its sibling, Rc, which stands for reference counted"
    },
    {
      "index": 862,
      "start_time": 1942160.0,
      "end_time": 1943650.0,
      "text": "is not sendable to other threads."
    },
    {
      "index": 863,
      "start_time": 1943650.0,
      "end_time": 1945982.0,
      "text": "This is a key difference where Rc,"
    },
    {
      "index": 864,
      "start_time": 1945980.0,
      "end_time": 1947688.0,
      "text": "the modifications to the reference count,"
    },
    {
      "index": 865,
      "start_time": 1947690.0,
      "end_time": 1948850.0,
      "text": "are not done atomically."
    },
    {
      "index": 866,
      "start_time": 1948850.0,
      "end_time": 1949975.0,
      "text": "They&#39;re much, much cheaper."
    },
    {
      "index": 867,
      "start_time": 1949970.0,
      "end_time": 1953015.0,
      "text": "So it&#39;s much faster for all these reference counts of Arcs."
    },
    {
      "index": 868,
      "start_time": 1953020.0,
      "end_time": 1956009.0,
      "text": "But if an Rc were sent to another thread,"
    },
    {
      "index": 869,
      "start_time": 1956010.0,
      "end_time": 1957551.0,
      "text": "because it was a non-atomic mutation,"
    },
    {
      "index": 870,
      "start_time": 1957550.0,
      "end_time": 1959360.0,
      "text": "you could have a data race."
    },
    {
      "index": 871,
      "start_time": 1959360.0,
      "end_time": 1961530.0,
      "text": "So at compile time, we&#39;re able to say"
    },
    {
      "index": 872,
      "start_time": 1961530.0,
      "end_time": 1965000.0,
      "text": "in Rust that Arcs are sendable, but these Rcs are not."
    },
    {
      "index": 873,
      "start_time": 1965000.0,
      "end_time": 1968760.0,
      "text": "And this is in contrast to C++&#39;s std::shared_ptr,"
    },
    {
      "index": 874,
      "start_time": 1968760.0,
      "end_time": 1970060.0,
      "text": "if you&#39;re familiar with that."
    },
    {
      "index": 875,
      "start_time": 1970060.0,
      "end_time": 1973087.0,
      "text": "They don&#39;t actually know whether this class is going"
    },
    {
      "index": 876,
      "start_time": 1973090.0,
      "end_time": 1974173.0,
      "text": "to be sent across threads."
    },
    {
      "index": 877,
      "start_time": 1974170.0,
      "end_time": 1976590.0,
      "text": "So you have to pessimistically assume that it will be."
    },
    {
      "index": 878,
      "start_time": 1976590.0,
      "end_time": 1979227.0,
      "text": "So even if you know for a fact that your references are not"
    },
    {
      "index": 879,
      "start_time": 1979230.0,
      "end_time": 1981313.0,
      "text": "actually escaping the thread you&#39;re using them in,"
    },
    {
      "index": 880,
      "start_time": 1981310.0,
      "end_time": 1983830.0,
      "text": "you still have to pay for this atomic reference count"
    },
    {
      "index": 881,
      "start_time": 1983830.0,
      "end_time": 1984512.0,
      "text": "overhead."
    },
    {
      "index": 882,
      "start_time": 1984510.0,
      "end_time": 1985968.0,
      "text": "So what this means is that in Rust,"
    },
    {
      "index": 883,
      "start_time": 1985970.0,
      "end_time": 1988310.0,
      "text": "you can pick and choose whether your primitives"
    },
    {
      "index": 884,
      "start_time": 1988310.0,
      "end_time": 1990380.0,
      "text": "are going to be thread-safe or not thread-safe."
    },
    {
      "index": 885,
      "start_time": 1990380.0,
      "end_time": 1992060.0,
      "text": "And if they&#39;re not thread-safe, you"
    },
    {
      "index": 886,
      "start_time": 1992060.0,
      "end_time": 1993520.0,
      "text": "can be guaranteed at compile time"
    },
    {
      "index": 887,
      "start_time": 1993520.0,
      "end_time": 1995820.0,
      "text": "that you&#39;re still not going to have any data races."
    },
    {
      "index": 888,
      "start_time": 1995820.0,
      "end_time": 1997797.0,
      "text": "These Rc pointers will never escape the thread"
    },
    {
      "index": 889,
      "start_time": 1997800.0,
      "end_time": 1998883.0,
      "text": "that you&#39;re using them in."
    },
    {
      "index": 890,
      "start_time": 1998880.0,
      "end_time": 2001344.0,
      "text": "And if you do actually need that, then you"
    },
    {
      "index": 891,
      "start_time": 2001340.0,
      "end_time": 2003506.0,
      "text": "can yourself opt-in to the atomic reference counting"
    },
    {
      "index": 892,
      "start_time": 2003510.0,
      "end_time": 2004926.0,
      "text": "overhead, which will be necessary."
    },
    {
      "index": 893,
      "start_time": 2007480.0,
      "end_time": 2010190.0,
      "text": "So that&#39;s an example of how using ownership"
    },
    {
      "index": 894,
      "start_time": 2010190.0,
      "end_time": 2014170.0,
      "text": "and using borrowing, we can use these tools to give us"
    },
    {
      "index": 895,
      "start_time": 2014170.0,
      "end_time": 2016070.0,
      "text": "all these great concurrency primitives,"
    },
    {
      "index": 896,
      "start_time": 2016070.0,
      "end_time": 2017840.0,
      "text": "all these primitives like message passing,"
    },
    {
      "index": 897,
      "start_time": 2017840.0,
      "end_time": 2019894.0,
      "text": "shared-state concurrency, mutex."
    },
    {
      "index": 898,
      "start_time": 2019890.0,
      "end_time": 2022056.0,
      "text": "They&#39;re all built into the standard library of Rust."
    },
    {
      "index": 899,
      "start_time": 2022060.0,
      "end_time": 2023100.0,
      "text": "They&#39;re not actually in the language"
    },
    {
      "index": 900,
      "start_time": 2023100.0,
      "end_time": 2025730.0,
      "text": "itself, which allows us to iterate on them, to make tweaks"
    },
    {
      "index": 901,
      "start_time": 2025730.0,
      "end_time": 2028210.0,
      "text": "to them, and basically extend the language and then grow it"
    },
    {
      "index": 902,
      "start_time": 2028210.0,
      "end_time": 2032350.0,
      "text": "a little bit to beyond just the concepts of ownership"
    },
    {
      "index": 903,
      "start_time": 2032350.0,
      "end_time": 2033280.0,
      "text": "and borrowing."
    },
    {
      "index": 904,
      "start_time": 2033280.0,
      "end_time": 2035370.0,
      "text": "And I want to go into now how these"
    },
    {
      "index": 905,
      "start_time": 2035370.0,
      "end_time": 2038060.0,
      "text": "are implemented, what&#39;s actually going on under the hood."
    },
    {
      "index": 906,
      "start_time": 2038060.0,
      "end_time": 2042631.0,
      "text": "Because Arc is giving you this facade of shared ownership,"
    },
    {
      "index": 907,
      "start_time": 2042630.0,
      "end_time": 2043129.0,
      "text": "actually."
    },
    {
      "index": 908,
      "start_time": 2043130.0,
      "end_time": 2045930.0,
      "text": "There are multiple references that can access this data."
    },
    {
      "index": 909,
      "start_time": 2045930.0,
      "end_time": 2047640.0,
      "text": "So this strict concept of ownership"
    },
    {
      "index": 910,
      "start_time": 2047640.0,
      "end_time": 2050699.0,
      "text": "or this strict concept of borrowing doesn&#39;t always apply."
    },
    {
      "index": 911,
      "start_time": 2050699.9999999998,
      "end_time": 2053370.9999999998,
      "text": "And this is where unsafe Rust comes into play."
    },
    {
      "index": 912,
      "start_time": 2053370.0,
      "end_time": 2056060.0,
      "text": "So Rust has this notion of unsafe code."
    },
    {
      "index": 913,
      "start_time": 2056060.0,
      "end_time": 2058900.0,
      "text": "It&#39;s a block of code delineated saying that unsafe operations"
    },
    {
      "index": 914,
      "start_time": 2058900.0,
      "end_time": 2060350.0,
      "text": "can happen within this block."
    },
    {
      "index": 915,
      "start_time": 2060350.0,
      "end_time": 2062850.0,
      "text": "And this is useful for doing things"
    },
    {
      "index": 916,
      "start_time": 2062850.0,
      "end_time": 2065924.0,
      "text": "like talking to other languages, for like CFFI bindings."
    },
    {
      "index": 917,
      "start_time": 2065920.0,
      "end_time": 2068336.0,
      "text": "Because the compiler has no idea when you call a function,"
    },
    {
      "index": 918,
      "start_time": 2068340.0000000002,
      "end_time": 2070040.0000000002,
      "text": "what it&#39;s actually going to do on the other side."
    },
    {
      "index": 919,
      "start_time": 2070040.0,
      "end_time": 2071460.0,
      "text": "So it has to assume pessimistically"
    },
    {
      "index": 920,
      "start_time": 2071460.0,
      "end_time": 2073459.0,
      "text": "that something memory unsafe is going to happen."
    },
    {
      "index": 921,
      "start_time": 2073460.0,
      "end_time": 2076041.0,
      "text": "You have to opt-in to saying, no, it actually won&#39;t."
    },
    {
      "index": 922,
      "start_time": 2076040.0,
      "end_time": 2077530.0,
      "text": "And it&#39;s also great for what I was"
    },
    {
      "index": 923,
      "start_time": 2077530.0000000002,
      "end_time": 2080250.0000000002,
      "text": "saying earlier about building Arc or building Vec."
    },
    {
      "index": 924,
      "start_time": 2080250.0,
      "end_time": 2083219.0,
      "text": "We can use unsafe code to build up new abstractions"
    },
    {
      "index": 925,
      "start_time": 2083219.9999999998,
      "end_time": 2084170.9999999998,
      "text": "in the language."
    },
    {
      "index": 926,
      "start_time": 2084170.0,
      "end_time": 2086449.0,
      "text": "And the key idea here is that because we have"
    },
    {
      "index": 927,
      "start_time": 2086449.9999999998,
      "end_time": 2087940.9999999998,
      "text": "told the compiler, trust me."
    },
    {
      "index": 928,
      "start_time": 2087940.0,
      "end_time": 2090650.0,
      "text": "I know what I&#39;m doing within this unsafe block,"
    },
    {
      "index": 929,
      "start_time": 2090650.0,
      "end_time": 2092989.0,
      "text": "I will maintain memory safety myself."
    },
    {
      "index": 930,
      "start_time": 2092989.9999999998,
      "end_time": 2095070.9999999998,
      "text": "We can make this safe abstraction around it."
    },
    {
      "index": 931,
      "start_time": 2095070.0000000002,
      "end_time": 2097600.0,
      "text": "This is the crux of Rust, is building"
    },
    {
      "index": 932,
      "start_time": 2097600.0,
      "end_time": 2099140.0,
      "text": "these safe abstractions, which might"
    },
    {
      "index": 933,
      "start_time": 2099140.0,
      "end_time": 2101190.0,
      "text": "have small, unsafe internals."
    },
    {
      "index": 934,
      "start_time": 2101190.0,
      "end_time": 2104670.0,
      "text": "But the safe abstraction is what everyone relies on"
    },
    {
      "index": 935,
      "start_time": 2104670.0,
      "end_time": 2106860.0,
      "text": "as part of the public interface."
    },
    {
      "index": 936,
      "start_time": 2106860.0,
      "end_time": 2108840.0,
      "text": "So the way this typically works is"
    },
    {
      "index": 937,
      "start_time": 2108840.0,
      "end_time": 2110510.0,
      "text": "the safe abstraction, the safe layer,"
    },
    {
      "index": 938,
      "start_time": 2110510.0,
      "end_time": 2113000.0,
      "text": "will do some dynamic runtime checks, like making sure"
    },
    {
      "index": 939,
      "start_time": 2113000.0,
      "end_time": 2114130.0,
      "text": "that indexes are inbound."
    },
    {
      "index": 940,
      "start_time": 2114130.0,
      "end_time": 2116880.0,
      "text": "Or making sure some other dynamic invariant that&#39;s"
    },
    {
      "index": 941,
      "start_time": 2116880.0,
      "end_time": 2119640.0,
      "text": "very tough to reason about at compile time."
    },
    {
      "index": 942,
      "start_time": 2119640.0,
      "end_time": 2122100.0,
      "text": "And then it&#39;s going to add on top"
    },
    {
      "index": 943,
      "start_time": 2122100.0,
      "end_time": 2124840.0,
      "text": "of that the guarantees it gets from ownership and borrowing,"
    },
    {
      "index": 944,
      "start_time": 2124840.0,
      "end_time": 2126720.0,
      "text": "these static guarantees of, if I owned it,"
    },
    {
      "index": 945,
      "start_time": 2126720.0,
      "end_time": 2129630.0,
      "text": "I&#39;m the only one, or share references I can only"
    },
    {
      "index": 946,
      "start_time": 2129630.0,
      "end_time": 2131220.0,
      "text": "read from, and mutable references I"
    },
    {
      "index": 947,
      "start_time": 2131220.0,
      "end_time": 2132310.0,
      "text": "can either read or mutate."
    },
    {
      "index": 948,
      "start_time": 2132310.0,
      "end_time": 2133610.0,
      "text": "But it&#39;s totally unique."
    },
    {
      "index": 949,
      "start_time": 2133610.0,
      "end_time": 2136030.0,
      "text": "And using all these static guarantees,"
    },
    {
      "index": 950,
      "start_time": 2136030.0,
      "end_time": 2138610.0,
      "text": "you can bend Rust a little bit in the ways"
    },
    {
      "index": 951,
      "start_time": 2138610.0,
      "end_time": 2140580.0,
      "text": "that you&#39;d like with unsafe code."
    },
    {
      "index": 952,
      "start_time": 2140580.0,
      "end_time": 2145300.0,
      "text": "And so you might be thinking, well, if we have unsafe code,"
    },
    {
      "index": 953,
      "start_time": 2145300.0,
      "end_time": 2147140.0,
      "text": "haven&#39;t we just made Rust&#39;s memory unsafe?"
    },
    {
      "index": 954,
      "start_time": 2147140.0,
      "end_time": 2150480.0,
      "text": "Haven&#39;t we just broken down this idea"
    },
    {
      "index": 955,
      "start_time": 2150480.0,
      "end_time": 2152480.0,
      "text": "on saying Rust is a safe language?"
    },
    {
      "index": 956,
      "start_time": 2152480.0,
      "end_time": 2154970.0,
      "text": "And it turns out the way this works in practice"
    },
    {
      "index": 957,
      "start_time": 2154970.0,
      "end_time": 2157970.0,
      "text": "is that ownership/borrowing cover almost all use cases I&#39;ve"
    },
    {
      "index": 958,
      "start_time": 2157970.0,
      "end_time": 2161090.0,
      "text": "ever seen in terms of how you would architect a system"
    },
    {
      "index": 959,
      "start_time": 2161090.0,
      "end_time": 2162410.0,
      "text": "or how you would design it."
    },
    {
      "index": 960,
      "start_time": 2162410.0,
      "end_time": 2165300.0,
      "text": "This concept of, I can either borrow it in a shared fashion"
    },
    {
      "index": 961,
      "start_time": 2165300.0,
      "end_time": 2167060.0,
      "text": "or borrow it in a mutable fashion."
    },
    {
      "index": 962,
      "start_time": 2167060.0,
      "end_time": 2169990.0,
      "text": "It encompasses, well, maybe with the little tweaks of what"
    },
    {
      "index": 963,
      "start_time": 2169990.0,
      "end_time": 2171210.0,
      "text": "you&#39;re already doing today."
    },
    {
      "index": 964,
      "start_time": 2171210.0,
      "end_time": 2173720.0,
      "text": "This is already the best practice"
    },
    {
      "index": 965,
      "start_time": 2173720.0,
      "end_time": 2175180.0,
      "text": "of how you&#39;re accessing data."
    },
    {
      "index": 966,
      "start_time": 2175180.0,
      "end_time": 2178520.0,
      "text": "And this is just codifying it at compile time."
    },
    {
      "index": 967,
      "start_time": 2178520.0,
      "end_time": 2180345.0,
      "text": "And as a testament to this, Cargo,"
    },
    {
      "index": 968,
      "start_time": 2180340.0,
      "end_time": 2181715.0,
      "text": "which is Rust&#39;s package manager--"
    },
    {
      "index": 969,
      "start_time": 2181720.0,
      "end_time": 2183720.0,
      "text": "I&#39;ll talk about that in a second-- and Skylight,"
    },
    {
      "index": 970,
      "start_time": 2183720.0,
      "end_time": 2185930.0,
      "text": "like I said earlier, have zero unsafe blocks."
    },
    {
      "index": 971,
      "start_time": 2185930.0,
      "end_time": 2187800.0,
      "text": "There&#39;s no unsafe code in these projects,"
    },
    {
      "index": 972,
      "start_time": 2187800.0,
      "end_time": 2189870.0,
      "text": "except for [INAUDIBLE], which is kind of assumed."
    },
    {
      "index": 973,
      "start_time": 2189870.0,
      "end_time": 2191680.0,
      "text": "And these are fairly substantial projects"
    },
    {
      "index": 974,
      "start_time": 2191680.0,
      "end_time": 2194267.0,
      "text": "that are doing some pretty crazy internal things, things"
    },
    {
      "index": 975,
      "start_time": 2194270.0,
      "end_time": 2195853.0,
      "text": "with ownership, things with borrowing."
    },
    {
      "index": 976,
      "start_time": 2195850.0,
      "end_time": 2197641.0,
      "text": "And they haven&#39;t felt the need to fall down"
    },
    {
      "index": 977,
      "start_time": 2197640.0,
      "end_time": 2200959.0,
      "text": "to this unsafe code to break any invariants."
    },
    {
      "index": 978,
      "start_time": 2200960.0,
      "end_time": 2202460.0,
      "text": "So they&#39;ve been able to fit entirely"
    },
    {
      "index": 979,
      "start_time": 2202460.0,
      "end_time": 2204630.0,
      "text": "within this programming model."
    },
    {
      "index": 980,
      "start_time": 2204630.0,
      "end_time": 2206060.0,
      "text": "But the great thing about unsafe,"
    },
    {
      "index": 981,
      "start_time": 2206060.0,
      "end_time": 2208810.0,
      "text": "like I was saying with Arc, is we can extend the programming"
    },
    {
      "index": 982,
      "start_time": 2208810.0,
      "end_time": 2209590.0,
      "text": "model."
    },
    {
      "index": 983,
      "start_time": 2209590.0,
      "end_time": 2212620.0,
      "text": "If you do find yourself needing to drop down to unsafe"
    },
    {
      "index": 984,
      "start_time": 2212620.0,
      "end_time": 2214920.0,
      "text": "or to have a little bit of unsafe code, what it means"
    },
    {
      "index": 985,
      "start_time": 2214920.0,
      "end_time": 2217440.0,
      "text": "is you&#39;re probably writing a very small primitive, a very"
    },
    {
      "index": 986,
      "start_time": 2217440.0,
      "end_time": 2219490.0,
      "text": "small thing that you can very easily reason about"
    },
    {
      "index": 987,
      "start_time": 2219490.0,
      "end_time": 2220970.0,
      "text": "and say, yeah, this is safe."
    },
    {
      "index": 988,
      "start_time": 2220970.0,
      "end_time": 2223080.0,
      "text": "The compiler can&#39;t totally reason about this."
    },
    {
      "index": 989,
      "start_time": 2223080.0,
      "end_time": 2224560.0,
      "text": "But is a safe extraction."
    },
    {
      "index": 990,
      "start_time": 2224560.0,
      "end_time": 2226781.0,
      "text": "And using that, you can add new primitives."
    },
    {
      "index": 991,
      "start_time": 2226780.0,
      "end_time": 2229029.0,
      "text": "Like we have these things called Cells, or RefCells, x"
    },
    {
      "index": 992,
      "start_time": 2229030.0,
      "end_time": 2230430.0,
      "text": "or Mutexes, or Arcs, all this fun"
    },
    {
      "index": 993,
      "start_time": 2230430.0,
      "end_time": 2231900.0,
      "text": "stuff in the standard library."
    },
    {
      "index": 994,
      "start_time": 2231900.0,
      "end_time": 2233410.0,
      "text": "And you could build on top of what"
    },
    {
      "index": 995,
      "start_time": 2233410.0,
      "end_time": 2235720.0,
      "text": "we&#39;re given by ownership/borrowing by bending"
    },
    {
      "index": 996,
      "start_time": 2235720.0,
      "end_time": 2238005.0,
      "text": "ownership/borrowing just a little bit to give us"
    },
    {
      "index": 997,
      "start_time": 2238000.0,
      "end_time": 2240375.0,
      "text": "these new set of primitives that we can leverage and take"
    },
    {
      "index": 998,
      "start_time": 2240380.0,
      "end_time": 2243330.0,
      "text": "advantage of."
    },
    {
      "index": 999,
      "start_time": 2243330.0,
      "end_time": 2246500.0,
      "text": "So that&#39;s ownership/borrowing in a nutshell, how we can"
    },
    {
      "index": 1000,
      "start_time": 2246500.0,
      "end_time": 2247860.0,
      "text": "use it to build concurrency."
    },
    {
      "index": 1001,
      "start_time": 2247860.0,
      "end_time": 2250400.0,
      "text": "And then how we can use all of these guarantees"
    },
    {
      "index": 1002,
      "start_time": 2250400.0,
      "end_time": 2252217.0,
      "text": "to use unsafe code to build new primitives."
    },
    {
      "index": 1003,
      "start_time": 2252220.0,
      "end_time": 2253803.0,
      "text": "And I&#39;m going to talk a little bit now"
    },
    {
      "index": 1004,
      "start_time": 2253800.0,
      "end_time": 2256880.0,
      "text": "about using Rust today, just a quick tour of some"
    },
    {
      "index": 1005,
      "start_time": 2256880.0,
      "end_time": 2261720.0,
      "text": "of the stuff that we have and the tools that Rust provides."
    },
    {
      "index": 1006,
      "start_time": 2261720.0,
      "end_time": 2263780.0,
      "text": "One of the primary ones is Cargo."
    },
    {
      "index": 1007,
      "start_time": 2263780.0,
      "end_time": 2265910.0,
      "text": "So I said this earlier, but Cargo is Rust&#39;s package"
    },
    {
      "index": 1008,
      "start_time": 2265910.0,
      "end_time": 2268229.0,
      "text": "manager, where what it does is it manages"
    },
    {
      "index": 1009,
      "start_time": 2268230.0,
      "end_time": 2269271.0,
      "text": "all of your dependencies."
    },
    {
      "index": 1010,
      "start_time": 2269270.0,
      "end_time": 2271440.0,
      "text": "It&#39;s very similar to Ruby&#39;s Bundler."
    },
    {
      "index": 1011,
      "start_time": 2271440.0,
      "end_time": 2273740.0,
      "text": "And it&#39;ll take care of building our dependencies,"
    },
    {
      "index": 1012,
      "start_time": 2273740.0,
      "end_time": 2275670.0,
      "text": "building transit dependencies making sure"
    },
    {
      "index": 1013,
      "start_time": 2275670.0,
      "end_time": 2277944.0,
      "text": "that all your system libraries are in place."
    },
    {
      "index": 1014,
      "start_time": 2277940.0,
      "end_time": 2279356.0,
      "text": "It&#39;ll take care of all this logic,"
    },
    {
      "index": 1015,
      "start_time": 2279360.0,
      "end_time": 2281910.0,
      "text": "allowing you to get to writing your application."
    },
    {
      "index": 1016,
      "start_time": 2281910.0,
      "end_time": 2283840.0,
      "text": "So one of the great things about this"
    },
    {
      "index": 1017,
      "start_time": 2283840.0,
      "end_time": 2286920.0,
      "text": "is we can guarantee reproducible builds."
    },
    {
      "index": 1018,
      "start_time": 2286920.0,
      "end_time": 2288870.0,
      "text": "So this is a very important part of Bundler,"
    },
    {
      "index": 1019,
      "start_time": 2288870.0,
      "end_time": 2290869.0,
      "text": "if you&#39;re familiar with that, with locked files."
    },
    {
      "index": 1020,
      "start_time": 2290870.0,
      "end_time": 2292961.0,
      "text": "And we took the same concept to Cargo,"
    },
    {
      "index": 1021,
      "start_time": 2292960.0,
      "end_time": 2295095.0,
      "text": "where if I ever build a project I"
    },
    {
      "index": 1022,
      "start_time": 2295090.0,
      "end_time": 2297215.0,
      "text": "can then be guaranteed, if it&#39;s successfully built,"
    },
    {
      "index": 1023,
      "start_time": 2297220.0,
      "end_time": 2299550.0,
      "text": "that later in the future, I can build that project again."
    },
    {
      "index": 1024,
      "start_time": 2299550.0,
      "end_time": 2301860.0,
      "text": "I don&#39;t have to worry about getting all the same versions"
    },
    {
      "index": 1025,
      "start_time": 2301860.0,
      "end_time": 2303276.0,
      "text": "of all the dependencies and making"
    },
    {
      "index": 1026,
      "start_time": 2303280.0,
      "end_time": 2305354.0,
      "text": "sure all the transitive dependencies work out."
    },
    {
      "index": 1027,
      "start_time": 2305350.0,
      "end_time": 2307970.0,
      "text": "I can be very confident that it was the same set of code"
    },
    {
      "index": 1028,
      "start_time": 2307970.0,
      "end_time": 2309170.0,
      "text": "will build again."
    },
    {
      "index": 1029,
      "start_time": 2309170.0,
      "end_time": 2313680.0,
      "text": "And then all the libraries today for Cargo are crates,"
    },
    {
      "index": 1030,
      "start_time": 2313680.0,
      "end_time": 2315290.0,
      "text": "and they&#39;re all hosted on crates.io."
    },
    {
      "index": 1031,
      "start_time": 2315290.0,
      "end_time": 2317373.0,
      "text": "We have a very booming and active community today."
    },
    {
      "index": 1032,
      "start_time": 2317370.0,
      "end_time": 2320077.0,
      "text": "And this has been absolutely critical to Rust&#39;s"
    },
    {
      "index": 1033,
      "start_time": 2320080.0,
      "end_time": 2322500.0,
      "text": "initial surge into the market."
    },
    {
      "index": 1034,
      "start_time": 2322500.0,
      "end_time": 2325560.0,
      "text": "A lot of Rust&#39;s initial success has been-- it&#39;s very,"
    },
    {
      "index": 1035,
      "start_time": 2325560.0,
      "end_time": 2328980.0,
      "text": "very easy to put your code up on crates.io and to also use"
    },
    {
      "index": 1036,
      "start_time": 2328980.0,
      "end_time": 2330060.0,
      "text": "everyone else&#39;s."
    },
    {
      "index": 1037,
      "start_time": 2330060.0,
      "end_time": 2332059.0,
      "text": "So even now it&#39;s quickly becoming the case"
    },
    {
      "index": 1038,
      "start_time": 2332060.0,
      "end_time": 2334351.0,
      "text": "that if you have some pretty common use case, like gzip"
    },
    {
      "index": 1039,
      "start_time": 2334350.0,
      "end_time": 2337780.0,
      "text": "or bzip or various compression, or XML, or parsing JSON,"
    },
    {
      "index": 1040,
      "start_time": 2337780.0,
      "end_time": 2339250.0,
      "text": "it&#39;s already there on crates.io."
    },
    {
      "index": 1041,
      "start_time": 2339250.0,
      "end_time": 2342470.0,
      "text": "And it&#39;s very easy to pull those crates down, use them yourself,"
    },
    {
      "index": 1042,
      "start_time": 2342470.0,
      "end_time": 2345360.0,
      "text": "browse documentation, and go through the whole using"
    },
    {
      "index": 1043,
      "start_time": 2345360.0,
      "end_time": 2348400.0,
      "text": "everyone else&#39;s Rust code yourself."
    },
    {
      "index": 1044,
      "start_time": 2348400.0,
      "end_time": 2350430.0,
      "text": "And a little bit on Rust itself."
    },
    {
      "index": 1045,
      "start_time": 2350430.0,
      "end_time": 2353790.0,
      "text": "Rust itself recently reached the 1.0 stable status"
    },
    {
      "index": 1046,
      "start_time": 2353790.0,
      "end_time": 2354500.0,
      "text": "this past May."
    },
    {
      "index": 1047,
      "start_time": 2354500.0,
      "end_time": 2357570.0,
      "text": "So this is a very large milestone for Rust,"
    },
    {
      "index": 1048,
      "start_time": 2357570.0,
      "end_time": 2358907.0,
      "text": "reaching the sustainable aspect."
    },
    {
      "index": 1049,
      "start_time": 2358910.0,
      "end_time": 2360493.0,
      "text": "We&#39;re no longer breaking the language."
    },
    {
      "index": 1050,
      "start_time": 2360490.0,
      "end_time": 2362489.0,
      "text": "We&#39;re no longer breaking the standard libraries."
    },
    {
      "index": 1051,
      "start_time": 2362490.0,
      "end_time": 2365401.0,
      "text": "You can guarantee that Rust is not changing in the future."
    },
    {
      "index": 1052,
      "start_time": 2365400.0,
      "end_time": 2368040.0,
      "text": "And coming along with this is this release training idea"
    },
    {
      "index": 1053,
      "start_time": 2368040.0,
      "end_time": 2370470.0,
      "text": "where we have this pipeline of channels where"
    },
    {
      "index": 1054,
      "start_time": 2370470.0,
      "end_time": 2373840.0,
      "text": "we have the stable channel, the beta channel,"
    },
    {
      "index": 1055,
      "start_time": 2373840.0,
      "end_time": 2376900.0,
      "text": "and the nightly channel where we promote these"
    },
    {
      "index": 1056,
      "start_time": 2376900.0,
      "end_time": 2378920.0,
      "text": "at a regular cycle, kind of like web browsers."
    },
    {
      "index": 1057,
      "start_time": 2378920.0,
      "end_time": 2382670.0,
      "text": "And we&#39;ll see that we have a whole stabilization"
    },
    {
      "index": 1058,
      "start_time": 2382670.0,
      "end_time": 2385000.0,
      "text": "pipeline for features where the new features,"
    },
    {
      "index": 1059,
      "start_time": 2385000.0,
      "end_time": 2386800.0,
      "text": "we can iterate on very quickly in nightly."
    },
    {
      "index": 1060,
      "start_time": 2386800.0,
      "end_time": 2388790.0,
      "text": "And you can have access to them basically"
    },
    {
      "index": 1061,
      "start_time": 2388790.0,
      "end_time": 2390310.0,
      "text": "immediately, as soon as they&#39;re implemented."
    },
    {
      "index": 1062,
      "start_time": 2390310.0,
      "end_time": 2391351.0,
      "text": "You can give us feedback."
    },
    {
      "index": 1063,
      "start_time": 2391350.0,
      "end_time": 2392151.0,
      "text": "We can fix bugs."
    },
    {
      "index": 1064,
      "start_time": 2392150.0,
      "end_time": 2393108.0,
      "text": "We can iterate on them."
    },
    {
      "index": 1065,
      "start_time": 2393110.0,
      "end_time": 2395013.0,
      "text": "Or we prevent them from leaking into the beta"
    },
    {
      "index": 1066,
      "start_time": 2395010.0,
      "end_time": 2396477.0,
      "text": "and the stable channels."
    },
    {
      "index": 1067,
      "start_time": 2396480.0,
      "end_time": 2399400.0,
      "text": "But then once a feature is actually"
    },
    {
      "index": 1068,
      "start_time": 2399400.0,
      "end_time": 2401335.0,
      "text": "stabilized in the nightly channel,"
    },
    {
      "index": 1069,
      "start_time": 2401330.0,
      "end_time": 2403455.0,
      "text": "it&#39;s a very short amount of time before it actually"
    },
    {
      "index": 1070,
      "start_time": 2403460.0,
      "end_time": 2404835.0,
      "text": "gets into beta, gets into stable,"
    },
    {
      "index": 1071,
      "start_time": 2404830.0,
      "end_time": 2406575.0,
      "text": "and everyone can start using it."
    },
    {
      "index": 1072,
      "start_time": 2406580.0,
      "end_time": 2410270.0,
      "text": "So the key aspect here is &quot;stability without stagnation.&quot;"
    },
    {
      "index": 1073,
      "start_time": 2410270.0,
      "end_time": 2413420.0,
      "text": "When you&#39;re using Rust, you can-- we&#39;re not done with Rust."
    },
    {
      "index": 1074,
      "start_time": 2413420.0,
      "end_time": 2415870.0,
      "text": "We want to keep adding on new features."
    },
    {
      "index": 1075,
      "start_time": 2415870.0,
      "end_time": 2419090.0,
      "text": "We want to keep adding new standard library APIs"
    },
    {
      "index": 1076,
      "start_time": 2419090.0,
      "end_time": 2420990.0,
      "text": "or new libraries themselves."
    },
    {
      "index": 1077,
      "start_time": 2420990.0,
      "end_time": 2423920.0,
      "text": "So over time, we&#39;re going to be adding these things"
    },
    {
      "index": 1078,
      "start_time": 2423920.0,
      "end_time": 2425980.0,
      "text": "to Rust itself, but while at the same time,"
    },
    {
      "index": 1079,
      "start_time": 2425980.0,
      "end_time": 2428030.0,
      "text": "giving you a very strong stability guarantee."
    },
    {
      "index": 1080,
      "start_time": 2428030.0,
      "end_time": 2430029.0,
      "text": "We&#39;re not going to be breaking code willy-nilly."
    },
    {
      "index": 1081,
      "start_time": 2430030.0,
      "end_time": 2433348.0,
      "text": "We&#39;re not going to break into the language itself."
    },
    {
      "index": 1082,
      "start_time": 2433350.0,
      "end_time": 2435683.0,
      "text": "All right, so some of the high-level conclusions of this"
    },
    {
      "index": 1083,
      "start_time": 2435680.0,
      "end_time": 2438570.0,
      "text": "talk that I want to make sure you walk away with is that Rust"
    },
    {
      "index": 1084,
      "start_time": 2438570.0,
      "end_time": 2443980.0,
      "text": "is combining these high-level features of JavaScript and Ruby"
    },
    {
      "index": 1085,
      "start_time": 2443980.0,
      "end_time": 2445939.0,
      "text": "with the low-level control of C and C++."
    },
    {
      "index": 1086,
      "start_time": 2445940.0,
      "end_time": 2447731.0,
      "text": "So it&#39;s kind of unioning these two together"
    },
    {
      "index": 1087,
      "start_time": 2447730.0,
      "end_time": 2449620.0,
      "text": "with both safety and control."
    },
    {
      "index": 1088,
      "start_time": 2449620.0,
      "end_time": 2453030.0,
      "text": "And Rust can give you very strong safety guarantees"
    },
    {
      "index": 1089,
      "start_time": 2453030.0,
      "end_time": 2455220.0,
      "text": "beyond what a garbage collector can give."
    },
    {
      "index": 1090,
      "start_time": 2455220.0,
      "end_time": 2458640.0,
      "text": "So, for example, we have deterministic destruction."
    },
    {
      "index": 1091,
      "start_time": 2458640.0,
      "end_time": 2460040.0,
      "text": "We forbid all data races."
    },
    {
      "index": 1092,
      "start_time": 2460040.0,
      "end_time": 2461820.0,
      "text": "We forbid iterator invalidation."
    },
    {
      "index": 1093,
      "start_time": 2461820.0,
      "end_time": 2464630.0,
      "text": "All of these happen for free at compile time."
    },
    {
      "index": 1094,
      "start_time": 2464630.0,
      "end_time": 2468290.0,
      "text": "And you can basically program very confidently."
    },
    {
      "index": 1095,
      "start_time": 2468290.0,
      "end_time": 2469624.0,
      "text": "You can have fields concurrency."
    },
    {
      "index": 1096,
      "start_time": 2469620.0,
      "end_time": 2472077.0,
      "text": "You don&#39;t have to worry about these kinds of bugs happening"
    },
    {
      "index": 1097,
      "start_time": 2472080.0,
      "end_time": 2473889.0,
      "text": "in your code because Rust is providing them"
    },
    {
      "index": 1098,
      "start_time": 2473890.0,
      "end_time": 2475190.0,
      "text": "all at compile time."
    },
    {
      "index": 1099,
      "start_time": 2475190.0,
      "end_time": 2475930.0,
      "text": "All right."
    },
    {
      "index": 1100,
      "start_time": 2475930.0,
      "end_time": 2477305.0,
      "text": "And that&#39;s what I have for today."
    },
    {
      "index": 1101,
      "start_time": 2477300.0,
      "end_time": 2480155.0,
      "text": "So thank you for coming, and are there any questions?"
    },
    {
      "index": 1102,
      "start_time": 2480160.0,
      "end_time": 2481122.0,
      "text": "Yes."
    },
    {
      "index": 1103,
      "start_time": 2481120.0,
      "end_time": 2484012.0,
      "text": "[APPLAUSE]"
    },
    {
      "index": 1104,
      "start_time": 2486910.0,
      "end_time": 2489124.0,
      "text": "AUDIENCE: I [INAUDIBLE] for two weeks."
    },
    {
      "index": 1105,
      "start_time": 2489120.0,
      "end_time": 2492700.0,
      "text": "And you advertise it as a systems programming language."
    },
    {
      "index": 1106,
      "start_time": 2492700.0,
      "end_time": 2495410.0,
      "text": "And one problem I&#39;ve had is it must"
    },
    {
      "index": 1107,
      "start_time": 2495410.0,
      "end_time": 2498667.0,
      "text": "be that the standard library assumes allocation"
    },
    {
      "index": 1108,
      "start_time": 2498670.0,
      "end_time": 2501263.0,
      "text": "of the parents, basically."
    },
    {
      "index": 1109,
      "start_time": 2501260.0,
      "end_time": 2504620.0,
      "text": "So are you at all interested in making"
    },
    {
      "index": 1110,
      "start_time": 2504620.0,
      "end_time": 2506960.0,
      "text": "a [INAUDIBLE] standardizing library"
    },
    {
      "index": 1111,
      "start_time": 2506960.0,
      "end_time": 2511930.0,
      "text": "of [INAUDIBLE] and other facilities which"
    },
    {
      "index": 1112,
      "start_time": 2511930.0,
      "end_time": 2513390.0,
      "text": "return allocation values?"
    },
    {
      "index": 1113,
      "start_time": 2513390.0,
      "end_time": 2515822.0,
      "text": "Or you&#39;re simply [INAUDIBLE] how to use this [INAUDIBLE]?"
    },
    {
      "index": 1114,
      "start_time": 2515820.0,
      "end_time": 2518278.0,
      "text": "ALEX CRICHTON: I am very much interested in this, actually."
    },
    {
      "index": 1115,
      "start_time": 2518280.0,
      "end_time": 2520160.0,
      "text": "[? RAIF LEVINE: So ?] could you repeat the question, please?"
    },
    {
      "index": 1116,
      "start_time": 2520160.0,
      "end_time": 2520951.0,
      "text": "ALEX CRICHTON: Yes."
    },
    {
      "index": 1117,
      "start_time": 2520950.0,
      "end_time": 2523519.0,
      "text": "So the question was, we have a standard library today."
    },
    {
      "index": 1118,
      "start_time": 2523520.0,
      "end_time": 2526280.0,
      "text": "We advertise ourselves as a systems programming language,"
    },
    {
      "index": 1119,
      "start_time": 2526280.0,
      "end_time": 2529230.0,
      "text": "but the standard library assumes that allocation succeeds."
    },
    {
      "index": 1120,
      "start_time": 2529230.0,
      "end_time": 2530900.0,
      "text": "It assumes it does not fail, so it&#39;ll"
    },
    {
      "index": 1121,
      "start_time": 2530900.0,
      "end_time": 2532125.0,
      "text": "abort the process if it does."
    },
    {
      "index": 1122,
      "start_time": 2532120.0,
      "end_time": 2533495.0,
      "text": "So he&#39;s wondering whether we have"
    },
    {
      "index": 1123,
      "start_time": 2533500.0,
      "end_time": 2536850.0,
      "text": "any plans to kind of expand this where we can have optional--"
    },
    {
      "index": 1124,
      "start_time": 2536850.0,
      "end_time": 2538725.0,
      "text": "like, we can say whether allocation is failed"
    },
    {
      "index": 1125,
      "start_time": 2538730.0,
      "end_time": 2540385.0,
      "text": "or not by having the actual return value."
    },
    {
      "index": 1126,
      "start_time": 2540380.0,
      "end_time": 2541963.0,
      "text": "And I can decide what to do with that."
    },
    {
      "index": 1127,
      "start_time": 2541960.0,
      "end_time": 2542887.0,
      "text": "And the answer is yes."
    },
    {
      "index": 1128,
      "start_time": 2542890.0,
      "end_time": 2544660.0,
      "text": "I very much want to be able to do this."
    },
    {
      "index": 1129,
      "start_time": 2544660.0,
      "end_time": 2546060.0,
      "text": "So right now, we have this distinction where"
    },
    {
      "index": 1130,
      "start_time": 2546060.0,
      "end_time": 2547422.0,
      "text": "we have the standard library."
    },
    {
      "index": 1131,
      "start_time": 2547420.0,
      "end_time": 2549128.0,
      "text": "And underneath it, we have a whole facade"
    },
    {
      "index": 1132,
      "start_time": 2549130.0,
      "end_time": 2551680.0,
      "text": "of libraries at the core, which is actually libcore."
    },
    {
      "index": 1133,
      "start_time": 2551680.0,
      "end_time": 2553840.0,
      "text": "And libcore is this library which doesn&#39;t actually"
    },
    {
      "index": 1134,
      "start_time": 2553840.0,
      "end_time": 2555010.0,
      "text": "assume allocation at all."
    },
    {
      "index": 1135,
      "start_time": 2555010.0,
      "end_time": 2556250.0,
      "text": "It can&#39;t even allocate."
    },
    {
      "index": 1136,
      "start_time": 2556250.0,
      "end_time": 2558280.0,
      "text": "And then once we eventually hit a point where"
    },
    {
      "index": 1137,
      "start_time": 2558280.0,
      "end_time": 2560250.0,
      "text": "we do assume allocation succeeds,"
    },
    {
      "index": 1138,
      "start_time": 2560250.0,
      "end_time": 2561930.0,
      "text": "we can build more things on top of that."
    },
    {
      "index": 1139,
      "start_time": 2561930.0,
      "end_time": 2563305.0,
      "text": "So this will all start by libcore"
    },
    {
      "index": 1140,
      "start_time": 2563300.0,
      "end_time": 2564715.0,
      "text": "itself will be stabilized."
    },
    {
      "index": 1141,
      "start_time": 2564720.0,
      "end_time": 2568440.0,
      "text": "We want to export that as part of the stable channel of Rust"
    },
    {
      "index": 1142,
      "start_time": 2568440.0,
      "end_time": 2569200.0,
      "text": "itself."
    },
    {
      "index": 1143,
      "start_time": 2569200.0,
      "end_time": 2571560.0,
      "text": "And that will give you access to most of the language,"
    },
    {
      "index": 1144,
      "start_time": 2571560.0,
      "end_time": 2573660.0,
      "text": "not the collections, not the pointers."
    },
    {
      "index": 1145,
      "start_time": 2573660.0,
      "end_time": 2576967.0,
      "text": "And then the story there is a little bit more"
    },
    {
      "index": 1146,
      "start_time": 2576970.0,
      "end_time": 2577803.0,
      "text": "murky in the future."
    },
    {
      "index": 1147,
      "start_time": 2577800.0,
      "end_time": 2581065.0,
      "text": "I very much do want an Arc where the only difference"
    },
    {
      "index": 1148,
      "start_time": 2581060.0,
      "end_time": 2583435.0,
      "text": "is the new method that says whether it failed to allocate"
    },
    {
      "index": 1149,
      "start_time": 2583440.0,
      "end_time": 2584840.0,
      "text": "or not."
    },
    {
      "index": 1150,
      "start_time": 2584840.0,
      "end_time": 2587011.0,
      "text": "We don&#39;t have concrete plans and designs, just how"
    },
    {
      "index": 1151,
      "start_time": 2587010.0,
      "end_time": 2588009.0,
      "text": "to go in that direction."
    },
    {
      "index": 1152,
      "start_time": 2588010.0,
      "end_time": 2591460.0,
      "text": "Because the way to start off is to get the core aspect"
    },
    {
      "index": 1153,
      "start_time": 2591460.0,
      "end_time": 2592100.0,
      "text": "worked out."
    },
    {
      "index": 1154,
      "start_time": 2592100.0,
      "end_time": 2593640.0,
      "text": "But it&#39;s definitely coming, and it&#39;s definitely use case"
    },
    {
      "index": 1155,
      "start_time": 2593640.0,
      "end_time": 2595890.0,
      "text": "that Rust very much wants to fill into."
    },
    {
      "index": 1156,
      "start_time": 2599190.0,
      "end_time": 2599960.0,
      "text": "Yes."
    },
    {
      "index": 1157,
      "start_time": 2599960.0,
      "end_time": 2604010.0,
      "text": "AUDIENCE: So there are a number of other tech systems"
    },
    {
      "index": 1158,
      "start_time": 2604010.0,
      "end_time": 2606400.0,
      "text": "that deal with these type of things,"
    },
    {
      "index": 1159,
      "start_time": 2606400.0,
      "end_time": 2607980.0,
      "text": "like linear and [INAUDIBLE]."
    },
    {
      "index": 1160,
      "start_time": 2607980.0,
      "end_time": 2612254.0,
      "text": "And I was wondering if you could tell us about what"
    },
    {
      "index": 1161,
      "start_time": 2612250.0,
      "end_time": 2615667.0,
      "text": "full programming languages or [INAUDIBLE] systems you looked"
    },
    {
      "index": 1162,
      "start_time": 2615670.0,
      "end_time": 2617357.0,
      "text": "at when shooting this design."
    },
    {
      "index": 1163,
      "start_time": 2617360.0,
      "end_time": 2619519.0,
      "text": "And what you liked, and what you disliked."
    },
    {
      "index": 1164,
      "start_time": 2619520.0,
      "end_time": 2620353.0,
      "text": "ALEX CRICHTON: Yeah."
    },
    {
      "index": 1165,
      "start_time": 2620350.0,
      "end_time": 2623170.0,
      "text": "So the question is, there&#39;s a lot of type systems like Rust"
    },
    {
      "index": 1166,
      "start_time": 2623170.0,
      "end_time": 2624810.0,
      "text": "that&#39;s linear affine type systems"
    },
    {
      "index": 1167,
      "start_time": 2624810.0,
      "end_time": 2626460.0,
      "text": "and what languages and type systems"
    },
    {
      "index": 1168,
      "start_time": 2626460.0,
      "end_time": 2628830.0,
      "text": "we&#39;ve looked at to influence Rust design,"
    },
    {
      "index": 1169,
      "start_time": 2628830.0,
      "end_time": 2630260.0,
      "text": "how it&#39;s come over the years."
    },
    {
      "index": 1170,
      "start_time": 2630260.0,
      "end_time": 2632170.0,
      "text": "And so, like I say, I personally have not"
    },
    {
      "index": 1171,
      "start_time": 2632170.0,
      "end_time": 2635800.0,
      "text": "been that influential in the design of the core type system."
    },
    {
      "index": 1172,
      "start_time": 2635800.0,
      "end_time": 2639000.0,
      "text": "But from what I&#39;ve heard, it&#39;s definitely linear affine types."
    },
    {
      "index": 1173,
      "start_time": 2639000.0,
      "end_time": 2640500.0,
      "text": "There&#39;s lots of papers on that which"
    },
    {
      "index": 1174,
      "start_time": 2640500.0,
      "end_time": 2642410.0,
      "text": "are very influential on Rust itself,"
    },
    {
      "index": 1175,
      "start_time": 2642410.0,
      "end_time": 2644910.0,
      "text": "especially when determining the linearity references"
    },
    {
      "index": 1176,
      "start_time": 2644910.0,
      "end_time": 2646000.0,
      "text": "and things like that."
    },
    {
      "index": 1177,
      "start_time": 2646000.0,
      "end_time": 2648210.0,
      "text": "But I think Cyclone might have been one of the larger"
    },
    {
      "index": 1178,
      "start_time": 2648210.0,
      "end_time": 2649710.0,
      "text": "languages that we&#39;ve drawn from in terms"
    },
    {
      "index": 1179,
      "start_time": 2649710.0,
      "end_time": 2651418.0,
      "text": "of drawing the experience from and seeing"
    },
    {
      "index": 1180,
      "start_time": 2651420.0,
      "end_time": 2652442.0,
      "text": "what&#39;s happened there."
    },
    {
      "index": 1181,
      "start_time": 2652440.0,
      "end_time": 2655870.0,
      "text": "But overall, it&#39;s actually drawn a lot from actual languages"
    },
    {
      "index": 1182,
      "start_time": 2655870.0,
      "end_time": 2658781.0,
      "text": "like C and C++, like going back to our fundamentals of seeing"
    },
    {
      "index": 1183,
      "start_time": 2658780.0,
      "end_time": 2660529.0,
      "text": "what it actually means to have no runtime,"
    },
    {
      "index": 1184,
      "start_time": 2660530.0,
      "end_time": 2662280.0,
      "text": "kind of in that aspect."
    },
    {
      "index": 1185,
      "start_time": 2662280.0,
      "end_time": 2664080.0,
      "text": "So we&#39;ve drawn things from other places."
    },
    {
      "index": 1186,
      "start_time": 2664080.0,
      "end_time": 2666070.0,
      "text": "But those are the big ones that I know of."
    },
    {
      "index": 1187,
      "start_time": 2666070.0,
      "end_time": 2667528.0,
      "text": "And I&#39;d have to refer you to others"
    },
    {
      "index": 1188,
      "start_time": 2667530.0,
      "end_time": 2670202.0,
      "text": "to go into more detail about some of the academic research"
    },
    {
      "index": 1189,
      "start_time": 2670200.0,
      "end_time": 2672990.0,
      "text": "going on there."
    },
    {
      "index": 1190,
      "start_time": 2672990.0,
      "end_time": 2673860.0,
      "text": "Yes."
    },
    {
      "index": 1191,
      "start_time": 2673860.0,
      "end_time": 2676720.0,
      "text": "AUDIENCE: Would you a [INAUDIBLE] what was"
    },
    {
      "index": 1192,
      "start_time": 2676720.0,
      "end_time": 2679680.0,
      "text": "to get about the same as us?"
    },
    {
      "index": 1193,
      "start_time": 2679680.0,
      "end_time": 2680740.0,
      "text": "ALEX CRICHTON: I&#39;m sorry?"
    },
    {
      "index": 1194,
      "start_time": 2680740.0,
      "end_time": 2684260.0,
      "text": "AUDIENCE: [INAUDIBLE] in C++, can you at least take C++"
    },
    {
      "index": 1195,
      "start_time": 2684260.0,
      "end_time": 2688630.0,
      "text": "by compile and changing [INAUDIBLE] to get about"
    },
    {
      "index": 1196,
      "start_time": 2688630.0,
      "end_time": 2691474.0,
      "text": "the same as us when we&#39;re equal in everything else?"
    },
    {
      "index": 1197,
      "start_time": 2691470.0,
      "end_time": 2692886.0,
      "text": "ALEX CRICHTON: So the question is,"
    },
    {
      "index": 1198,
      "start_time": 2692890.0,
      "end_time": 2695360.0,
      "text": "can we bolt safety onto C++?"
    },
    {
      "index": 1199,
      "start_time": 2695360.0,
      "end_time": 2697610.0,
      "text": "Can we tweak the standard library, tweak the compiler?"
    },
    {
      "index": 1200,
      "start_time": 2697610.0,
      "end_time": 2698890.0,
      "text": "Can I get these safety guarantees?"
    },
    {
      "index": 1201,
      "start_time": 2698890.0,
      "end_time": 2700723.0,
      "text": "Maybe check out something on safe primitives"
    },
    {
      "index": 1202,
      "start_time": 2700720.0,
      "end_time": 2702777.0,
      "text": "so we get a safe language."
    },
    {
      "index": 1203,
      "start_time": 2702780.0,
      "end_time": 2708497.0,
      "text": "And the key, I think here is, we&#39;ve seen with C11 and C++ 14,"
    },
    {
      "index": 1204,
      "start_time": 2708500.0,
      "end_time": 2709333.0,
      "text": "these new standards."
    },
    {
      "index": 1205,
      "start_time": 2709330.0,
      "end_time": 2710500.0,
      "text": "They have things like unique pointer."
    },
    {
      "index": 1206,
      "start_time": 2710500.0,
      "end_time": 2711541.0,
      "text": "They have shared pointer."
    },
    {
      "index": 1207,
      "start_time": 2711540.0,
      "end_time": 2712629.0,
      "text": "They have lock guards."
    },
    {
      "index": 1208,
      "start_time": 2712630.0,
      "end_time": 2714249.0,
      "text": "They have all this great new stuff."
    },
    {
      "index": 1209,
      "start_time": 2714250.0,
      "end_time": 2716041.0,
      "text": "But the problem is you can still misuse it."
    },
    {
      "index": 1210,
      "start_time": 2716040.0,
      "end_time": 2718740.0,
      "text": "It&#39;s still very easy to use these standard primitives,"
    },
    {
      "index": 1211,
      "start_time": 2718740.0,
      "end_time": 2720000.0,
      "text": "which are pretty safe."
    },
    {
      "index": 1212,
      "start_time": 2720000.0,
      "end_time": 2721570.0,
      "text": "But you can use them in unsafe ways."
    },
    {
      "index": 1213,
      "start_time": 2721570.0,
      "end_time": 2725021.0,
      "text": "AUDIENCE: Plus they can&#39;t [INAUDIBLE] on the [INAUDIBLE]."
    },
    {
      "index": 1214,
      "start_time": 2725020.0,
      "end_time": 2727778.0,
      "text": "It can break it, and it&#39;s a lot of problems."
    },
    {
      "index": 1215,
      "start_time": 2727780.0,
      "end_time": 2728571.0,
      "text": "ALEX CRICHTON: Yes."
    },
    {
      "index": 1216,
      "start_time": 2728570.0,
      "end_time": 2730760.0,
      "text": "Those things, they have limits of backwards compatibility."
    },
    {
      "index": 1217,
      "start_time": 2730760.0,
      "end_time": 2732620.0,
      "text": "And if we could break it, we could actually"
    },
    {
      "index": 1218,
      "start_time": 2732620.0,
      "end_time": 2733920.0,
      "text": "fix a lot of things."
    },
    {
      "index": 1219,
      "start_time": 2733920.0,
      "end_time": 2736310.0,
      "text": "And it&#39;s kind of an expense at some point."
    },
    {
      "index": 1220,
      "start_time": 2736310.0,
      "end_time": 2739180.0,
      "text": "So if you&#39;re moving C++ in a direction where"
    },
    {
      "index": 1221,
      "start_time": 2739180.0,
      "end_time": 2741120.0,
      "text": "you&#39;re stripping away all the unsafe features,"
    },
    {
      "index": 1222,
      "start_time": 2741120.0,
      "end_time": 2742670.0,
      "text": "stripping away all the stuff."
    },
    {
      "index": 1223,
      "start_time": 2742670.0,
      "end_time": 2744780.0,
      "text": "Than at what point do you actually"
    },
    {
      "index": 1224,
      "start_time": 2744780.0,
      "end_time": 2746570.0,
      "text": "create a new dialect of language?"
    },
    {
      "index": 1225,
      "start_time": 2746570.0,
      "end_time": 2749170.0,
      "text": "And from what I&#39;ve seen in C++ and Rust,"
    },
    {
      "index": 1226,
      "start_time": 2749170.0,
      "end_time": 2752450.0,
      "text": "is the move semantics are very radically different in Rust"
    },
    {
      "index": 1227,
      "start_time": 2752450.0,
      "end_time": 2754380.0,
      "text": "as they are in C++."
    },
    {
      "index": 1228,
      "start_time": 2754380.0,
      "end_time": 2755730.0,
      "text": "There&#39;s no move constructors."
    },
    {
      "index": 1229,
      "start_time": 2755730.0,
      "end_time": 2756760.0,
      "text": "There&#39;s no copy constructors."
    },
    {
      "index": 1230,
      "start_time": 2756760.0,
      "end_time": 2758385.0,
      "text": "There&#39;s no extra stuff happening there."
    },
    {
      "index": 1231,
      "start_time": 2758390.0,
      "end_time": 2760305.0,
      "text": "And the other major thing is references."
    },
    {
      "index": 1232,
      "start_time": 2760300.0,
      "end_time": 2762550.0,
      "text": "Dealing with lifetimes, I think, is just something you"
    },
    {
      "index": 1233,
      "start_time": 2762550.0,
      "end_time": 2765550.0,
      "text": "fundamentally cannot bolt onto C++ and still have the same"
    },
    {
      "index": 1234,
      "start_time": 2765550.0,
      "end_time": 2766274.0,
      "text": "language."
    },
    {
      "index": 1235,
      "start_time": 2766270.0,
      "end_time": 2767686.0,
      "text": "And those are very unique to Rust."
    },
    {
      "index": 1236,
      "start_time": 2767690.0,
      "end_time": 2770420.0,
      "text": "And there&#39;s the underpinnings of the safety itself."
    },
    {
      "index": 1237,
      "start_time": 2770420.0,
      "end_time": 2773490.0,
      "text": "So those two aspects tied together, I feel,"
    },
    {
      "index": 1238,
      "start_time": 2773490.0,
      "end_time": 2774890.0,
      "text": "we could add them to C++."
    },
    {
      "index": 1239,
      "start_time": 2774890.0,
      "end_time": 2777236.0,
      "text": "We can kind of tweak C++ and break it in various ways."
    },
    {
      "index": 1240,
      "start_time": 2777240.0,
      "end_time": 2778864.0,
      "text": "But at some point, you really have just"
    },
    {
      "index": 1241,
      "start_time": 2778860.0,
      "end_time": 2780401.0,
      "text": "created a new language at that point."
    },
    {
      "index": 1242,
      "start_time": 2780400.0,
      "end_time": 2782849.0,
      "text": "But definitely today, in terms of backwards compatibility,"
    },
    {
      "index": 1243,
      "start_time": 2782850.0,
      "end_time": 2785225.0,
      "text": "there&#39;s just no way that we could actually bolt on safety"
    },
    {
      "index": 1244,
      "start_time": 2785230.0,
      "end_time": 2786045.0,
      "text": "to C++."
    },
    {
      "index": 1245,
      "start_time": 2786040.0,
      "end_time": 2788020.0,
      "text": "You can have all the static analysis you want."
    },
    {
      "index": 1246,
      "start_time": 2788020.0,
      "end_time": 2790070.0,
      "text": "We&#39;ve actually talked to tons and tons of people"
    },
    {
      "index": 1247,
      "start_time": 2790070.0,
      "end_time": 2792250.0,
      "text": "in various aspects of industry."
    },
    {
      "index": 1248,
      "start_time": 2792250.0,
      "end_time": 2794580.0,
      "text": "They all have huge amounts of static analysis."
    },
    {
      "index": 1249,
      "start_time": 2794580.0,
      "end_time": 2796570.0,
      "text": "But everything falls down at some point."
    },
    {
      "index": 1250,
      "start_time": 2796570.0,
      "end_time": 2798970.0,
      "text": "It catches 90%, 95% of bugs."
    },
    {
      "index": 1251,
      "start_time": 2798970.0,
      "end_time": 2800552.0,
      "text": "But that 5% leaking through is still"
    },
    {
      "index": 1252,
      "start_time": 2800550.0,
      "end_time": 2802883.0,
      "text": "going to have memory unsafety, security vulnerabilities,"
    },
    {
      "index": 1253,
      "start_time": 2802890.0,
      "end_time": 2803905.0,
      "text": "and all that good stuff."
    },
    {
      "index": 1254,
      "start_time": 2807730.0,
      "end_time": 2808229.0,
      "text": "Yes."
    },
    {
      "index": 1255,
      "start_time": 2808230.0,
      "end_time": 2809146.0,
      "text": "AUDIENCE: [INAUDIBLE]?"
    },
    {
      "index": 1256,
      "start_time": 2824580.0,
      "end_time": 2825413.0,
      "text": "ALEX CRICHTON: Yeah."
    },
    {
      "index": 1257,
      "start_time": 2825410.0,
      "end_time": 2827630.0,
      "text": "So the question is, one of the great things about an existing"
    },
    {
      "index": 1258,
      "start_time": 2827630.0,
      "end_time": 2829330.0,
      "text": "language is we already have tons of libraries."
    },
    {
      "index": 1259,
      "start_time": 2829330.0,
      "end_time": 2832080.0,
      "text": "We have decades of code, decades of experience writing all this."
    },
    {
      "index": 1260,
      "start_time": 2832080.0,
      "end_time": 2833538.0,
      "text": "So how&#39;s Rust going to do all this?"
    },
    {
      "index": 1261,
      "start_time": 2833540.0,
      "end_time": 2835842.0,
      "text": "How&#39;s Rust going to get these libraries&#39; bootstraps,"
    },
    {
      "index": 1262,
      "start_time": 2835840.0,
      "end_time": 2838160.0,
      "text": "get this up and running, how&#39;s the community running?"
    },
    {
      "index": 1263,
      "start_time": 2838160.0,
      "end_time": 2839620.0,
      "text": "So what I would say to that is this"
    },
    {
      "index": 1264,
      "start_time": 2839620.0,
      "end_time": 2842890.0,
      "text": "is where crates.io has been absolutely critical to having"
    },
    {
      "index": 1265,
      "start_time": 2842890.0,
      "end_time": 2844950.0,
      "text": "it there for Rust 1.0."
    },
    {
      "index": 1266,
      "start_time": 2844950.0,
      "end_time": 2847960.0,
      "text": "With crates.io, it&#39;s incredibly easy to share libraries,"
    },
    {
      "index": 1267,
      "start_time": 2847960.0,
      "end_time": 2849030.0,
      "text": "to share our code."
    },
    {
      "index": 1268,
      "start_time": 2849030.0,
      "end_time": 2851730.0,
      "text": "We reduced the barrier entry to writing this code,"
    },
    {
      "index": 1269,
      "start_time": 2851730.0,
      "end_time": 2854790.0,
      "text": "and publishing it, and getting everyone&#39;s access to it, so"
    },
    {
      "index": 1270,
      "start_time": 2854790.0,
      "end_time": 2856330.0,
      "text": "a very, very small amount."
    },
    {
      "index": 1271,
      "start_time": 2856330.0,
      "end_time": 2859484.0,
      "text": "And this is coupled with there are not many other systems"
    },
    {
      "index": 1272,
      "start_time": 2859480.0,
      "end_time": 2861896.0,
      "text": "languages-- I mean, you would never find a package manager"
    },
    {
      "index": 1273,
      "start_time": 2861900.0,
      "end_time": 2865190.0,
      "text": "for C and C++, like to actually build the C and C++ itself."
    },
    {
      "index": 1274,
      "start_time": 2865190.0,
      "end_time": 2867810.0,
      "text": "It was just uniform across all projects."
    },
    {
      "index": 1275,
      "start_time": 2867810.0,
      "end_time": 2869890.0,
      "text": "So Cargo has been also absolutely instrumental"
    },
    {
      "index": 1276,
      "start_time": 2869890.0,
      "end_time": 2872350.0,
      "text": "here in terms of making it very easy to depend"
    },
    {
      "index": 1277,
      "start_time": 2872350.0,
      "end_time": 2873350.0,
      "text": "on everyone else&#39;s code."
    },
    {
      "index": 1278,
      "start_time": 2873350.0,
      "end_time": 2876630.0,
      "text": "So it&#39;s kind of reducing friction as much as possible"
    },
    {
      "index": 1279,
      "start_time": 2876630.0,
      "end_time": 2878320.0,
      "text": "and making it easy to jump in there."
    },
    {
      "index": 1280,
      "start_time": 2878320.0,
      "end_time": 2880550.0,
      "text": "So we ourselves are trying to lead"
    },
    {
      "index": 1281,
      "start_time": 2880550.0,
      "end_time": 2882860.0,
      "text": "the-- we&#39;ve led the way in terms of stabilization"
    },
    {
      "index": 1282,
      "start_time": 2882860.0,
      "end_time": 2883860.0,
      "text": "of the standard library."
    },
    {
      "index": 1283,
      "start_time": 2883860.0,
      "end_time": 2886160.0,
      "text": "We have set some common idioms for the language,"
    },
    {
      "index": 1284,
      "start_time": 2886160.0,
      "end_time": 2888070.0,
      "text": "some common interfaces."
    },
    {
      "index": 1285,
      "start_time": 2888070.0,
      "end_time": 2890250.0,
      "text": "But the libraries themselves, we unfortunately"
    },
    {
      "index": 1286,
      "start_time": 2890250.0,
      "end_time": 2891890.0,
      "text": "don&#39;t have the manpower to invest"
    },
    {
      "index": 1287,
      "start_time": 2891890.0,
      "end_time": 2895990.0,
      "text": "in these very, very high quality, very large libraries"
    },
    {
      "index": 1288,
      "start_time": 2895990.0,
      "end_time": 2897150.0,
      "text": "that one might expect."
    },
    {
      "index": 1289,
      "start_time": 2897150.0,
      "end_time": 2899667.0,
      "text": "So we have implementations in existence today,"
    },
    {
      "index": 1290,
      "start_time": 2899670.0,
      "end_time": 2901003.0,
      "text": "but they&#39;re kind of in progress."
    },
    {
      "index": 1291,
      "start_time": 2901000.0,
      "end_time": 2902260.0,
      "text": "They&#39;re works in progress."
    },
    {
      "index": 1292,
      "start_time": 2902260.0,
      "end_time": 2903720.0,
      "text": "They&#39;re all kind of an open source."
    },
    {
      "index": 1293,
      "start_time": 2903720.0,
      "end_time": 2905280.0,
      "text": "So it&#39;s definitely a downside."
    },
    {
      "index": 1294,
      "start_time": 2905280.0,
      "end_time": 2908520.0,
      "text": "This is something that will take time to flush out these common"
    },
    {
      "index": 1295,
      "start_time": 2908520.0,
      "end_time": 2911580.0,
      "text": "libraries you would expect in C and C++ in Rust itself."
    },
    {
      "index": 1296,
      "start_time": 2911580.0,
      "end_time": 2916340.0,
      "text": "But a lot of large ones are either very much underway,"
    },
    {
      "index": 1297,
      "start_time": 2916340.0,
      "end_time": 2918670.0,
      "text": "feature complete, or they&#39;re on their way coming."
    },
    {
      "index": 1298,
      "start_time": 2918670.0,
      "end_time": 2922030.0,
      "text": "That answers your question?"
    },
    {
      "index": 1299,
      "start_time": 2922030.0,
      "end_time": 2922570.0,
      "text": "Yes."
    },
    {
      "index": 1300,
      "start_time": 2922570.0,
      "end_time": 2923945.0,
      "text": "AUDIENCE: So I&#39;ll keep continuing"
    },
    {
      "index": 1301,
      "start_time": 2923950.0,
      "end_time": 2925255.0,
      "text": "on that line of thought."
    },
    {
      "index": 1302,
      "start_time": 2925250.0,
      "end_time": 2929660.0,
      "text": "I know Servo has been felt throughout the closest thing"
    },
    {
      "index": 1303,
      "start_time": 2929660.0,
      "end_time": 2930360.0,
      "text": "to Rust."
    },
    {
      "index": 1304,
      "start_time": 2930360.0,
      "end_time": 2933431.0,
      "text": "And so, my question is really about how big"
    },
    {
      "index": 1305,
      "start_time": 2933430.0,
      "end_time": 2934783.0,
      "text": "you intend to [INAUDIBLE]."
    },
    {
      "index": 1306,
      "start_time": 2934780.0,
      "end_time": 2937464.0,
      "text": "So in a project like Chromium, or I&#39;m"
    },
    {
      "index": 1307,
      "start_time": 2937470.0,
      "end_time": 2941193.0,
      "text": "sure Mozilla lets you have-- there&#39;s like base, which"
    },
    {
      "index": 1308,
      "start_time": 2941190.0,
      "end_time": 2943009.0,
      "text": "has a lot of these Chromium abstractions,"
    },
    {
      "index": 1309,
      "start_time": 2943010.0,
      "end_time": 2944600.0,
      "text": "really standard library type stuff"
    },
    {
      "index": 1310,
      "start_time": 2944600.0,
      "end_time": 2949095.0,
      "text": "that a really big part of my web browser needs to use."
    },
    {
      "index": 1311,
      "start_time": 2949090.0,
      "end_time": 2952335.0,
      "text": "So does Servo define the sorts of abstractions for itself."
    },
    {
      "index": 1312,
      "start_time": 2952340.0,
      "end_time": 2955049.0,
      "text": "Or do you intend the standard library for Rust"
    },
    {
      "index": 1313,
      "start_time": 2955050.0,
      "end_time": 2956591.0,
      "text": "to be the standard library for Servo?"
    },
    {
      "index": 1314,
      "start_time": 2956590.0,
      "end_time": 2958737.0,
      "text": "Or what&#39;s the story there?"
    },
    {
      "index": 1315,
      "start_time": 2958740.0,
      "end_time": 2959573.0,
      "text": "ALEX CRICHTON: Yeah."
    },
    {
      "index": 1316,
      "start_time": 2959570.0,
      "end_time": 2962300.0,
      "text": "So the question is, where do we see the standard library going?"
    },
    {
      "index": 1317,
      "start_time": 2962300.0,
      "end_time": 2963780.0,
      "text": "Is it going to be a very large standard library"
    },
    {
      "index": 1318,
      "start_time": 2963780.0,
      "end_time": 2964990.0,
      "text": "with tons and tons of things?"
    },
    {
      "index": 1319,
      "start_time": 2964990.0,
      "end_time": 2967073.0,
      "text": "For example, it&#39;s very heavily influenced by Servo"
    },
    {
      "index": 1320,
      "start_time": 2967070.0,
      "end_time": 2969017.0,
      "text": "in terms of their needs, and how those two are"
    },
    {
      "index": 1321,
      "start_time": 2969020.0,
      "end_time": 2970520.0,
      "text": "going to play out, and whether Servo"
    },
    {
      "index": 1322,
      "start_time": 2970520.0,
      "end_time": 2971760.0,
      "text": "has its own standard library."
    },
    {
      "index": 1323,
      "start_time": 2971760.0,
      "end_time": 2974770.0,
      "text": "So the approach we have taken with the standard library today"
    },
    {
      "index": 1324,
      "start_time": 2974770.0,
      "end_time": 2975900.0,
      "text": "is fairly conservative."
    },
    {
      "index": 1325,
      "start_time": 2975900.0,
      "end_time": 2977690.0,
      "text": "So it&#39;s not a very large standard library."
    },
    {
      "index": 1326,
      "start_time": 2977690.0,
      "end_time": 2979773.0,
      "text": "I would not use the adjective &quot;batteries included&quot;"
    },
    {
      "index": 1327,
      "start_time": 2979770.0,
      "end_time": 2980537.0,
      "text": "to describe it."
    },
    {
      "index": 1328,
      "start_time": 2980540.0,
      "end_time": 2982216.0,
      "text": "And the reason for this is, having"
    },
    {
      "index": 1329,
      "start_time": 2982220.0,
      "end_time": 2984094.0,
      "text": "gone through the whole stabilization process,"
    },
    {
      "index": 1330,
      "start_time": 2984090.0,
      "end_time": 2987169.0,
      "text": "there just wasn&#39;t enough that we felt comfortable stabilizing."
    },
    {
      "index": 1331,
      "start_time": 2987170.0,
      "end_time": 2988211.0,
      "text": "Did I do something wrong?"
    },
    {
      "index": 1332,
      "start_time": 2988210.0,
      "end_time": 2989902.0,
      "text": "[? RAIF LEVINE: Yeah, ?] the slides aren&#39;t projecting,"
    },
    {
      "index": 1333,
      "start_time": 2989900.0,
      "end_time": 2990748.0,
      "text": "but I think that&#39;s OK."
    },
    {
      "index": 1334,
      "start_time": 2990750.0,
      "end_time": 2991500.0,
      "text": "ALEX CRICHTON: OK."
    },
    {
      "index": 1335,
      "start_time": 2994340.0,
      "end_time": 2997340.0,
      "text": "So Servo has, at this point, like 150 crates"
    },
    {
      "index": 1336,
      "start_time": 2997340.0,
      "end_time": 2999710.0,
      "text": "that it&#39;s depending on, 150 various libraries that"
    },
    {
      "index": 1337,
      "start_time": 2999710.0,
      "end_time": 3000990.0,
      "text": "are being built through Cargo."
    },
    {
      "index": 1338,
      "start_time": 3000990.0,
      "end_time": 3003260.0,
      "text": "So they&#39;re taking the same aspect of they&#39;re"
    },
    {
      "index": 1339,
      "start_time": 3003260.0,
      "end_time": 3006086.0,
      "text": "probably not going to create one monolithic standard library,"
    },
    {
      "index": 1340,
      "start_time": 3006090.0,
      "end_time": 3008464.0,
      "text": "but rather have lots of little components here and there."
    },
    {
      "index": 1341,
      "start_time": 3008460.0,
      "end_time": 3010340.0,
      "text": "So the role of the Rust standard library"
    },
    {
      "index": 1342,
      "start_time": 3010340.0,
      "end_time": 3012880.0,
      "text": "is going to be to define the common interface"
    },
    {
      "index": 1343,
      "start_time": 3012880.0,
      "end_time": 3015780.0,
      "text": "for the entire language, so iterators, vectors,"
    },
    {
      "index": 1344,
      "start_time": 3015780.0,
      "end_time": 3018660.0,
      "text": "hash maps, the option type, the result type."
    },
    {
      "index": 1345,
      "start_time": 3018660.0,
      "end_time": 3020275.0,
      "text": "These common abstractions you see"
    },
    {
      "index": 1346,
      "start_time": 3020270.0,
      "end_time": 3023305.0,
      "text": "in basically 99% of Rust code all over the place, that"
    },
    {
      "index": 1347,
      "start_time": 3023310.0,
      "end_time": 3024800.0,
      "text": "belongs in the standard library."
    },
    {
      "index": 1348,
      "start_time": 3024800.0,
      "end_time": 3026320.0,
      "text": "Once you start getting above that,"
    },
    {
      "index": 1349,
      "start_time": 3026320.0,
      "end_time": 3029350.0,
      "text": "like some various futures or various weird concurrency"
    },
    {
      "index": 1350,
      "start_time": 3029350.0,
      "end_time": 3031830.0,
      "text": "primitives, those might be outside the standard library,"
    },
    {
      "index": 1351,
      "start_time": 3031830.0,
      "end_time": 3033240.0,
      "text": "but in their standalone creates."
    },
    {
      "index": 1352,
      "start_time": 3033240.0,
      "end_time": 3035430.0,
      "text": "But we still officially support them."
    },
    {
      "index": 1353,
      "start_time": 3035430.0,
      "end_time": 3037240.0,
      "text": "So I suspect the trajectory over time"
    },
    {
      "index": 1354,
      "start_time": 3037240.0,
      "end_time": 3040030.0,
      "text": "is to stay with a relatively conservative standard library,"
    },
    {
      "index": 1355,
      "start_time": 3040030.0,
      "end_time": 3043194.0,
      "text": "but a very diverse set of crates that are very small"
    },
    {
      "index": 1356,
      "start_time": 3043190.0,
      "end_time": 3045106.0,
      "text": "that just build on top of the standard library"
    },
    {
      "index": 1357,
      "start_time": 3045110.0,
      "end_time": 3046234.0,
      "text": "and kind of work like that."
    },
    {
      "index": 1358,
      "start_time": 3048990.0,
      "end_time": 3049836.0,
      "text": "Yes."
    },
    {
      "index": 1359,
      "start_time": 3049840.0,
      "end_time": 3051256.0,
      "text": "AUDIENCE: So my question basically"
    },
    {
      "index": 1360,
      "start_time": 3051250.0,
      "end_time": 3055108.0,
      "text": "is, all the codes I work on are kind of unique in a way"
    },
    {
      "index": 1361,
      "start_time": 3055110.0,
      "end_time": 3057580.0,
      "text": "that they&#39;re not many that are interested in, right?"
    },
    {
      "index": 1362,
      "start_time": 3057580.0,
      "end_time": 3061580.0,
      "text": "I mean, but there&#39;s this core library in C++ usually that"
    },
    {
      "index": 1363,
      "start_time": 3061580.0,
      "end_time": 3063190.0,
      "text": "everybody&#39;s using."
    },
    {
      "index": 1364,
      "start_time": 3063190.0,
      "end_time": 3067340.0,
      "text": "And my question is then how are you doing things around each--"
    },
    {
      "index": 1365,
      "start_time": 3067340.0,
      "end_time": 3069322.0,
      "text": "basically, our language is wrapping stuff."
    },
    {
      "index": 1366,
      "start_time": 3069320.0,
      "end_time": 3072013.0,
      "text": "And how will you handle basic safety in such a department?"
    },
    {
      "index": 1367,
      "start_time": 3072010.0,
      "end_time": 3073385.0,
      "text": "ALEX CRICHTON: So the question is"
    },
    {
      "index": 1368,
      "start_time": 3073390.0,
      "end_time": 3075290.0,
      "text": "about how Rust interacts with other languages"
    },
    {
      "index": 1369,
      "start_time": 3075290.0,
      "end_time": 3078040.0,
      "text": "and how we deal with the safety around that in terms of talking"
    },
    {
      "index": 1370,
      "start_time": 3078040.0,
      "end_time": 3079520.0,
      "text": "to big projects elsewhere."
    },
    {
      "index": 1371,
      "start_time": 3079520.0,
      "end_time": 3081350.0,
      "text": "So this is a very important aspect of Rust."
    },
    {
      "index": 1372,
      "start_time": 3081350.0,
      "end_time": 3083424.0,
      "text": "We know that the world is not going to be"
    },
    {
      "index": 1373,
      "start_time": 3083420.0,
      "end_time": 3084586.0,
      "text": "rewritten in Rust overnight."
    },
    {
      "index": 1374,
      "start_time": 3084590.0,
      "end_time": 3086670.0,
      "text": "We&#39;ve got to deal with existing libraries."
    },
    {
      "index": 1375,
      "start_time": 3086670.0,
      "end_time": 3088930.0,
      "text": "So Rust has the FFI boundary of Rust,"
    },
    {
      "index": 1376,
      "start_time": 3088930.0,
      "end_time": 3091180.0,
      "text": "allows you to just kind of call on external languages."
    },
    {
      "index": 1377,
      "start_time": 3091180.0,
      "end_time": 3092180.0,
      "text": "It&#39;s just a call instruction."
    },
    {
      "index": 1378,
      "start_time": 3092180.0,
      "end_time": 3093450.0,
      "text": "There&#39;s no overhead from this."
    },
    {
      "index": 1379,
      "start_time": 3093450.0,
      "end_time": 3095930.0,
      "text": "It&#39;s exactly what you&#39;d expect from C. So an example,"
    },
    {
      "index": 1380,
      "start_time": 3095930.0,
      "end_time": 3099800.0,
      "text": "this is Cargo, the package manager, uses libgit2,"
    },
    {
      "index": 1381,
      "start_time": 3099800.0,
      "end_time": 3102700.0,
      "text": "which is a library written in C for managing Git repositories."
    },
    {
      "index": 1382,
      "start_time": 3102700.0,
      "end_time": 3104330.0,
      "text": "And we just call straight out to that."
    },
    {
      "index": 1383,
      "start_time": 3104330.0,
      "end_time": 3107490.0,
      "text": "And then to maintain the safety of Rust"
    },
    {
      "index": 1384,
      "start_time": 3107490.0,
      "end_time": 3111180.0,
      "text": "itself is where ownership, and borrowing, and lifetimes come"
    },
    {
      "index": 1385,
      "start_time": 3111180.0,
      "end_time": 3112000.0,
      "text": "into play."
    },
    {
      "index": 1386,
      "start_time": 3112000.0,
      "end_time": 3114970.0,
      "text": "So that&#39;s where you can create a safe abstraction around calling"
    },
    {
      "index": 1387,
      "start_time": 3114970.0,
      "end_time": 3116330.0,
      "text": "these unsafe libraries."
    },
    {
      "index": 1388,
      "start_time": 3116330.0,
      "end_time": 3120301.0,
      "text": "So the C APIs typically have a method of saying,"
    },
    {
      "index": 1389,
      "start_time": 3120300.0,
      "end_time": 3121799.0,
      "text": "here&#39;s when you create the resource."
    },
    {
      "index": 1390,
      "start_time": 3121800.0,
      "end_time": 3123880.0,
      "text": "And then you deallocate it when it goes out of scope."
    },
    {
      "index": 1391,
      "start_time": 3123880.0,
      "end_time": 3125470.0,
      "text": "So for example, the destructor for that type,"
    },
    {
      "index": 1392,
      "start_time": 3125470.0,
      "end_time": 3126580.0,
      "text": "we call the free function."
    },
    {
      "index": 1393,
      "start_time": 3126580.0,
      "end_time": 3128720.0,
      "text": "And then when you access an internal value,"
    },
    {
      "index": 1394,
      "start_time": 3128720.0,
      "end_time": 3131550.0,
      "text": "you know you have the ability to tie the lifetimes together."
    },
    {
      "index": 1395,
      "start_time": 3131550.0,
      "end_time": 3133807.0,
      "text": "So in return to them, it says, this is only valid"
    },
    {
      "index": 1396,
      "start_time": 3133810.0,
      "end_time": 3134893.0,
      "text": "while the struct is valid."
    },
    {
      "index": 1397,
      "start_time": 3134890.0,
      "end_time": 3137810.0,
      "text": "So you can construct-- you can add, basically,"
    },
    {
      "index": 1398,
      "start_time": 3137810.0,
      "end_time": 3140860.0,
      "text": "the Rust type system on top of an existing C API."
    },
    {
      "index": 1399,
      "start_time": 3140860.0,
      "end_time": 3143377.0,
      "text": "So you can kind of use these static guarantees of Rust,"
    },
    {
      "index": 1400,
      "start_time": 3143380.0,
      "end_time": 3145213.0,
      "text": "this ownership/borrowing, mutable references"
    },
    {
      "index": 1401,
      "start_time": 3145210.0,
      "end_time": 3148510.0,
      "text": "being unique, all that good stuff to maintain the safety."
    },
    {
      "index": 1402,
      "start_time": 3148510.0,
      "end_time": 3150900.0,
      "text": "You have to be the one that actually creates that API"
    },
    {
      "index": 1403,
      "start_time": 3150900.0,
      "end_time": 3153005.0,
      "text": "and creates the safe interface to it."
    },
    {
      "index": 1404,
      "start_time": 3153000.0,
      "end_time": 3154755.0,
      "text": "Does that answer your question?"
    },
    {
      "index": 1405,
      "start_time": 3154760.0,
      "end_time": 3156962.0,
      "text": "Yes."
    },
    {
      "index": 1406,
      "start_time": 3156960.0,
      "end_time": 3160428.0,
      "text": "AUDIENCE: How do you manage quality and safety"
    },
    {
      "index": 1407,
      "start_time": 3160430.0,
      "end_time": 3162984.0,
      "text": "of the crates that are posted on [INAUDIBLE]?"
    },
    {
      "index": 1408,
      "start_time": 3162980.0,
      "end_time": 3164396.0,
      "text": "ALEX CRICHTON: So the question is,"
    },
    {
      "index": 1409,
      "start_time": 3164400.0,
      "end_time": 3166410.0,
      "text": "how do I manage the quality and the safety of the creates"
    },
    {
      "index": 1410,
      "start_time": 3166410.0,
      "end_time": 3166970.0,
      "text": "in the crates.io?"
    },
    {
      "index": 1411,
      "start_time": 3166970.0,
      "end_time": 3169011.0,
      "text": "And this is actually a very interesting question."
    },
    {
      "index": 1412,
      "start_time": 3169010.0,
      "end_time": 3172009.0,
      "text": "So the quality itself, we have a small set of crates"
    },
    {
      "index": 1413,
      "start_time": 3172010.0,
      "end_time": 3173030.0,
      "text": "that we curate."
    },
    {
      "index": 1414,
      "start_time": 3173030.0,
      "end_time": 3175740.0,
      "text": "They&#39;re hosted in the Rust lang organization itself."
    },
    {
      "index": 1415,
      "start_time": 3175740.0,
      "end_time": 3178740.0,
      "text": "So I would not describe them all as incredibly high quality."
    },
    {
      "index": 1416,
      "start_time": 3178740.0,
      "end_time": 3179770.0,
      "text": "But we maintain them."
    },
    {
      "index": 1417,
      "start_time": 3179770.0,
      "end_time": 3180480.0,
      "text": "We fix bugs."
    },
    {
      "index": 1418,
      "start_time": 3180480.0,
      "end_time": 3181160.0,
      "text": "We push updates."
    },
    {
      "index": 1419,
      "start_time": 3181160.0,
      "end_time": 3183201.0,
      "text": "We have a lot of continuous integration for them."
    },
    {
      "index": 1420,
      "start_time": 3183200.0,
      "end_time": 3184969.0,
      "text": "But in general, you don&#39;t actually"
    },
    {
      "index": 1421,
      "start_time": 3184970.0,
      "end_time": 3186679.0,
      "text": "have this kind of guarantee of quality."
    },
    {
      "index": 1422,
      "start_time": 3186680.0,
      "end_time": 3188221.0,
      "text": "You don&#39;t know the tests are running."
    },
    {
      "index": 1423,
      "start_time": 3188220.0,
      "end_time": 3189850.0,
      "text": "You don&#39;t know that it works on your platforms."
    },
    {
      "index": 1424,
      "start_time": 3189850.0,
      "end_time": 3190830.0,
      "text": "And this is stuff that we would like"
    },
    {
      "index": 1425,
      "start_time": 3190830.0,
      "end_time": 3192470.0,
      "text": "to expand to in the future."
    },
    {
      "index": 1426,
      "start_time": 3192470.0,
      "end_time": 3194620.0,
      "text": "But it&#39;s not something that we&#39;re actively pursuing"
    },
    {
      "index": 1427,
      "start_time": 3194620.0,
      "end_time": 3195520.0,
      "text": "[INAUDIBLE]."
    },
    {
      "index": 1428,
      "start_time": 3195520.0,
      "end_time": 3197070.0,
      "text": "We&#39;re not going to give C [INAUDIBLE] the whole Rust"
    },
    {
      "index": 1429,
      "start_time": 3197070.0,
      "end_time": 3197570.0,
      "text": "community."
    },
    {
      "index": 1430,
      "start_time": 3197570.0,
      "end_time": 3199960.0,
      "text": "We&#39;ll very, very strongly encourage it, use Travis,"
    },
    {
      "index": 1431,
      "start_time": 3199960.0,
      "end_time": 3202520.0,
      "text": "or use AppVeyor, or whatever open source solution you want."
    },
    {
      "index": 1432,
      "start_time": 3202520.0,
      "end_time": 3206800.0,
      "text": "But you don&#39;t have the stronger NT coming in."
    },
    {
      "index": 1433,
      "start_time": 3206800.0,
      "end_time": 3208350.0,
      "text": "You have to be able to Google around"
    },
    {
      "index": 1434,
      "start_time": 3208350.0,
      "end_time": 3209550.0,
      "text": "the libraries ahead of time."
    },
    {
      "index": 1435,
      "start_time": 3209550.0,
      "end_time": 3211770.0,
      "text": "And it&#39;s the same thing with safety."
    },
    {
      "index": 1436,
      "start_time": 3211770.0,
      "end_time": 3213950.0,
      "text": "There&#39;s not exactly a badge on crates.io that says,"
    },
    {
      "index": 1437,
      "start_time": 3213950.0,
      "end_time": 3215204.0,
      "text": "this crate has unsafe."
    },
    {
      "index": 1438,
      "start_time": 3215200.0,
      "end_time": 3216366.0,
      "text": "You can&#39;t use a [INAUDIBLE]."
    },
    {
      "index": 1439,
      "start_time": 3216370.0,
      "end_time": 3219570.0,
      "text": "If you use it, you might have unsafe code."
    },
    {
      "index": 1440,
      "start_time": 3219570.0,
      "end_time": 3221910.0,
      "text": "So the community is very active in terms of these kind"
    },
    {
      "index": 1441,
      "start_time": 3221910.0,
      "end_time": 3223214.0,
      "text": "of high profile libraries."
    },
    {
      "index": 1442,
      "start_time": 3223210.0,
      "end_time": 3225126.0,
      "text": "If there&#39;s unsafe code inside, and it actually"
    },
    {
      "index": 1443,
      "start_time": 3225130.0,
      "end_time": 3227680.0,
      "text": "is legitimately unsafe, then bug reports will be opened."
    },
    {
      "index": 1444,
      "start_time": 3227680.0,
      "end_time": 3229470.0,
      "text": "And it&#39;ll be fixed very quickly."
    },
    {
      "index": 1445,
      "start_time": 3229470.0,
      "end_time": 3232460.0,
      "text": "But overall, we don&#39;t actively curate"
    },
    {
      "index": 1446,
      "start_time": 3232460.0,
      "end_time": 3234990.0,
      "text": "crates in terms of auditing them for security,"
    },
    {
      "index": 1447,
      "start_time": 3234990.0,
      "end_time": 3237530.0,
      "text": "or auditing them for quality, or anything like that."
    },
    {
      "index": 1448,
      "start_time": 3237530.0,
      "end_time": 3238297.0,
      "text": "Yeah."
    },
    {
      "index": 1449,
      "start_time": 3238300.0,
      "end_time": 3239925.0,
      "text": "AUDIENCE: What about other [INAUDIBLE]?"
    },
    {
      "index": 1450,
      "start_time": 3242690.0,
      "end_time": 3245655.0,
      "text": "What if the person who was maintaining some crate"
    },
    {
      "index": 1451,
      "start_time": 3245650.0,
      "end_time": 3247597.0,
      "text": "that everybody needs gets hit by a bus?"
    },
    {
      "index": 1452,
      "start_time": 3247600.0,
      "end_time": 3248610.0,
      "text": "ALEX CRICHTON: Oh, so the question"
    },
    {
      "index": 1453,
      "start_time": 3248610.0,
      "end_time": 3249750.0,
      "text": "is, what do we do about ownership"
    },
    {
      "index": 1454,
      "start_time": 3249750.0,
      "end_time": 3251958.0,
      "text": "of crates in terms of what if the original owner just"
    },
    {
      "index": 1455,
      "start_time": 3251960.0,
      "end_time": 3252792.0,
      "text": "disappears?"
    },
    {
      "index": 1456,
      "start_time": 3252790.0,
      "end_time": 3255810.0,
      "text": "And we have systems for-- we can transfer ownership of crates"
    },
    {
      "index": 1457,
      "start_time": 3255810.0,
      "end_time": 3256310.0,
      "text": "here."
    },
    {
      "index": 1458,
      "start_time": 3256310.0,
      "end_time": 3258220.0,
      "text": "We can transfer ownership between owners."
    },
    {
      "index": 1459,
      "start_time": 3258220.0,
      "end_time": 3261960.0,
      "text": "Or, I mean, if someone&#39;s random crate ends up disappearing,"
    },
    {
      "index": 1460,
      "start_time": 3261960.0,
      "end_time": 3263855.0,
      "text": "then we probably don&#39;t take ownership of it."
    },
    {
      "index": 1461,
      "start_time": 3263850.0,
      "end_time": 3266475.0,
      "text": "We&#39;re not holding ourselves responsible for all libraries"
    },
    {
      "index": 1462,
      "start_time": 3266480.0,
      "end_time": 3270085.0,
      "text": "and crates on crates.io."
    },
    {
      "index": 1463,
      "start_time": 3270080.0,
      "end_time": 3271179.0,
      "text": "In the back."
    },
    {
      "index": 1464,
      "start_time": 3271180.0,
      "end_time": 3272096.0,
      "text": "AUDIENCE: [INAUDIBLE]?"
    },
    {
      "index": 1465,
      "start_time": 3280010.0,
      "end_time": 3282500.0,
      "text": "So what is the current state of [INAUDIBLE]?"
    },
    {
      "index": 1466,
      "start_time": 3285360.0,
      "end_time": 3287735.0,
      "text": "ALEX CRICHTON: The question is, what does the performance"
    },
    {
      "index": 1467,
      "start_time": 3287740.0,
      "end_time": 3288491.0,
      "text": "of Rust look like?"
    },
    {
      "index": 1468,
      "start_time": 3288490.0,
      "end_time": 3290822.0,
      "text": "Because we&#39;re using LLVM as a back end, kind of relative"
    },
    {
      "index": 1469,
      "start_time": 3290820.0,
      "end_time": 3291347.0,
      "text": "decline?"
    },
    {
      "index": 1470,
      "start_time": 3291350.0,
      "end_time": 3294260.0,
      "text": "And I can say, we&#39;re basically on par with C++."
    },
    {
      "index": 1471,
      "start_time": 3294260.0,
      "end_time": 3296340.0,
      "text": "We don&#39;t like disabling the optimizations,"
    },
    {
      "index": 1472,
      "start_time": 3296340.0,
      "end_time": 3298290.0,
      "text": "or we don&#39;t have any other fancy trickery going on there."
    },
    {
      "index": 1473,
      "start_time": 3298290.0,
      "end_time": 3300280.0,
      "text": "But if you use Rust, you&#39;re going to get basically what you"
    },
    {
      "index": 1474,
      "start_time": 3300280.0,
      "end_time": 3301035.0,
      "text": "would get in C++."
    },
    {
      "index": 1475,
      "start_time": 3303650.0,
      "end_time": 3305555.0,
      "text": "I don&#39;t know, is there a remote question?"
    },
    {
      "index": 1476,
      "start_time": 3305550.0,
      "end_time": 3307008.0,
      "text": "I don&#39;t know if it&#39;s switch stream."
    },
    {
      "index": 1477,
      "start_time": 3309360.0,
      "end_time": 3310551.0,
      "text": "AUDIENCE: Yeah."
    },
    {
      "index": 1478,
      "start_time": 3310550.0,
      "end_time": 3313349.0,
      "text": "You were doing a lot of type checking"
    },
    {
      "index": 1479,
      "start_time": 3313350.0,
      "end_time": 3314800.0,
      "text": "to get these guarantees."
    },
    {
      "index": 1480,
      "start_time": 3314800.0,
      "end_time": 3318050.0,
      "text": "Is that drastically increasing your compile time?"
    },
    {
      "index": 1481,
      "start_time": 3318050.0,
      "end_time": 3320845.0,
      "text": "And is that scaling significantly to project size?"
    },
    {
      "index": 1482,
      "start_time": 3320840.0,
      "end_time": 3324865.0,
      "text": "And is there a point where project scale gets unwieldy,"
    },
    {
      "index": 1483,
      "start_time": 3324870.0,
      "end_time": 3326979.0,
      "text": "especially for iterative development?"
    },
    {
      "index": 1484,
      "start_time": 3326980.0,
      "end_time": 3328771.0,
      "text": "ALEX CRICHTON: I&#39;m not going to repeat this"
    },
    {
      "index": 1485,
      "start_time": 3328770.0,
      "end_time": 3329430.0,
      "text": "because it was online."
    },
    {
      "index": 1486,
      "start_time": 3329430.0,
      "end_time": 3331650.0,
      "text": "But anyway, yes, so this is an interesting question."
    },
    {
      "index": 1487,
      "start_time": 3331650.0,
      "end_time": 3334290.0,
      "text": "And the compilation model for Rust is fairly different than"
    },
    {
      "index": 1488,
      "start_time": 3334290.0,
      "end_time": 3335360.0,
      "text": "C++."
    },
    {
      "index": 1489,
      "start_time": 3335360.0,
      "end_time": 3338050.0,
      "text": "So in C++ compile one object at a time."
    },
    {
      "index": 1490,
      "start_time": 3338050.0,
      "end_time": 3339776.0,
      "text": "And you include all your parse headers."
    },
    {
      "index": 1491,
      "start_time": 3339780.0,
      "end_time": 3341654.0,
      "text": "But Rust, it&#39;s actually essentially a library"
    },
    {
      "index": 1492,
      "start_time": 3341650.0,
      "end_time": 3342270.0,
      "text": "at a time."
    },
    {
      "index": 1493,
      "start_time": 3342270.0,
      "end_time": 3343520.0,
      "text": "It&#39;s a crate at a time."
    },
    {
      "index": 1494,
      "start_time": 3343520.0,
      "end_time": 3345630.0,
      "text": "So when you compile a Rust crate,"
    },
    {
      "index": 1495,
      "start_time": 3345630.0,
      "end_time": 3349240.0,
      "text": "you&#39;re compiling essentially all the C++ files at the same time,"
    },
    {
      "index": 1496,
      "start_time": 3349240.0,
      "end_time": 3350930.0,
      "text": "kind of in similar models."
    },
    {
      "index": 1497,
      "start_time": 3350930.0,
      "end_time": 3354279.0,
      "text": "So in that sense, the compile time for-- like the incremental"
    },
    {
      "index": 1498,
      "start_time": 3354280.0,
      "end_time": 3356571.0,
      "text": "compile time for one Rust library is going to be higher"
    },
    {
      "index": 1499,
      "start_time": 3356570.0,
      "end_time": 3359260.0,
      "text": "than a C++ library, because you have to recompile the entire"
    },
    {
      "index": 1500,
      "start_time": 3359260.0,
      "end_time": 3360000.0,
      "text": "library."
    },
    {
      "index": 1501,
      "start_time": 3360000.0,
      "end_time": 3363060.0,
      "text": "But in terms of type checking, it&#39;s fundamentally way faster"
    },
    {
      "index": 1502,
      "start_time": 3363060.0,
      "end_time": 3366910.0,
      "text": "than C++, because we use traits in our generics."
    },
    {
      "index": 1503,
      "start_time": 3366910.0,
      "end_time": 3368730.0,
      "text": "And we do not need to type check them"
    },
    {
      "index": 1504,
      "start_time": 3368730.0,
      "end_time": 3370119.0,
      "text": "after we&#39;ve instantiated them."
    },
    {
      "index": 1505,
      "start_time": 3370120.0,
      "end_time": 3371661.0,
      "text": "So we can type check everything once."
    },
    {
      "index": 1506,
      "start_time": 3371660.0,
      "end_time": 3374100.0,
      "text": "And then we don&#39;t have to worry about it ever again."
    },
    {
      "index": 1507,
      "start_time": 3374100.0,
      "end_time": 3375930.0,
      "text": "And when you depend on an upstream create--"
    },
    {
      "index": 1508,
      "start_time": 3375930.0,
      "end_time": 3378305.0,
      "text": "so, for example, if I include some header file from a C++"
    },
    {
      "index": 1509,
      "start_time": 3378300.0,
      "end_time": 3381085.0,
      "text": "library, I don&#39;t have to re-type check that every single time"
    },
    {
      "index": 1510,
      "start_time": 3381090.0,
      "end_time": 3382250.0,
      "text": "you run the compiler."
    },
    {
      "index": 1511,
      "start_time": 3382250.0,
      "end_time": 3384317.0,
      "text": "So compile times are a little bit"
    },
    {
      "index": 1512,
      "start_time": 3384320.0,
      "end_time": 3386153.0,
      "text": "of a problem today in terms of because we&#39;re"
    },
    {
      "index": 1513,
      "start_time": 3386150.0,
      "end_time": 3387930.0,
      "text": "compiling all these big crates."
    },
    {
      "index": 1514,
      "start_time": 3387930.0,
      "end_time": 3389860.0,
      "text": "So there&#39;s a lot of efforts underway."
    },
    {
      "index": 1515,
      "start_time": 3389860.0,
      "end_time": 3391590.0,
      "text": "Like even today, by the end of the year,"
    },
    {
      "index": 1516,
      "start_time": 3391590.0,
      "end_time": 3393798.0,
      "text": "we&#39;re probably going to have incremental compilation,"
    },
    {
      "index": 1517,
      "start_time": 3393800.0,
      "end_time": 3395912.0,
      "text": "pipeline compilation, parallel compilation, all"
    },
    {
      "index": 1518,
      "start_time": 3395910.0,
      "end_time": 3397300.0,
      "text": "these great aspects."
    },
    {
      "index": 1519,
      "start_time": 3397300.0,
      "end_time": 3401610.0,
      "text": "But in terms of just the raw compile time which you&#39;d expect"
    },
    {
      "index": 1520,
      "start_time": 3401610.0,
      "end_time": 3404680.0,
      "text": "today, if you start from zero, Rust code will compile a little"
    },
    {
      "index": 1521,
      "start_time": 3404680.0,
      "end_time": 3406090.0,
      "text": "bit faster than C++."
    },
    {
      "index": 1522,
      "start_time": 3406090.0,
      "end_time": 3407737.0,
      "text": "If you go in an incremental fashion,"
    },
    {
      "index": 1523,
      "start_time": 3407740.0,
      "end_time": 3409823.0,
      "text": "C++ might be a little faster because we don&#39;t have"
    },
    {
      "index": 1524,
      "start_time": 3409820.0,
      "end_time": 3411170.0,
      "text": "the incremental aspects."
    },
    {
      "index": 1525,
      "start_time": 3411170.0,
      "end_time": 3413860.0,
      "text": "And I think there&#39;s one other aspect to your question."
    },
    {
      "index": 1526,
      "start_time": 3413860.0,
      "end_time": 3416150.0,
      "text": "Or did I hit all your points?"
    },
    {
      "index": 1527,
      "start_time": 3416150.0,
      "end_time": 3417380.0,
      "text": "Oh, scalability, yes."
    },
    {
      "index": 1528,
      "start_time": 3417380.0,
      "end_time": 3419340.0,
      "text": "So scalability, I think it definitely"
    },
    {
      "index": 1529,
      "start_time": 3419340.0,
      "end_time": 3420470.0,
      "text": "scales quite well today."
    },
    {
      "index": 1530,
      "start_time": 3420470.0,
      "end_time": 3424080.0,
      "text": "We haven&#39;t run into lots of problems."
    },
    {
      "index": 1531,
      "start_time": 3424080.0,
      "end_time": 3426640.0,
      "text": "Because the compile time for one crate can be a little high"
    },
    {
      "index": 1532,
      "start_time": 3426640.0,
      "end_time": 3428720.0,
      "text": "we might have to break that library"
    },
    {
      "index": 1533,
      "start_time": 3428720.0,
      "end_time": 3430080.0,
      "text": "into two separate crates."
    },
    {
      "index": 1534,
      "start_time": 3430080.0,
      "end_time": 3432370.0,
      "text": "But that&#39;s generally a good exercise to do anyway."
    },
    {
      "index": 1535,
      "start_time": 3432370.0,
      "end_time": 3435289.0,
      "text": "But Servo has not had problems with compile times that"
    },
    {
      "index": 1536,
      "start_time": 3435290.0,
      "end_time": 3437331.0,
      "text": "would not be solved with incremental compilation,"
    },
    {
      "index": 1537,
      "start_time": 3437330.0,
      "end_time": 3439490.0,
      "text": "for example."
    },
    {
      "index": 1538,
      "start_time": 3439490.0,
      "end_time": 3443600.0,
      "text": "AUDIENCE: Just for reference-- hi, I&#39;m Chandler."
    },
    {
      "index": 1539,
      "start_time": 3443600.0,
      "end_time": 3446024.0,
      "text": "I work on [INAUDIBLE] in LDM."
    },
    {
      "index": 1540,
      "start_time": 3446020.0,
      "end_time": 3448436.0,
      "text": "But I wanted to let you know that the [INAUDIBLE] compiler"
    },
    {
      "index": 1541,
      "start_time": 3448440.0,
      "end_time": 3451455.0,
      "text": "spends almost no time type checking C++."
    },
    {
      "index": 1542,
      "start_time": 3451460.0,
      "end_time": 3455455.0,
      "text": "It&#39;s not really measurable as part of C++ compile time"
    },
    {
      "index": 1543,
      "start_time": 3455450.0,
      "end_time": 3456170.0,
      "text": "for us."
    },
    {
      "index": 1544,
      "start_time": 3458820.0,
      "end_time": 3461080.0,
      "text": "So type checking is never a compile time problem"
    },
    {
      "index": 1545,
      "start_time": 3461080.0,
      "end_time": 3462940.0,
      "text": "that we&#39;ve run into."
    },
    {
      "index": 1546,
      "start_time": 3462940.0,
      "end_time": 3465580.0,
      "text": "ALEX CRICHTON: Interesting."
    },
    {
      "index": 1547,
      "start_time": 3465580.0,
      "end_time": 3466997.0,
      "text": "AUDIENCE: Alex?"
    },
    {
      "index": 1548,
      "start_time": 3467000.0,
      "end_time": 3467833.0,
      "text": "ALEX CRICHTON: Sure."
    },
    {
      "index": 1549,
      "start_time": 3471580.0,
      "end_time": 3473440.0,
      "text": "AUDIENCE: What&#39;s the largest Rust code"
    },
    {
      "index": 1550,
      "start_time": 3473440.0,
      "end_time": 3477885.0,
      "text": "base you&#39;re aware of on the client and also on the server,"
    },
    {
      "index": 1551,
      "start_time": 3477890.0,
      "end_time": 3480085.0,
      "text": "if any?"
    },
    {
      "index": 1552,
      "start_time": 3480080.0,
      "end_time": 3483230.0,
      "text": "ALEX CRICHTON: So the two largest Rust code bases"
    },
    {
      "index": 1553,
      "start_time": 3483230.0,
      "end_time": 3484690.0,
      "text": "I know of are Servo and Rust."
    },
    {
      "index": 1554,
      "start_time": 3484690.0,
      "end_time": 3487920.0,
      "text": "I don&#39;t know if you would-- in terms of a server client,"
    },
    {
      "index": 1555,
      "start_time": 3487920.0,
      "end_time": 3489990.0,
      "text": "like an HTTP server or an HTTP client,"
    },
    {
      "index": 1556,
      "start_time": 3489990.0,
      "end_time": 3492500.0,
      "text": "I don&#39;t think we have that large code base."
    },
    {
      "index": 1557,
      "start_time": 3492500.0,
      "end_time": 3495180.0,
      "text": "It&#39;s not quite the niche that Rust is filling right now."
    },
    {
      "index": 1558,
      "start_time": 3495180.0,
      "end_time": 3496729.0,
      "text": "So those would be the two."
    },
    {
      "index": 1559,
      "start_time": 3496730.0,
      "end_time": 3499021.0,
      "text": "I guess you could qualify Servo as a client, as opposed"
    },
    {
      "index": 1560,
      "start_time": 3499020.0,
      "end_time": 3499580.0,
      "text": "to a server."
    },
    {
      "index": 1561,
      "start_time": 3499580.0,
      "end_time": 3501900.0,
      "text": "But in terms of the largest server,"
    },
    {
      "index": 1562,
      "start_time": 3501900.0,
      "end_time": 3504541.0,
      "text": "I know crates.io was entirely written in Rust."
    },
    {
      "index": 1563,
      "start_time": 3504540.0,
      "end_time": 3507039.0,
      "text": "But that would be the largest one that I personally know of."
    },
    {
      "index": 1564,
      "start_time": 3510200.0,
      "end_time": 3511161.0,
      "text": "You had a question?"
    },
    {
      "index": 1565,
      "start_time": 3511160.0,
      "end_time": 3513469.0,
      "text": "AUDIENCE: How good is your debugging support?"
    },
    {
      "index": 1566,
      "start_time": 3513470.0,
      "end_time": 3514280.0,
      "text": "ALEX CRICHTON: The question is, how good"
    },
    {
      "index": 1567,
      "start_time": 3514280.0,
      "end_time": 3515280.0,
      "text": "is the debugging support?"
    },
    {
      "index": 1568,
      "start_time": 3515280.0,
      "end_time": 3515770.0,
      "text": "AUDIENCE: Yes."
    },
    {
      "index": 1569,
      "start_time": 3515770.0,
      "end_time": 3517853.0,
      "text": "That&#39;s right. [INAUDIBLE] debugging, and debugging"
    },
    {
      "index": 1570,
      "start_time": 3517850.0,
      "end_time": 3521527.0,
      "text": "of the [INAUDIBLE], and in cases where it sometimes"
    },
    {
      "index": 1571,
      "start_time": 3521530.0,
      "end_time": 3524057.0,
      "text": "has a few bugs."
    },
    {
      "index": 1572,
      "start_time": 3524060.0,
      "end_time": 3524893.0,
      "text": "ALEX CRICHTON: Sure."
    },
    {
      "index": 1573,
      "start_time": 3524890.0,
      "end_time": 3529790.0,
      "text": "So the story here is, if you can debug C++, you can debug Rust."
    },
    {
      "index": 1574,
      "start_time": 3529790.0,
      "end_time": 3531107.0,
      "text": "So we use LLVM as a back end."
    },
    {
      "index": 1575,
      "start_time": 3531110.0,
      "end_time": 3532693.0,
      "text": "And we have debugging go through that."
    },
    {
      "index": 1576,
      "start_time": 3532690.0,
      "end_time": 3534740.0,
      "text": "We have DWARF debug info."
    },
    {
      "index": 1577,
      "start_time": 3534740.0,
      "end_time": 3538020.0,
      "text": "We have GDB integration in terms of pretty-printers."
    },
    {
      "index": 1578,
      "start_time": 3538020.0,
      "end_time": 3540292.0,
      "text": "So if you can debug C++, you can debug Rust."
    },
    {
      "index": 1579,
      "start_time": 3540290.0,
      "end_time": 3541998.0,
      "text": "So whatever you would expect to do there,"
    },
    {
      "index": 1580,
      "start_time": 3542000.0,
      "end_time": 3543291.0,
      "text": "you can just do the same thing."
    },
    {
      "index": 1581,
      "start_time": 3543290.0,
      "end_time": 3545049.0,
      "text": "Because as we&#39;re using LLVM as a back end,"
    },
    {
      "index": 1582,
      "start_time": 3545050.0,
      "end_time": 3546350.0,
      "text": "it&#39;s all just native object files."
    },
    {
      "index": 1583,
      "start_time": 3546350.0,
      "end_time": 3547790.0,
      "text": "We&#39;re using the standard system linker, and all"
    },
    {
      "index": 1584,
      "start_time": 3547790.0,
      "end_time": 3548456.0,
      "text": "that good stuff."
    },
    {
      "index": 1585,
      "start_time": 3548460.0,
      "end_time": 3552114.0,
      "text": "So the standard C++ tools-- and this applies to profiling,"
    },
    {
      "index": 1586,
      "start_time": 3552110.0,
      "end_time": 3552930.0,
      "text": "testing."
    },
    {
      "index": 1587,
      "start_time": 3552930.0,
      "end_time": 3555190.0,
      "text": "All these kinds of various analyses"
    },
    {
      "index": 1588,
      "start_time": 3555190.0,
      "end_time": 3556370.0,
      "text": "will apply to Rust as well."
    },
    {
      "index": 1589,
      "start_time": 3559010.0,
      "end_time": 3560135.0,
      "text": "AUDIENCE: One more question"
    },
    {
      "index": 1590,
      "start_time": 3560140.0,
      "end_time": 3561515.0,
      "text": "ALEX CRICHTON: One more question?"
    },
    {
      "index": 1591,
      "start_time": 3565570.0,
      "end_time": 3566170.0,
      "text": "All right."
    },
    {
      "index": 1592,
      "start_time": 3566170.0,
      "end_time": 3567420.0,
      "text": "Thank you so much."
    },
    {
      "index": 1593,
      "start_time": 3567420.0,
      "end_time": 3570770.0,
      "text": "[APPLAUSE]"
    }
  ]
}