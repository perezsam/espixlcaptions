{
  "video_id": "rKnDgT73v8s",
  "title": "The Go Programming Language",
  "es": 0,
  "json": [
    {
      "index": 1,
      "start_time": 23359.0,
      "end_time": 28070.0,
      "text": "&gt;&gt; PIKE: I’m going to talk about the Go Programming Language, which is going to be--we"
    },
    {
      "index": 2,
      "start_time": 28070.0,
      "end_time": 34680.0,
      "text": "hope going open source on November 10th, which is in just a couple of weeks. This talk is"
    },
    {
      "index": 3,
      "start_time": 34680.0,
      "end_time": 39000.0,
      "text": "a little bit before then, so some--there are some future tense for things like links and"
    },
    {
      "index": 4,
      "start_time": 39000.0,
      "end_time": 43940.0,
      "text": "so on, but everything should be as recorded by the time we actually go public with this"
    },
    {
      "index": 5,
      "start_time": 43940.0,
      "end_time": 49960.0,
      "text": "stuff. You can see we have a website we’re setting up, which will be the public domain,"
    },
    {
      "index": 6,
      "start_time": 49960.0,
      "end_time": 54440.0,
      "text": "public viewable domain for that. So, what is it? Well, I’m can talk about all these"
    },
    {
      "index": 7,
      "start_time": 54440.0,
      "end_time": 60890.0,
      "text": "pieces but it is new, an experimental, concurrent, garbage-collected, systems, language. Experimental"
    },
    {
      "index": 8,
      "start_time": 60890.0,
      "end_time": 64430.0,
      "text": "because we’re not--we don’t believe this is the answer to everything, but we’re playing"
    },
    {
      "index": 9,
      "start_time": 64430.00000000001,
      "end_time": 67530.0,
      "text": "and we think it’s gotten to the point where it’s time we should probably tell the world"
    },
    {
      "index": 10,
      "start_time": 67530.0,
      "end_time": 72030.0,
      "text": "about it. It’s concurrent because it’s really important in the modern world. It’s"
    },
    {
      "index": 11,
      "start_time": 72030.0,
      "end_time": 74470.0,
      "text": "garbage-collected because we have an opinion on that stuff, which I’ll talk about it"
    },
    {
      "index": 12,
      "start_time": 74470.0,
      "end_time": 78990.0,
      "text": "quite a bit later. And it’s a systems language in the sense that we intended to be written,"
    },
    {
      "index": 13,
      "start_time": 78990.0,
      "end_time": 84670.0,
      "text": "to be used to write things like Web servers and other, you know, system aspects like that."
    },
    {
      "index": 14,
      "start_time": 84670.0,
      "end_time": 88220.0,
      "text": "You have more control over some things and you have another languages like, say, Java"
    },
    {
      "index": 15,
      "start_time": 88220.0,
      "end_time": 93890.0,
      "text": "or Python, but it’s--it works like a systems language when you use it. On the other hand,"
    },
    {
      "index": 16,
      "start_time": 93890.0,
      "end_time": 98630.0,
      "text": "it&#39;s very good at things we find for things like front-ends or just general programming."
    },
    {
      "index": 17,
      "start_time": 98630.0,
      "end_time": 102240.0,
      "text": "So, although, it’s designed as a systems language, it has much broader use than just"
    },
    {
      "index": 18,
      "start_time": 102240.0,
      "end_time": 109659.0,
      "text": "that. I can&#39;t give a talk without showing you, &quot;Hello, world.&quot; There’s &quot;Hello, world&quot;"
    },
    {
      "index": 19,
      "start_time": 109659.0,
      "end_time": 113570.0,
      "text": "with the &quot;world&quot; being Japanese, which I want to attempt to pronounce. But you can see that"
    },
    {
      "index": 20,
      "start_time": 113570.0,
      "end_time": 116790.0,
      "text": "it looks vaguely C like although there’s some &quot;weirdnesses&quot; about it. I won’t talk"
    },
    {
      "index": 21,
      "start_time": 116790.0,
      "end_time": 121830.0,
      "text": "about what those &quot;weirdnesses&quot; are. Who’s involve? Well, I’m giving the talk but it’s"
    },
    {
      "index": 22,
      "start_time": 121830.0,
      "end_time": 125430.0,
      "text": "by no means my project. There’s a bunch of people involve and I want to make sure"
    },
    {
      "index": 23,
      "start_time": 125430.0,
      "end_time": 128909.0,
      "text": "everyone’s cleared. Some of the names are really important here. Robert Griesemer, Ken"
    },
    {
      "index": 24,
      "start_time": 128908.99999999999,
      "end_time": 133099.0,
      "text": "Thompson, and I started talking about doing something to solve the problems we were seeing"
    },
    {
      "index": 25,
      "start_time": 133099.0,
      "end_time": 138209.0,
      "text": "with other environments. Some time around two years ago in late 2007, we played mostly"
    },
    {
      "index": 26,
      "start_time": 138209.0,
      "end_time": 143060.0,
      "text": "at the Wade Park for a few months to figure some things out. But by middle of 2008, we"
    },
    {
      "index": 27,
      "start_time": 143060.0,
      "end_time": 147810.0,
      "text": "had a toy compiler and things were starting to look interesting and we started working"
    },
    {
      "index": 28,
      "start_time": 147810.0,
      "end_time": 153000.0,
      "text": "on the stuff for real. And around that time, Ian Taylor joined and Russ Cox joined, and"
    },
    {
      "index": 29,
      "start_time": 153000.0,
      "end_time": 157069.0,
      "text": "the five of us did the most of the work, but we’ve had a lot of help from a lot of people"
    },
    {
      "index": 30,
      "start_time": 157069.0,
      "end_time": 160790.0,
      "text": "that this slide is too small to name. So I just make--I want to make it clear this is"
    },
    {
      "index": 31,
      "start_time": 160790.0,
      "end_time": 168450.0,
      "text": "a collaborative effort and the collaboration is growing. Why? Well, the reason is things"
    },
    {
      "index": 32,
      "start_time": 168450.0,
      "end_time": 172200.0,
      "text": "were just taking too long: too long to compile, too long to build, too long to think about."
    },
    {
      "index": 33,
      "start_time": 172200.0,
      "end_time": 177160.0,
      "text": "We want a program fast. We want a program fun. And to make programming fun, you have"
    },
    {
      "index": 34,
      "start_time": 177160.0,
      "end_time": 181340.0,
      "text": "to find ways to speed things up and make things work better, not just the code itself but"
    },
    {
      "index": 35,
      "start_time": 181340.0,
      "end_time": 188260.0,
      "text": "the process of writing the code needs to be efficient. So what’s happened? Well, you"
    },
    {
      "index": 36,
      "start_time": 188260.0,
      "end_time": 192349.0,
      "text": "know, program used to be fun. What went wrong? Well, it’s interesting there&#39;s been really"
    },
    {
      "index": 37,
      "start_time": 192349.0,
      "end_time": 198959.0,
      "text": "been no new major systems language in at least 10 years or could be longer. But in that decade,"
    },
    {
      "index": 38,
      "start_time": 198959.0,
      "end_time": 203849.0,
      "text": "a lot has changed. The libraries have gotten bigger. Professional programming has, to a"
    },
    {
      "index": 39,
      "start_time": 203849.0,
      "end_time": 208300.0,
      "text": "larger extent, become a layering process, and so we layer more and more stuff on and"
    },
    {
      "index": 40,
      "start_time": 208300.0,
      "end_time": 212730.0,
      "text": "we also broaden out the base. The libraries got really big. There’s a lots of them."
    },
    {
      "index": 41,
      "start_time": 212730.0,
      "end_time": 217540.0,
      "text": "They communicate with dependencies to one another and so the force has become a thicket,"
    },
    {
      "index": 42,
      "start_time": 217540.0,
      "end_time": 221959.0,
      "text": "and at some times it’s kind of hard to cut your way through it. Networking has pretty"
    },
    {
      "index": 43,
      "start_time": 221959.0,
      "end_time": 225599.0,
      "text": "much taken over the world, that&#39;s the way to think about computing. The old son thing"
    },
    {
      "index": 44,
      "start_time": 225599.0,
      "end_time": 229360.0,
      "text": "about the network is the computer is pretty much true today, but the languages don’t"
    },
    {
      "index": 45,
      "start_time": 229360.0,
      "end_time": 234409.0,
      "text": "really reflect that. There’s a lot of client/server kind of stuff especially in the systems base."
    },
    {
      "index": 46,
      "start_time": 234409.0,
      "end_time": 239120.0,
      "text": "Languages don’t really help you there too directly. Of course, we’re talking about"
    },
    {
      "index": 47,
      "start_time": 239120.0,
      "end_time": 244330.0,
      "text": "massive compute clusters now and again, the languages are designed for single processors."
    },
    {
      "index": 48,
      "start_time": 244330.0,
      "end_time": 248300.0,
      "text": "They don’t really work very well in that model. And on a related note, multi-core CPUs"
    },
    {
      "index": 49,
      "start_time": 248300.0,
      "end_time": 253849.0,
      "text": "are taking over, too. It’s getting harder to buy a high-end computer with only one processor."
    },
    {
      "index": 50,
      "start_time": 253849.0,
      "end_time": 259870.0,
      "text": "It tends to be multi-core, sometimes multi-chip/multi-core. And again, the languages that we’re using"
    },
    {
      "index": 51,
      "start_time": 259870.0,
      "end_time": 265909.0,
      "text": "weren&#39;t really designed with that kind of stuff in mind. And it’s also gotten--I think"
    },
    {
      "index": 52,
      "start_time": 265909.0,
      "end_time": 269250.0,
      "text": "this is the thing that finally pushed us to try to do something. It’s just gotten to"
    },
    {
      "index": 53,
      "start_time": 269250.0,
      "end_time": 275840.0,
      "text": "slow to build software. The tools are slow. They have a hard problem to do, but they still--they’re"
    },
    {
      "index": 54,
      "start_time": 275840.0,
      "end_time": 279539.0,
      "text": "tend to be slow and they’re getting slower. The computers have speed up enormously but"
    },
    {
      "index": 55,
      "start_time": 279539.0,
      "end_time": 284490.0,
      "text": "the software development process, if anything, has gotten slower over the last ten years."
    },
    {
      "index": 56,
      "start_time": 284490.0,
      "end_time": 287930.0,
      "text": "The dependencies are uncontrolled and the languages don’t help you control them, so"
    },
    {
      "index": 57,
      "start_time": 287930.0,
      "end_time": 291469.0,
      "text": "you tend to spend a lot of time maybe building things you don’t even need but you don’t"
    },
    {
      "index": 58,
      "start_time": 291469.0,
      "end_time": 296759.0,
      "text": "know it, can’t prove it. The machines have also stopped getting faster. They’ve gotten"
    },
    {
      "index": 59,
      "start_time": 296759.0,
      "end_time": 301050.0,
      "text": "more but they haven’t gotten faster. There are more processors, there are more of them,"
    },
    {
      "index": 60,
      "start_time": 301050.0,
      "end_time": 306169.0,
      "text": "but the actual clock speed has hardly changed in the last few years and Moore&#39;s law, to"
    },
    {
      "index": 61,
      "start_time": 306169.0,
      "end_time": 309849.0,
      "text": "some extent, is peering out and yet the software gets bigger and bigger and bigger. And so,"
    },
    {
      "index": 62,
      "start_time": 309849.0,
      "end_time": 315249.0,
      "text": "somehow, it feels like if we don’t do something, then software construction is just going to"
    },
    {
      "index": 63,
      "start_time": 315249.0,
      "end_time": 321330.0,
      "text": "become unbearably slower and we need to think about the process of making it fast again."
    },
    {
      "index": 64,
      "start_time": 321330.0,
      "end_time": 325879.0,
      "text": "Robert Griesemer observes that a lot of the interesting work in languages in the last"
    },
    {
      "index": 65,
      "start_time": 325879.0,
      "end_time": 330669.0,
      "text": "few years is been because a lot of the people using these standards systems languages like"
    },
    {
      "index": 66,
      "start_time": 330669.0,
      "end_time": 335849.0,
      "text": "C, C++, even Java are finding the clamp--the type systems are very sort of clumsy or hard"
    },
    {
      "index": 67,
      "start_time": 335849.0,
      "end_time": 339729.0,
      "text": "to work with. And as they go to the dynamic languages: the Pythons, the Ruby’s, even"
    },
    {
      "index": 68,
      "start_time": 339729.0,
      "end_time": 343909.0,
      "text": "the JavaScript of the world, they have a lot more fun because the type systems don’t"
    },
    {
      "index": 69,
      "start_time": 343909.0,
      "end_time": 348580.0,
      "text": "get in the way so much at least as long as the program keeps running. And so, the challenge"
    },
    {
      "index": 70,
      "start_time": 348580.0,
      "end_time": 353490.0,
      "text": "here is to try to deal with this. You want typing. You want a good typing because it"
    },
    {
      "index": 71,
      "start_time": 353490.0,
      "end_time": 358710.0,
      "text": "makes programs robust, but it can be done badly. And we are given in some ways, there"
    },
    {
      "index": 72,
      "start_time": 358710.0,
      "end_time": 364069.0,
      "text": "is--if not done badly, it should at least be done the different way. Sometimes good"
    },
    {
      "index": 73,
      "start_time": 364069.0,
      "end_time": 369219.0,
      "text": "ideas, in principle, make bad practice. And a good example of that is the &quot;const&quot; keyword"
    },
    {
      "index": 74,
      "start_time": 369219.0,
      "end_time": 374279.0,
      "text": "in C and in C++, which was very well intentioned and seem to address the real need in making"
    },
    {
      "index": 75,
      "start_time": 374279.0,
      "end_time": 379369.0,
      "text": "program safer, but it tends to make programming awkward in a lot of ways, so this isn’t"
    },
    {
      "index": 76,
      "start_time": 379369.0,
      "end_time": 383460.0,
      "text": "worth the benefit you get back from using. Also, there is this notion of everything being"
    },
    {
      "index": 77,
      "start_time": 383460.0,
      "end_time": 389069.0,
      "text": "a type hierarchy in object-oriented programming. And yet, the types in large programs don’t"
    },
    {
      "index": 78,
      "start_time": 389069.0,
      "end_time": 393210.0,
      "text": "really naturally fall into hierarchies. We find the way to make them fit, but it’s"
    },
    {
      "index": 79,
      "start_time": 393210.0,
      "end_time": 397460.0,
      "text": "a bit of a struggle. In program, we spend so much time re-factoring a code, juggling"
    },
    {
      "index": 80,
      "start_time": 397460.0,
      "end_time": 401789.0,
      "text": "type trees around, and that has very little to do with the implementation and lot to do"
    },
    {
      "index": 81,
      "start_time": 401789.0,
      "end_time": 405490.0,
      "text": "with the way the language is forcing you to think. We’d like to be--we’d like to sort"
    },
    {
      "index": 82,
      "start_time": 405490.0,
      "end_time": 409939.0,
      "text": "of step back from that model. And in short, therefore, with the way type systems work"
    },
    {
      "index": 83,
      "start_time": 409939.0,
      "end_time": 414860.0,
      "text": "today, you can be productive or you can safe, but you can’t really be both. And that seems"
    },
    {
      "index": 84,
      "start_time": 414860.0,
      "end_time": 419379.0,
      "text": "like a shame; we should be able to fix that. So, why a new language? Why don&#39;t we just,"
    },
    {
      "index": 85,
      "start_time": 419379.0,
      "end_time": 423849.0,
      "text": "you know, fix what we&#39;ve got? Well, some of the problems are just fundamental to the way"
    },
    {
      "index": 86,
      "start_time": 423849.0,
      "end_time": 427599.0,
      "text": "the languages are thinking, the way the type systems work, the way they’re compiled,"
    },
    {
      "index": 87,
      "start_time": 427599.0,
      "end_time": 431460.0,
      "text": "the way dependencies are managed. The languages themselves have these problems endemic in"
    },
    {
      "index": 88,
      "start_time": 431460.0,
      "end_time": 437860.0,
      "text": "them, and to fix them, you have to rethink the languages itself. For instance, the libraries"
    },
    {
      "index": 89,
      "start_time": 437860.0,
      "end_time": 441770.0,
      "text": "can’t help you, because adding anything to try to fix some of these problems is going"
    },
    {
      "index": 90,
      "start_time": 441770.0,
      "end_time": 445039.0,
      "text": "in the wrong direction. There’s too much already. We need to trim down, cut the fat,"
    },
    {
      "index": 91,
      "start_time": 445039.0,
      "end_time": 448479.0,
      "text": "and make things cleaner. Fixing it by adding software isn’t going to do it. You have"
    },
    {
      "index": 92,
      "start_time": 448479.0,
      "end_time": 454149.0,
      "text": "to sort of step aside and do something separate. And so, we decided: Robert, Ken, and I couple"
    },
    {
      "index": 93,
      "start_time": 454149.0,
      "end_time": 458080.0,
      "text": "of years ago that we need to start over. Just take a step away and think about the way programs"
    },
    {
      "index": 94,
      "start_time": 458080.0,
      "end_time": 462999.0,
      "text": "are written and constructed and try to make a language that makes that process a lot easier."
    },
    {
      "index": 95,
      "start_time": 462999.0,
      "end_time": 469800.0,
      "text": "So, it’s a new language. What are the goals of this language? The sort of short version"
    },
    {
      "index": 96,
      "start_time": 469800.0,
      "end_time": 474169.0,
      "text": "of the story is we want the efficiency of a statically compiled language; that means"
    },
    {
      "index": 97,
      "start_time": 474169.0,
      "end_time": 479009.0,
      "text": "truly compiled language, but the ease of programming of a dynamic language. And I think we have"
    },
    {
      "index": 98,
      "start_time": 479009.0,
      "end_time": 482839.0,
      "text": "come pretty close to achieving that. You can decide for yourself as we go on. Safety is"
    },
    {
      "index": 99,
      "start_time": 482839.0,
      "end_time": 487520.0,
      "text": "critical. It’s critical to the language: the type-safe and then the memory-safe. It’s"
    },
    {
      "index": 100,
      "start_time": 487520.0,
      "end_time": 490999.0,
      "text": "important that a program not be able to derive a bad address and just use it, that a program"
    },
    {
      "index": 101,
      "start_time": 490999.0,
      "end_time": 494899.0,
      "text": "that compiles is type-safe and memory-safe. That’s a critical part of making robust"
    },
    {
      "index": 102,
      "start_time": 494899.0,
      "end_time": 499929.0,
      "text": "software and we just--that’s just fundamental. We want good support for concurrency. I’ll"
    },
    {
      "index": 103,
      "start_time": 499929.0,
      "end_time": 504559.0,
      "text": "talk a little bit about that. Communication, I’ll talk about that, too. Those are tools"
    },
    {
      "index": 104,
      "start_time": 504559.0,
      "end_time": 510379.0,
      "text": "that can help you build software that runs in the network or in multi-core CPUs. We want"
    },
    {
      "index": 105,
      "start_time": 510379.0,
      "end_time": 513820.0,
      "text": "to build--we’re going to garbage like to think, because a lot of the bookkeeping that"
    },
    {
      "index": 106,
      "start_time": 513820.00000000006,
      "end_time": 518550.00000000006,
      "text": "goes on inside modern programming, especially in C and C++, has to do with memory management."
    },
    {
      "index": 107,
      "start_time": 518549.99999999994,
      "end_time": 524540.0,
      "text": "And that can be totally automated. And we believe, &quot;believe&quot; is the word, that you can"
    },
    {
      "index": 108,
      "start_time": 524540.0,
      "end_time": 528580.0,
      "text": "do that efficiently and, essentially, latency-free that the garbage collection technology is"
    },
    {
      "index": 109,
      "start_time": 528580.0,
      "end_time": 532130.0,
      "text": "advance to the point where a garbage collected systems language actually makes a lot of sense,"
    },
    {
      "index": 110,
      "start_time": 532130.0,
      "end_time": 537269.0,
      "text": "and so we’d like to do that. And also, we’d like the compiler to just run fast. Everyone"
    },
    {
      "index": 111,
      "start_time": 537269.0,
      "end_time": 542940.0,
      "text": "knows this slide and there’s some truth to it. You know, you spent too much time waiting"
    },
    {
      "index": 112,
      "start_time": 542940.0,
      "end_time": 553769.0,
      "text": "for compilers. So, let me give you a compilation demo here. This is a directory of Go code. If you look"
    },
    {
      "index": 113,
      "start_time": 553769.0,
      "end_time": 560560.0,
      "text": "in here, there’s a 1,300 lines, so I make clean, and then I’ll just do a major. There,"
    },
    {
      "index": 114,
      "start_time": 560560.0,
      "end_time": 567670.0,
      "text": "I just built the last library. That’s compiled, efficient code, clean again. In case you wonder"
    },
    {
      "index": 115,
      "start_time": 567670.0,
      "end_time": 573149.0,
      "text": "if I can type, okay, time make. Okay. So that’s what two--well, pretty accurately, 200 milliseconds"
    },
    {
      "index": 116,
      "start_time": 573149.0,
      "end_time": 576889.0,
      "text": "real time to build the library. That feels about right. For the last years or so, those"
    },
    {
      "index": 117,
      "start_time": 576889.0,
      "end_time": 581290.0,
      "text": "who’s working with Go had been getting used to 100 millisecond builds on one machine."
    },
    {
      "index": 118,
      "start_time": 581290.0,
      "end_time": 585199.0,
      "text": "That’s running on my laptop, by the way. That’s not some distributed thing. That’s"
    },
    {
      "index": 119,
      "start_time": 585199.0,
      "end_time": 590889.0,
      "text": "one processor, one build. And just to prove it a little better, let me make clean. This"
    },
    {
      "index": 120,
      "start_time": 590889.0,
      "end_time": 595610.0,
      "text": "is the complete Go source tree. All of the libraries written in Go, there’s something"
    },
    {
      "index": 121,
      "start_time": 595610.0,
      "end_time": 603230.0,
      "text": "of order. I think it’s about 120, 130,000 lines. So, included in here are regular expressions,"
    },
    {
      "index": 122,
      "start_time": 603230.0,
      "end_time": 611529.0,
      "text": "flags, concurrency primitives, the run-time, the garbage collector, pieces--oh it’s finished."
    },
    {
      "index": 123,
      "start_time": 611529.0,
      "end_time": 617240.0,
      "text": "Okay. So that was a one processor. I could’ve paralyzed it a bit better. But that’s eight"
    },
    {
      "index": 124,
      "start_time": 617240.0,
      "end_time": 621910.0,
      "text": "seconds. That feels long to me now. That’s a long time because this is all the software"
    },
    {
      "index": 125,
      "start_time": 621910.0,
      "end_time": 626129.0,
      "text": "that’s there and, you know, it’s a long time to build--you can get a lot done with"
    },
    {
      "index": 126,
      "start_time": 626129.0,
      "end_time": 632410.0,
      "text": "that much time. Just to remind you, then we go back here, that’s what you want to see."
    },
    {
      "index": 127,
      "start_time": 632410.0,
      "end_time": 638500.0,
      "text": "You want to have character return time for your compilations, and it can be done. So"
    },
    {
      "index": 128,
      "start_time": 638500.0,
      "end_time": 646930.0,
      "text": "let me get that set for later and we’ll go back to this. Okay. So, we think we’ve"
    },
    {
      "index": 129,
      "start_time": 646930.0,
      "end_time": 650689.0,
      "text": "got fast compilation and I can’t tell you how much--what a difference that makes to"
    },
    {
      "index": 130,
      "start_time": 650689.0,
      "end_time": 655089.0,
      "text": "your life. Sometimes hours and hours to go by when people finally showed up to my office"
    },
    {
      "index": 131,
      "start_time": 655089.0,
      "end_time": 658670.0,
      "text": "and say, &quot;Hey, you didn’t answer my mail.&quot; I have to look in the mail and actually getting"
    },
    {
      "index": 132,
      "start_time": 658670.0,
      "end_time": 665980.0,
      "text": "work done. Okay. So to do this language, we had to have some principles on which is built."
    },
    {
      "index": 133,
      "start_time": 665980.0,
      "end_time": 669610.0,
      "text": "And there are actually some fundamental principles in here that in some ways, I think, differ"
    },
    {
      "index": 134,
      "start_time": 669610.0,
      "end_time": 672560.0,
      "text": "from some of the other languages out there, so I&#39;d like to go through them. One of them"
    },
    {
      "index": 135,
      "start_time": 672560.0,
      "end_time": 677529.0,
      "text": "is that we try as much as possible to keep the concepts orthogonal. For instance, in"
    },
    {
      "index": 136,
      "start_time": 677529.0,
      "end_time": 681980.0,
      "text": "the interface surface, I’ll talk about the concept of implementation versus interface"
    },
    {
      "index": 137,
      "start_time": 681980.0,
      "end_time": 685910.0,
      "text": "or completely orthogonal. They’re two separate things, they don’t interact and you don’t"
    },
    {
      "index": 138,
      "start_time": 685910.0,
      "end_time": 689939.0,
      "text": "define them together, you define them in separate objects and that makes a lot of stuff cleaner."
    },
    {
      "index": 139,
      "start_time": 689939.0,
      "end_time": 694230.0,
      "text": "And in practice, this is because a few orthogonal features that cover the space work a lot better"
    },
    {
      "index": 140,
      "start_time": 694230.0,
      "end_time": 698220.0,
      "text": "in practice than a lot of overlapping lines. That’s a principle that’s a little vague"
    },
    {
      "index": 141,
      "start_time": 698220.0,
      "end_time": 702779.0,
      "text": "but I think, I think you know what I’m getting at. The grammar is very regular and very simple."
    },
    {
      "index": 142,
      "start_time": 702779.0,
      "end_time": 706930.0,
      "text": "It’s actually conflict free and can be parsed without a symbol table, there’s no conflicts"
    },
    {
      "index": 143,
      "start_time": 706930.0,
      "end_time": 711620.0,
      "text": "in it. That makes it easier to write tools, like IDEs or editor plug-ins, and things like"
    },
    {
      "index": 144,
      "start_time": 711620.0,
      "end_time": 716269.0,
      "text": "that, debuggers because the parsing line is understanding and the program is actually"
    },
    {
      "index": 145,
      "start_time": 716269.0,
      "end_time": 721160.0,
      "text": "pretty straight forward. We try to reduce the typing. What I mean by that is that we"
    },
    {
      "index": 146,
      "start_time": 721160.0,
      "end_time": 726639.0,
      "text": "want the language to work things out. You tend to type too much when you’re programming"
    },
    {
      "index": 147,
      "start_time": 726639.0,
      "end_time": 730930.0,
      "text": "in modern object or in languages. You tend to write statements like that. That’s literal."
    },
    {
      "index": 148,
      "start_time": 730930.0,
      "end_time": 735490.0,
      "text": "If you change &quot;Foo&quot; for a much longer word, that’s an example I found in some code I"
    },
    {
      "index": 149,
      "start_time": 735490.0,
      "end_time": 740540.0,
      "text": "want to end. And I just, you know, &quot;Foo&quot; should just go away. You shouldn’t have to type"
    },
    {
      "index": 150,
      "start_time": 740540.0,
      "end_time": 744100.0,
      "text": "all those &quot;Foos,&quot; that’s crazy. So you want to get rid of the bookkeeping, you want the"
    },
    {
      "index": 151,
      "start_time": 744100.0,
      "end_time": 747779.0,
      "text": "type system to automatically works the &quot;Foo,&quot; but you still want to be safe. You want it--you"
    },
    {
      "index": 152,
      "start_time": 747779.0,
      "end_time": 753420.0,
      "text": "want it to be type-safe, but well handled. And also, not only you don&#39;t want to reduce"
    },
    {
      "index": 153,
      "start_time": 753420.0,
      "end_time": 761290.0,
      "text": "typing, you want to reduce typing. You want to type to sort of melt away into the background."
    },
    {
      "index": 154,
      "start_time": 761290.0,
      "end_time": 764249.0,
      "text": "You want it to be clear, you don’t want to type hierarchy, we don’t want to type"
    },
    {
      "index": 155,
      "start_time": 764249.0,
      "end_time": 768379.0,
      "text": "hierarchy, and then I&#39;ll show you some examples on why that actually helps. We just think"
    },
    {
      "index": 156,
      "start_time": 768379.0,
      "end_time": 773019.0,
      "text": "the program by constructing type hierarchies, is not the way to go. We have an alternate"
    },
    {
      "index": 157,
      "start_time": 773019.0,
      "end_time": 777980.0,
      "text": "world. However, Go is a profoundly object-oriented language. Arguably, more object-oriented language--more"
    },
    {
      "index": 158,
      "start_time": 777980.0,
      "end_time": 785129.0,
      "text": "object-oriented than, say, Java or C++, and I’ll show you why. So, the big picture,"
    },
    {
      "index": 159,
      "start_time": 785129.0,
      "end_time": 788810.0,
      "text": "there’s some fundamentals. We have a clean concise syntax. We have very lightweight type"
    },
    {
      "index": 160,
      "start_time": 788810.0,
      "end_time": 793259.0,
      "text": "system. We got rid of implicit conversions, because they’re all inconvenient. They tend"
    },
    {
      "index": 161,
      "start_time": 793259.0,
      "end_time": 797930.0,
      "text": "to cause a lot of confusion particularly in the old C rules for things like the, you know,"
    },
    {
      "index": 162,
      "start_time": 797930.0,
      "end_time": 802079.0,
      "text": "the usual conversions are actually not all that usual, and now these got right. So everything"
    },
    {
      "index": 163,
      "start_time": 802079.0,
      "end_time": 806889.0,
      "text": "is very clear and very clean on what’s going on in the page. Of course, when you know the"
    },
    {
      "index": 164,
      "start_time": 806889.0,
      "end_time": 811560.0,
      "text": "conversions, you tend to do a lot of casting or conversions by hand and that’s messy,"
    },
    {
      "index": 165,
      "start_time": 811560.0,
      "end_time": 814999.0,
      "text": "so we address that by changing constants pretty profoundly. I’ll talk about that in a little"
    },
    {
      "index": 166,
      "start_time": 814999.0,
      "end_time": 820180.0,
      "text": "bit. You&#39;ll never--you won’t see &quot;0x80ULL&quot; in a Go program. The ULL is completely pointless,"
    },
    {
      "index": 167,
      "start_time": 820180.0,
      "end_time": 824560.0,
      "text": "you can’t even say it, numbers are just numbers. And there’s a strict separation"
    },
    {
      "index": 168,
      "start_time": 824560.0,
      "end_time": 828060.0,
      "text": "between the interface and implementation. That’s part of keeping the concept orthogonal"
    },
    {
      "index": 169,
      "start_time": 828060.0,
      "end_time": 832759.0,
      "text": "and the type system clean. So there’s a runtime, there’s a garbage collection, there’s"
    },
    {
      "index": 170,
      "start_time": 832759.0,
      "end_time": 837529.0,
      "text": "a good support for strings, maps, associate raise, that kind of thing, and also the communication"
    },
    {
      "index": 171,
      "start_time": 837529.0,
      "end_time": 841249.0,
      "text": "channels, which we’ll talk about, and then there’s really strong support for concurrency."
    },
    {
      "index": 172,
      "start_time": 841249.0,
      "end_time": 845870.0,
      "text": "It’s actually some of the best concurrency stuff, I think, that’s out there. It&#39;s really"
    },
    {
      "index": 173,
      "start_time": 845870.0,
      "end_time": 849620.0,
      "text": "good. And then, there’s a package model, which I won’t talk very much about because"
    },
    {
      "index": 174,
      "start_time": 849620.0,
      "end_time": 854009.0,
      "text": "it’s kind of takes a lot of explaining. But the notion here is that inside the packages,"
    },
    {
      "index": 175,
      "start_time": 854009.0,
      "end_time": 858240.0,
      "text": "everything is explicit. What you depend on is explicit. Compiler rejects your program"
    },
    {
      "index": 176,
      "start_time": 858240.0,
      "end_time": 862889.0,
      "text": "if you put in the dependency you don’t need. It’s all very clean and so, it makes tools"
    },
    {
      "index": 177,
      "start_time": 862889.0,
      "end_time": 868249.0,
      "text": "easy to understand dependencies and then it makes the builds guaranteed minimal. So, that"
    },
    {
      "index": 178,
      "start_time": 868249.0,
      "end_time": 874990.0,
      "text": "helps enormously. Regarding the dependencies, the linking going faster, the compilation"
    },
    {
      "index": 179,
      "start_time": 874990.0,
      "end_time": 879160.0,
      "text": "can go faster but--and there’s actually a notion in here that I think is important."
    },
    {
      "index": 180,
      "start_time": 879160.0,
      "end_time": 884059.0,
      "text": "The compiler actually pulls the transitive dependency information up the tree as it’s"
    },
    {
      "index": 181,
      "start_time": 884059.0,
      "end_time": 888259.0,
      "text": "compiling, simply to reduce the number of files it has to look at, which in turn speeds"
    },
    {
      "index": 182,
      "start_time": 888259.0,
      "end_time": 893499.0,
      "text": "up the compilation process. So, if you have a program, A.go, that depends on B.go that"
    },
    {
      "index": 183,
      "start_time": 893499.0,
      "end_time": 897649.0,
      "text": "depends on C.go, which is pretty standard kind of thing. You--in the usual way, you"
    },
    {
      "index": 184,
      "start_time": 897649.0,
      "end_time": 900839.0,
      "text": "have to compile them in reverse order, because you got to build the dependent stuff before"
    },
    {
      "index": 185,
      "start_time": 900839.0,
      "end_time": 905709.0,
      "text": "the depending stuff. But the point is when you go to compile, A.go, it doesn’t need"
    },
    {
      "index": 186,
      "start_time": 905709.0,
      "end_time": 910600.0,
      "text": "to compile C. It doesn’t need to look at C.go at all. It doesn’t even need to look"
    },
    {
      "index": 187,
      "start_time": 910600.0,
      "end_time": 915720.0,
      "text": "at the object code for C, because everything that B need from C has already been pulled"
    },
    {
      "index": 188,
      "start_time": 915720.0,
      "end_time": 921069.0,
      "text": "up into B.go. And that doesn’t sound like a big deal, but when you’re at scale, it’s,"
    },
    {
      "index": 189,
      "start_time": 921069.0,
      "end_time": 927800.0,
      "text": "literally, exponentially faster at building software when you get in to this huge dependents"
    },
    {
      "index": 190,
      "start_time": 927800.0,
      "end_time": 932389.0,
      "text": "situation. For concurrency, we sort of have a model. I’ll touch on it today. There’s"
    },
    {
      "index": 191,
      "start_time": 932389.0,
      "end_time": 937059.0,
      "text": "a lot more stuff online about it. But we have a suggestion for how to write systems and"
    },
    {
      "index": 192,
      "start_time": 937059.0,
      "end_time": 942059.0,
      "text": "servers as concurrent garbage-collected processes, which we called, goroutines. We’ll have"
    },
    {
      "index": 193,
      "start_time": 942059.0,
      "end_time": 945999.0,
      "text": "good support from the language and the run-time. We change the name because they&#39;re slightly"
    },
    {
      "index": 194,
      "start_time": 945999.0,
      "end_time": 949749.0,
      "text": "different from what you&#39;re used to. If you use the words like thread or process or goroutine,"
    },
    {
      "index": 195,
      "start_time": 949749.0,
      "end_time": 953759.0,
      "text": "that’s not quite the same, so we have our own word, goroutine. The language takes care"
    },
    {
      "index": 196,
      "start_time": 953759.0,
      "end_time": 957249.0,
      "text": "of managing the goroutines and managing the memory that they use and the communication"
    },
    {
      "index": 197,
      "start_time": 957249.0,
      "end_time": 962540.0,
      "text": "between them. Stacks grow automatically. That’s taken care of by the language. You don&#39;t have"
    },
    {
      "index": 198,
      "start_time": 962540.0,
      "end_time": 966300.0,
      "text": "to declare how big the stack is going to be. If it needs a bigger stack, it gets the bigger"
    },
    {
      "index": 199,
      "start_time": 966300.0,
      "end_time": 971389.0,
      "text": "stack. If it needs a smaller stack, it uses less memory. And those stacks are multiple--I’m"
    },
    {
      "index": 200,
      "start_time": 971389.0,
      "end_time": 974339.0,
      "text": "sorry, the goroutines are then multiplexed on the threads. That’s all done automatically"
    },
    {
      "index": 201,
      "start_time": 974339.0,
      "end_time": 979689.0,
      "text": "for you and [INDISTINCT] transparently. And, one of the feature--one of the reasons for"
    },
    {
      "index": 202,
      "start_time": 979689.0,
      "end_time": 983649.0,
      "text": "needing garbage collection is that concurrent programming is very hard without garbage collection,"
    },
    {
      "index": 203,
      "start_time": 983649.0,
      "end_time": 987449.0,
      "text": "because as you hand items around between this concurrent things, who owns the memory? Whose"
    },
    {
      "index": 204,
      "start_time": 987449.0,
      "end_time": 992339.0,
      "text": "job is it to free it? And there’s a lot of bookkeeping involved that the--if the language"
    },
    {
      "index": 205,
      "start_time": 992339.0,
      "end_time": 996230.0,
      "text": "or the system doesn’t take care of that for you. So you need garbage collection to"
    },
    {
      "index": 206,
      "start_time": 996230.0,
      "end_time": 1000119.0,
      "text": "make concurrency work well. On the other hand, you need--to get the garbage collection to"
    },
    {
      "index": 207,
      "start_time": 1000120.0,
      "end_time": 1002900.0,
      "text": "work well, you need a language that makes garbage collection a feasible thing to do,"
    },
    {
      "index": 208,
      "start_time": 1002900.0,
      "end_time": 1008051.0,
      "text": "which is another argument for doing a new language. So, I don’t have time to explain"
    },
    {
      "index": 209,
      "start_time": 1008050.0,
      "end_time": 1013430.0,
      "text": "all of Go to you. It’s a significant language, it’s--I’d say probably bigger than C but"
    },
    {
      "index": 210,
      "start_time": 1013430.0,
      "end_time": 1017249.0,
      "text": "not as big as C++. Enough time to go through all of it, but I want to give you the flavors."
    },
    {
      "index": 211,
      "start_time": 1017250.0,
      "end_time": 1022380.0,
      "text": "I’m going to go through about a dozen slides that are--I hope sort of representative of"
    },
    {
      "index": 212,
      "start_time": 1022380.0,
      "end_time": 1027741.0,
      "text": "the kinds of things that go on, but I’m going to leave out quite a bit. Lexically,"
    },
    {
      "index": 213,
      "start_time": 1027740.0,
      "end_time": 1034160.0,
      "text": "it looks a little bit like C, actually a little more than like C than this slide, we let you"
    },
    {
      "index": 214,
      "start_time": 1034160.0000000001,
      "end_time": 1039260.0000000001,
      "text": "believe. There’s usually a keywords involved, introducing things, you see const and var."
    },
    {
      "index": 215,
      "start_time": 1039260.0,
      "end_time": 1042459.0,
      "text": "Const, that means it’s a constant, not--it’s not the const keyword from C, it’s completely"
    },
    {
      "index": 216,
      "start_time": 1042460.0,
      "end_time": 1047231.0,
      "text": "different meaning. It just means, in the first line there, N is a constant 1024. And it’s"
    },
    {
      "index": 217,
      "start_time": 1047230.0,
      "end_time": 1051429.0,
      "text": "just a number, it’s not an int, it’s not a float, it’s not an unsigned int, it’s"
    },
    {
      "index": 218,
      "start_time": 1051430.0,
      "end_time": 1055451.0,
      "text": "just a number. And there’s a const string and you can see we support Unicode just fine."
    },
    {
      "index": 219,
      "start_time": 1055450.0,
      "end_time": 1060510.0,
      "text": "In fact, the language requires that the input be UTF-8 encoded. And then, you can declare"
    },
    {
      "index": 220,
      "start_time": 1060510.0,
      "end_time": 1065840.0,
      "text": "variables with the &quot;var&quot; keyword in the usual way. You’ll notice--I’m quite use to it"
    },
    {
      "index": 221,
      "start_time": 1065840.0,
      "end_time": 1069570.0,
      "text": "now, but for C programmers this looks backwards, because in C, you put the float before the"
    },
    {
      "index": 222,
      "start_time": 1069570.0,
      "end_time": 1073980.0,
      "text": "X and the Y, but they&#39;re reversed and there’s a long explanation on the web about why we"
    },
    {
      "index": 223,
      "start_time": 1073980.0,
      "end_time": 1079020.0,
      "text": "did this. But the fundamental reason is it actually has been cleaner because, for instance,"
    },
    {
      "index": 224,
      "start_time": 1079020.0,
      "end_time": 1083500.0,
      "text": "in that declaration, X and Y both have type float. Whereas, if flip it around put the"
    },
    {
      "index": 225,
      "start_time": 1083500.0,
      "end_time": 1088240.0,
      "text": "keyword first, things get a little funnier. And you can see what the C version of that"
    },
    {
      "index": 226,
      "start_time": 1088240.0,
      "end_time": 1093250.0,
      "text": "will look like. You&#39;d have to reproduce the star. So this is simplification you get. There’s"
    },
    {
      "index": 227,
      "start_time": 1093250.0,
      "end_time": 1097549.0,
      "text": "characters, Unicode supports, and stuff like that. Then we in this example, was not really"
    },
    {
      "index": 228,
      "start_time": 1097550.0,
      "end_time": 1102711.0,
      "text": "an example, just some lines of code, there’s a type struct, T, that&#39;s defined. It&#39;s got"
    },
    {
      "index": 229,
      "start_time": 1102710.0,
      "end_time": 1108070.0,
      "text": "a couple of fields within if they&#39;re both integers. Then we declare a variable, t0,"
    },
    {
      "index": 230,
      "start_time": 1108070.0,
      "end_time": 1112929.0,
      "text": "which is a new T. That should be pretty familiar what that means. But there’s too much typing"
    },
    {
      "index": 231,
      "start_time": 1112930.0,
      "end_time": 1118680.0,
      "text": "going on there. So the next line there, T1 := new(T), that’s an old notation from some"
    },
    {
      "index": 232,
      "start_time": 1118680.0,
      "end_time": 1124011.0,
      "text": "languages that I work with before. What that call and equals means is declaring the initialized."
    },
    {
      "index": 233,
      "start_time": 1124010.0,
      "end_time": 1130090.0,
      "text": "So that--those two lines are equivalent. Var t0 *T = new(T), it has too many Ts in it."
    },
    {
      "index": 234,
      "start_time": 1130090.0,
      "end_time": 1134919.0,
      "text": "We can get rid one of them by just having the type of t1 we derive from the expression"
    },
    {
      "index": 235,
      "start_time": 1134920.0,
      "end_time": 1139351.0,
      "text": "that’s used to declare and initialize it. And you’ll see that used a lot in Go code."
    },
    {
      "index": 236,
      "start_time": 1139350.0,
      "end_time": 1144799.0,
      "text": "The var doesn’t show up nearly as much as the colon equals notation. Their control structure"
    },
    {
      "index": 237,
      "start_time": 1144800.0,
      "end_time": 1149560.0,
      "text": "is they&#39;re actually quite interesting control structures--just the first blast through,"
    },
    {
      "index": 238,
      "start_time": 1149560.0,
      "end_time": 1153871.0,
      "text": "pretty the same as C. They’re actually quite richer, but the basics are the same. The main"
    },
    {
      "index": 239,
      "start_time": 1153870.0,
      "end_time": 1158789.0,
      "text": "difference is syntactic. The braces are required on the blocks and there’s no parenthesis"
    },
    {
      "index": 240,
      "start_time": 1158790.0,
      "end_time": 1163081.0,
      "text": "on, for instance, the conditional expression inside an &quot;if&quot; statement. That&#39;s just to clean"
    },
    {
      "index": 241,
      "start_time": 1163080.0,
      "end_time": 1168000.0,
      "text": "up the grammar. So here’s a real program. It’s not &quot;hello, world,&quot; it&#39;s echo this"
    },
    {
      "index": 242,
      "start_time": 1168000.0,
      "end_time": 1172980.0,
      "text": "time, but it’s got all the parts. The first time the code says, &quot;package main,&quot; that has"
    },
    {
      "index": 243,
      "start_time": 1172980.0,
      "end_time": 1176770.0,
      "text": "some meaning in the language about me get muted. We&#39;re thinking about simplifying a"
    },
    {
      "index": 244,
      "start_time": 1176770.0,
      "end_time": 1179960.0,
      "text": "few things but at least for the moment it&#39;s &quot;package main.&quot; then you can see there&#39;s a"
    },
    {
      "index": 245,
      "start_time": 1179960.0,
      "end_time": 1184179.0,
      "text": "function called &quot;main&quot; is declared down below. And the program begins execution by starting"
    },
    {
      "index": 246,
      "start_time": 1184180.0,
      "end_time": 1190261.0,
      "text": "&quot;main.main&quot; initialization inside. There’s a declaration of the flag from the flag’s"
    },
    {
      "index": 247,
      "start_time": 1190260.0,
      "end_time": 1195190.0,
      "text": "package, so that makes minus N, turn off new lines from echo. It’s not strictly a UNIX"
    },
    {
      "index": 248,
      "start_time": 1195190.0,
      "end_time": 1199010.0,
      "text": "echo because it’s got real flag parsing, but it’s essentially the same. Those import"
    },
    {
      "index": 249,
      "start_time": 1199010.0,
      "end_time": 1202880.0,
      "text": "statements say, &quot;We’re going to use package OS,&quot; which does some stuff for us and we’re"
    },
    {
      "index": 250,
      "start_time": 1202880.0,
      "end_time": 1206730.0,
      "text": "going to use the flag package, obviously. Now, the way the initialization stuff works"
    },
    {
      "index": 251,
      "start_time": 1206730.0,
      "end_time": 1211820.0,
      "text": "is that in-flag variable will be initialized before &quot;main&quot; starts executing. All the global"
    },
    {
      "index": 252,
      "start_time": 1211820.0,
      "end_time": 1216570.0,
      "text": "variables get initialized by--and they can be initialized by arbitrary complex stuff"
    },
    {
      "index": 253,
      "start_time": 1216570.0,
      "end_time": 1221330.0,
      "text": "before &quot;main&quot; starts. So then in &quot;main,&quot; we do the flag parts that get the command line"
    },
    {
      "index": 254,
      "start_time": 1221330.0,
      "end_time": 1225679.0,
      "text": "pulled apart. And then we just loop over the arguments which are now the [INDISTINCT] the"
    },
    {
      "index": 255,
      "start_time": 1225680.0,
      "end_time": 1230060.0,
      "text": "flag package, and it’s the obvious loop accumulating. You can see += on the string"
    },
    {
      "index": 256,
      "start_time": 1230060.0,
      "end_time": 1236310.0,
      "text": "there to append to the string, and stuff like that. And then at the bottom, the flags are"
    },
    {
      "index": 257,
      "start_time": 1236310.0,
      "end_time": 1241621.0,
      "text": "actually pointers in Go, the flag package makes them pointers. So the *nFlag, which"
    },
    {
      "index": 258,
      "start_time": 1241620.0,
      "end_time": 1246970.0,
      "text": "is a Boolean, is false. Then, you add a new line to the end of it. And then finally, you"
    },
    {
      "index": 259,
      "start_time": 1246970.0,
      "end_time": 1252809.0,
      "text": "do a method called &quot;os.Stdout&quot; to get the open-up. So, although, pretty much every line"
    },
    {
      "index": 260,
      "start_time": 1252810.0,
      "end_time": 1257670.0,
      "text": "in here is different from what you’ve seen before, it should be perfect and clear what’s"
    },
    {
      "index": 261,
      "start_time": 1257670.0,
      "end_time": 1261951.0,
      "text": "going on. I don’t think you’ll find that a mysterious program. So let’s talk about"
    },
    {
      "index": 262,
      "start_time": 1261950.0,
      "end_time": 1267960.0,
      "text": "constants. I said they are a little different. Constants in Go are what we like to think"
    },
    {
      "index": 263,
      "start_time": 1267960.0,
      "end_time": 1271169.0,
      "text": "of as sort of type-less. They have no type. They have no size. They’re just numbers"
    },
    {
      "index": 264,
      "start_time": 1271170.0,
      "end_time": 1274430.0,
      "text": "or strings. You can have constants and strings in Booleans, but numbers are the interesting"
    },
    {
      "index": 265,
      "start_time": 1274430.0,
      "end_time": 1279701.0,
      "text": "case. So in this little snippet here, is just some constants being used. We start by defining"
    },
    {
      "index": 266,
      "start_time": 1279700.0,
      "end_time": 1287299.0,
      "text": "a type TZ for timeZone, which is an integer. And then, we declare some constants, UTC and"
    },
    {
      "index": 267,
      "start_time": 1287300.0,
      "end_time": 1293351.0,
      "text": "EST. We declare them to have type TZ and assigned to those initial values. You can clear what’s"
    },
    {
      "index": 268,
      "start_time": 1293350.0,
      "end_time": 1298720.0,
      "text": "going on there. The parenthesis around the const is distributing the const declaration"
    },
    {
      "index": 269,
      "start_time": 1298720.0,
      "end_time": 1304059.0,
      "text": "introducing keyword across the elements inside that declaration. So that’s the same as"
    },
    {
      "index": 270,
      "start_time": 1304060.0,
      "end_time": 1310060.0,
      "text": "saying, &quot;Two const declarations with the two variables in them.&quot; You’ll see later on"
    },
    {
      "index": 271,
      "start_time": 1310060.0,
      "end_time": 1314071.0,
      "text": "the next page here that actually matters that you can group them like this, because there’s"
    },
    {
      "index": 272,
      "start_time": 1314070.0,
      "end_time": 1319470.0,
      "text": "a thing called iota, which is an enumerating constant. It literally--for each const declaration,"
    },
    {
      "index": 273,
      "start_time": 1319470.0,
      "end_time": 1325120.0,
      "text": "counts which element you’re on. At every semicolon, it increments. Starts at zero on"
    },
    {
      "index": 274,
      "start_time": 1325120.0,
      "end_time": 1329330.0,
      "text": "the next line, it&#39;s one, the next line is two. And so, here you can see, we’re declaring"
    },
    {
      "index": 275,
      "start_time": 1329330.0,
      "end_time": 1335649.0,
      "text": "bit0 and mask0 to be uint32s, and the first one is set to one shifted up iota. Iota starts"
    },
    {
      "index": 276,
      "start_time": 1335650.0,
      "end_time": 1340821.0,
      "text": "at zero in every const. So that’s one shifted up zero and one shift zero minus one. So that’s"
    },
    {
      "index": 277,
      "start_time": 1340820.0,
      "end_time": 1344610.0,
      "text": "a bit and a mask. And then the next line does it again, but now iota has gone up to one."
    },
    {
      "index": 278,
      "start_time": 1344610.0,
      "end_time": 1347860.0,
      "text": "So we get the next guy in the sequence. You can see how to use that to build enumerated"
    },
    {
      "index": 279,
      "start_time": 1347860.0,
      "end_time": 1354019.0,
      "text": "constants but this is a slightly richer example. And again, to reduce typing, if you want,"
    },
    {
      "index": 280,
      "start_time": 1354020.0,
      "end_time": 1359001.0,
      "text": "you can just say, declaration, like the third line there with the semicolon and what that"
    },
    {
      "index": 281,
      "start_time": 1359000.0,
      "end_time": 1363450.0,
      "text": "says is, &quot;Just keep doing what I did.&quot; Take the declaration initializer from the previous"
    },
    {
      "index": 282,
      "start_time": 1363450.0,
      "end_time": 1367059.0,
      "text": "line then pretend that you just type that here. And so, if you want to declare a new"
    },
    {
      "index": 283,
      "start_time": 1367060.0,
      "end_time": 1373751.0,
      "text": "ready constant, you can say, const open parenthesis inum0 equals iota semicolon and then you just"
    },
    {
      "index": 284,
      "start_time": 1373750.0,
      "end_time": 1376990.0,
      "text": "go inum1 semicolon, inum2 semicolon and all the way down the page. And just have them"
    },
    {
      "index": 285,
      "start_time": 1376990.0,
      "end_time": 1384659.0,
      "text": "declare sequential numbers for their constants. One very important properties of these numeric"
    },
    {
      "index": 286,
      "start_time": 1384660.0,
      "end_time": 1390831.0,
      "text": "constants in Go, is it there are arbitrary precision. So, here’s a const, the logarithm"
    },
    {
      "index": 287,
      "start_time": 1390830.0,
      "end_time": 1396460.0,
      "text": "of 2, you can see that’s got like 40 or 50 decimal places in it, which is more than"
    },
    {
      "index": 288,
      "start_time": 1396460.0,
      "end_time": 1403049.0,
      "text": "even a float 64 can represent. But that’s a valid declaration, because they’re just"
    },
    {
      "index": 289,
      "start_time": 1403050.0,
      "end_time": 1409790.0,
      "text": "numbers. And then the next line, we can actually compute log2, log base 2 of E as one over"
    },
    {
      "index": 290,
      "start_time": 1409790.0,
      "end_time": 1415310.0,
      "text": "log of 2, and that’s a precise division because it’s happening not in floating point"
    },
    {
      "index": 291,
      "start_time": 1415310.0,
      "end_time": 1420501.0,
      "text": "space but in arbitrary number precision space. So that’s a very accurate reciprocal. And"
    },
    {
      "index": 292,
      "start_time": 1420500.0,
      "end_time": 1423330.0,
      "text": "that kind of stuff is nice too, because you don’t see cache and conversions and worries"
    },
    {
      "index": 293,
      "start_time": 1423330.0,
      "end_time": 1429179.0,
      "text": "about overflows and underflows. Constants just take the job for you. And then we have"
    },
    {
      "index": 294,
      "start_time": 1429180.0,
      "end_time": 1434520.0,
      "text": "values, obviously. There’s an array like type called the slice. Those are arrays but"
    },
    {
      "index": 295,
      "start_time": 1434520.0,
      "end_time": 1438331.0,
      "text": "they’re kind of peculiar. You don’t use them much. Instead, use a reference type called"
    },
    {
      "index": 296,
      "start_time": 1438330.0,
      "end_time": 1442880.0,
      "text": "the slice. So we can there, is declared to be a slice of strings with Saturday and Sunday"
    },
    {
      "index": 297,
      "start_time": 1442880.0,
      "end_time": 1449039.0,
      "text": "as strings declared inside it. And then we take the timeZones and make declare timeZones"
    },
    {
      "index": 298,
      "start_time": 1449040.0,
      "end_time": 1454680.0,
      "text": "map to be a map from a string to TZ or timeZone. And you can see how that works. It’s pretty"
    },
    {
      "index": 299,
      "start_time": 1454680.0,
      "end_time": 1460091.0,
      "text": "straightforward. There’s a function declaration to do an &quot;add.&quot; You can see the function syntax"
    },
    {
      "index": 300,
      "start_time": 1460090.0,
      "end_time": 1463960.0,
      "text": "there. There’s actually a lot of interesting things in how functions deal with return values,"
    },
    {
      "index": 301,
      "start_time": 1463960.0,
      "end_time": 1468220.0,
      "text": "which I’m not going to talk about today, but you should check that out. And then, there’s"
    },
    {
      "index": 302,
      "start_time": 1468220.0,
      "end_time": 1472659.0,
      "text": "a declaration of function type which takes two integers return int, so &quot;add&quot; is of type"
    },
    {
      "index": 303,
      "start_time": 1472660.0,
      "end_time": 1478180.0,
      "text": "Op. And then, here we declare an RPC, which is a structure. I showed that before but it&#39;s"
    },
    {
      "index": 304,
      "start_time": 1478180.0,
      "end_time": 1482591.0,
      "text": "a [INDISTINCT] example. It’s got A and B integers. It’s got an operator, and it’s"
    },
    {
      "index": 305,
      "start_time": 1482590.0,
      "end_time": 1486510.0,
      "text": "got a result which is a pointer to an integer. And all that should be fairly straightforward"
    },
    {
      "index": 306,
      "start_time": 1486510.0,
      "end_time": 1491260.0,
      "text": "even if the declarations look backwards to a C programmer. And then the last line there,"
    },
    {
      "index": 307,
      "start_time": 1491260.0,
      "end_time": 1496590.0,
      "text": "we declare using a structure literal, an instance of an RPC and again, it’s very simple. You"
    },
    {
      "index": 308,
      "start_time": 1496590.0,
      "end_time": 1500850.0,
      "text": "just say type name, open brace, list the elements of the structure, closing brace and then you"
    },
    {
      "index": 309,
      "start_time": 1500850.0,
      "end_time": 1509330.0,
      "text": "got a value, you can assign that to or in this case, initialize a new variable to that"
    },
    {
      "index": 310,
      "start_time": 1509330.0,
      "end_time": 1511909.0,
      "text": "value. So, I said [INDISTINCT] language. We haven’t seen much yet, there was actually"
    },
    {
      "index": 311,
      "start_time": 1511910.0,
      "end_time": 1517131.0,
      "text": "one and the other is a method in the echo example where we wrote the os.Stdout. But"
    },
    {
      "index": 312,
      "start_time": 1517130.0,
      "end_time": 1521649.0,
      "text": "let’s talk about methods, because they’re kind of different. So here’s a type called"
    },
    {
      "index": 313,
      "start_time": 1521650.0,
      "end_time": 1528020.0,
      "text": "point that has X and Y. Now, those are upper case and the reason is, in Go, the complete"
    },
    {
      "index": 314,
      "start_time": 1528020.0,
      "end_time": 1532180.0,
      "text": "decision about whether an identifier is visible outside the package or not, is whether or"
    },
    {
      "index": 315,
      "start_time": 1532180.0,
      "end_time": 1538050.0,
      "text": "not it starts with an uppercase Unicode letter. That’s it. So if a variable or a type or"
    },
    {
      "index": 316,
      "start_time": 1538050.0,
      "end_time": 1541761.0,
      "text": "whatever declared at the top level is uppercase, is visible to the clients of the package."
    },
    {
      "index": 317,
      "start_time": 1541760.0,
      "end_time": 1547789.0,
      "text": "If it’s lower case, it’s not. Inside the global struct, if a method or field is uppercase,"
    },
    {
      "index": 318,
      "start_time": 1547790.0,
      "end_time": 1551550.0,
      "text": "it’s visible to the clients of the package, otherwise, it’s not. That’s it. It’s"
    },
    {
      "index": 319,
      "start_time": 1551550.0,
      "end_time": 1556071.0,
      "text": "really simple. So, there’s that type. Now, we’re going to define a couple of methods"
    },
    {
      "index": 320,
      "start_time": 1556070.0,
      "end_time": 1561970.0,
      "text": "on it. The declaration syntax for a method, you’ll notice it’s not declared inside"
    },
    {
      "index": 321,
      "start_time": 1561970.0,
      "end_time": 1567010.0,
      "text": "the struct, and the reason, we&#39;ll see in a minute, is a method and structs are independent"
    },
    {
      "index": 322,
      "start_time": 1567010.0,
      "end_time": 1572100.0,
      "text": "ideas. You can have methods on things other than structs, so it wouldn’t make sense"
    },
    {
      "index": 323,
      "start_time": 1572100.0,
      "end_time": 1576090.0,
      "text": "if you put them inside the struct declaration. What you do is you say, &quot;Here’s a func.&quot;"
    },
    {
      "index": 324,
      "start_time": 1576090.0,
      "end_time": 1580360.0,
      "text": "And then before the name of the method, you write a parenthesis, kind of like its own"
    },
    {
      "index": 325,
      "start_time": 1580360.0,
      "end_time": 1585250.0,
      "text": "little one element parameter list, receive a declaration and receiver is a short hand"
    },
    {
      "index": 326,
      "start_time": 1585250.0,
      "end_time": 1589399.0,
      "text": "for the thing that’s receiving the method when it’s called. So this says, that scale"
    },
    {
      "index": 327,
      "start_time": 1589400.0,
      "end_time": 1594780.0,
      "text": "is a method of type star point and it takes a float argument and then the implementation"
    },
    {
      "index": 328,
      "start_time": 1594780.0,
      "end_time": 1599851.0,
      "text": "is inside and it’s just multiplies up the point by the usual, by the scale factor. You’ll"
    },
    {
      "index": 329,
      "start_time": 1599850.0,
      "end_time": 1603950.0,
      "text": "notice that the receiver is explicit. There’s no this, automatic or anything like that."
    },
    {
      "index": 330,
      "start_time": 1603950.0,
      "end_time": 1607210.0,
      "text": "You have to actually say, declare receiver and use it if you need to access the fields"
    },
    {
      "index": 331,
      "start_time": 1607210.0,
      "end_time": 1611730.0,
      "text": "of the struct inside the method. And then there’s Abs, you can imagine what that is."
    },
    {
      "index": 332,
      "start_time": 1611730.0,
      "end_time": 1616799.0,
      "text": "There’s a square root, which is a function inside the math package computing the hypotenuse"
    },
    {
      "index": 333,
      "start_time": 1616800.0,
      "end_time": 1624511.0,
      "text": "of the point of the [INDISTINCT] of the vector. And then here’s--we declare an X. Now, this"
    },
    {
      "index": 334,
      "start_time": 1624510.0,
      "end_time": 1628730.0,
      "text": "time you notice there’s an ampersand before the point, word there. Point of three, four"
    },
    {
      "index": 335,
      "start_time": 1628730.0,
      "end_time": 1634019.0,
      "text": "is a value. Ampersand of point of three, four allocates. It’s like a constructor like"
    },
    {
      "index": 336,
      "start_time": 1634020.0,
      "end_time": 1638501.0,
      "text": "thing to create a pointer to a new instance of that. And that--every time you execute"
    },
    {
      "index": 337,
      "start_time": 1638500.0,
      "end_time": 1643330.0,
      "text": "that, you get a new instance of point that initializes the three, four. Then, you can"
    },
    {
      "index": 338,
      "start_time": 1643330.0,
      "end_time": 1646940.0,
      "text": "call x.Scale, which is assumed you&#39;d expect to be able to do. Okay. So that’s pretty"
    },
    {
      "index": 339,
      "start_time": 1646940.0,
      "end_time": 1652200.0,
      "text": "simple. The syntax is slightly different, but the ideas are pretty simple. Now, it gets"
    },
    {
      "index": 340,
      "start_time": 1652200.0,
      "end_time": 1657809.0,
      "text": "more interesting because methods on any type you define. And here’s a full example, this"
    },
    {
      "index": 341,
      "start_time": 1657810.0,
      "end_time": 1661920.0,
      "text": "is another complete program that actually does something a little different. So again,"
    },
    {
      "index": 342,
      "start_time": 1661920.0,
      "end_time": 1666071.0,
      "text": "we start with package main and now we import fmt, which is the formative printing package."
    },
    {
      "index": 343,
      "start_time": 1666070.0,
      "end_time": 1671039.0,
      "text": "It has printf and stuff like that in it. And then, here’s our type TZ int coming back."
    },
    {
      "index": 344,
      "start_time": 1671040.0,
      "end_time": 1675650.0,
      "text": "And now, we declare few more of these constants, we have an Hour which is of type TZ, which"
    },
    {
      "index": 345,
      "start_time": 1675650.0,
      "end_time": 1681001.0,
      "text": "is 60 minutes times 60 seconds. And then we declared, just to make it short, two timeZones:"
    },
    {
      "index": 346,
      "start_time": 1681000.0,
      "end_time": 1687950.0,
      "text": "Zero hours and minus five hours for UTZ and EST, okay? Now, we declare a map from the"
    },
    {
      "index": 347,
      "start_time": 1687950.0,
      "end_time": 1692389.0,
      "text": "names to the values of those timeZones. That should be familiar in the timeZones. We actually"
    },
    {
      "index": 348,
      "start_time": 1692390.0,
      "end_time": 1697881.0,
      "text": "have that exact the same example before. And now, we put a method on a timeZone. Now, timeZone"
    },
    {
      "index": 349,
      "start_time": 1697880.0,
      "end_time": 1702380.0,
      "text": "is just an int, but I’m going to put a method on it. So, I declare a function called capital"
    },
    {
      "index": 350,
      "start_time": 1702380.0,
      "end_time": 1708929.0,
      "text": "string that returns a string to receive tz, lower case, plus a type TZ, upper case. Notice"
    },
    {
      "index": 351,
      "start_time": 1708930.0,
      "end_time": 1711920.0,
      "text": "that it’s not a pointer, that’s really important. It doesn’t have to be a pointer."
    },
    {
      "index": 352,
      "start_time": 1711920.0,
      "end_time": 1717290.0,
      "text": "And then, using a variant of the for-loop that&#39;s arranged over the elements of a collection,"
    },
    {
      "index": 353,
      "start_time": 1717290.0,
      "end_time": 1723241.0,
      "text": "I say name comma zone is range of timeZones. What I’m looking for is the element of the"
    },
    {
      "index": 354,
      "start_time": 1723240.0,
      "end_time": 1728399.0,
      "text": "timeZone map whose value is equal to the value of TZ. That’s the name of the guy I want."
    },
    {
      "index": 355,
      "start_time": 1728400.0,
      "end_time": 1732331.0,
      "text": "So it’s like reversing the map. So I just loop over all the elements looking for the"
    },
    {
      "index": 356,
      "start_time": 1732330.0,
      "end_time": 1737090.0,
      "text": "one whose timeZone is equal to the zone of that element of the map and if that’s true"
    },
    {
      "index": 357,
      "start_time": 1737090.0,
      "end_time": 1740149.0,
      "text": "I return the name. And you can see there’s actually quite a bit going on in there. There’s"
    },
    {
      "index": 358,
      "start_time": 1740150.0,
      "end_time": 1743711.0,
      "text": "the range which is giving you the iterator, there’s a cone [PH] equals to declare loop"
    },
    {
      "index": 359,
      "start_time": 1743710.0,
      "end_time": 1747570.0,
      "text": "variables that work over the elements and thing inside in and all not. But of course"
    },
    {
      "index": 360,
      "start_time": 1747570.0,
      "end_time": 1753139.0,
      "text": "you might get a value of the--of TZ integer that’s not an exact timeZone number. And"
    },
    {
      "index": 361,
      "start_time": 1753140.0,
      "end_time": 1761851.0,
      "text": "so, if that happens, we finish the loop and we return fmt.Sprintf of blah-blah. An Sprintf"
    },
    {
      "index": 362,
      "start_time": 1761850.0,
      "end_time": 1765779.0,
      "text": "is analogous to the standard C as printf, but actually returns a new string. It doesn’t"
    },
    {
      "index": 363,
      "start_time": 1765780.0,
      "end_time": 1769991.0,
      "text": "put into a buffer. So, that’s an implementation of a method that let’s you print timeZones"
    },
    {
      "index": 364,
      "start_time": 1769990.0,
      "end_time": 1777269.0,
      "text": "in interesting ways. So we can use it in our main function by saying, if we just say, fmt.Println"
    },
    {
      "index": 365,
      "start_time": 1777270.0,
      "end_time": 1782131.0,
      "text": "of EST, Println is a variant of print that doesn’t require a format. It’ll work."
    },
    {
      "index": 366,
      "start_time": 1782130.0,
      "end_time": 1787360.0,
      "text": "It’ll actually printout EST by catching it in the inner loop of the string method."
    },
    {
      "index": 367,
      "start_time": 1787360.0,
      "end_time": 1793529.0,
      "text": "And notice that Println(EST) knows under the covers by mechanisms that are described the"
    },
    {
      "index": 368,
      "start_time": 1793530.0,
      "end_time": 1800131.0,
      "text": "length and the website, how that the timeZone type has a string method and that’s how"
    },
    {
      "index": 369,
      "start_time": 1800130.0,
      "end_time": 1803289.0,
      "text": "you should pretty print it if you get a value of that type. So, that’s all you need to"
    },
    {
      "index": 370,
      "start_time": 1803290.0,
      "end_time": 1808170.0,
      "text": "do to make it print itself. And then, there’s another example, we can print Println five"
    },
    {
      "index": 371,
      "start_time": 1808170.0,
      "end_time": 1812201.0,
      "text": "times hour over two and it comes out as plus two colon thirty, because the printf at the"
    },
    {
      "index": 372,
      "start_time": 1812200.0,
      "end_time": 1816259.0,
      "text": "bottom works. So this is a fairly contrive example, but you can see to there’s a [INDISTINCT]"
    },
    {
      "index": 373,
      "start_time": 1816260.0,
      "end_time": 1820741.0,
      "text": "going on here. Having methods on general types, as any small talk programmer will know, a"
    },
    {
      "index": 374,
      "start_time": 1820740.0,
      "end_time": 1825100.0,
      "text": "very convenient thing to do. But by separating them methods away from structural classes,"
    },
    {
      "index": 375,
      "start_time": 1825100.0,
      "end_time": 1829630.0,
      "text": "we actually introduce some new ideas that you can play with and that’s pretty fun."
    },
    {
      "index": 376,
      "start_time": 1829630.0,
      "end_time": 1835419.0,
      "text": "Okay. So now, we come to something that I will not be able to describe in full in the"
    },
    {
      "index": 377,
      "start_time": 1835420.0,
      "end_time": 1839550.0,
      "text": "time available, but they are pretty interesting and they are arguably the most noble about"
    },
    {
      "index": 378,
      "start_time": 1839550.0,
      "end_time": 1848591.0,
      "text": "Go, and that is the concept of an Interface. An Interface is an, what’s the word, a formalization"
    },
    {
      "index": 379,
      "start_time": 1848590.0,
      "end_time": 1854740.0,
      "text": "of the concept of a set of methods. So, we can declare a method, sorry, an interface"
    },
    {
      "index": 380,
      "start_time": 1854740.0,
      "end_time": 1859929.0,
      "text": "type Magnitude and say that anything that implements the Magnitude interface is something"
    },
    {
      "index": 381,
      "start_time": 1859930.0,
      "end_time": 1863961.0,
      "text": "that implements the Abs method that returns a float. And of course there could be lots"
    },
    {
      "index": 382,
      "start_time": 1863960.0,
      "end_time": 1867899.0,
      "text": "of other things in there, but we’ll assume for the moment there’s just one. So, remember"
    },
    {
      "index": 383,
      "start_time": 1867900.0,
      "end_time": 1873471.0,
      "text": "we declared an Abs method for the type star point. So, we can--we had an x from the previous"
    },
    {
      "index": 384,
      "start_time": 1873470.0,
      "end_time": 1878659.0,
      "text": "slide, we go back there, there, that x address the point three, four, that’s the same x."
    },
    {
      "index": 385,
      "start_time": 1878660.0,
      "end_time": 1883530.0,
      "text": "We can use it here. We declare a variable with the interface type magnitude and assign"
    },
    {
      "index": 386,
      "start_time": 1883530.0,
      "end_time": 1889810.0,
      "text": "it to assign to it the value x. And the reason we can do that is x is an implementation of"
    },
    {
      "index": 387,
      "start_time": 1889810.0,
      "end_time": 1895951.0,
      "text": "that interface, and so that’s a valid assignment, okay? And having done that, had I typed var"
    },
    {
      "index": 388,
      "start_time": 1895950.0,
      "end_time": 1902809.0,
      "text": "m magnitude instead of m magnitude. No, I got it right. Sorry, sorry, I confused myself."
    },
    {
      "index": 389,
      "start_time": 1902810.0,
      "end_time": 1906951.0,
      "text": "Var m magnitude is a variable, we assign to x and then we declare a new variable mag that’s"
    },
    {
      "index": 390,
      "start_time": 1906950.0,
      "end_time": 1912220.0,
      "text": "m.Abs, so it’s just the, the vector length of the point x. But now we declare another"
    },
    {
      "index": 391,
      "start_time": 1912220.0,
      "end_time": 1917750.0,
      "text": "type point three which has three coordinates to find the Abs method for that, same idea."
    },
    {
      "index": 392,
      "start_time": 1917750.0,
      "end_time": 1925269.0,
      "text": "And now, we can assign m equal to a point three and that value still is an interface"
    },
    {
      "index": 393,
      "start_time": 1925270.0,
      "end_time": 1930310.0,
      "text": "var, but inside it is an object that has the implementation of the Abs method. And so we"
    },
    {
      "index": 394,
      "start_time": 1930310.0,
      "end_time": 1934520.0,
      "text": "can call the Abs method on that and add that to the variable that we’ve got. And then"
    },
    {
      "index": 395,
      "start_time": 1934520.0,
      "end_time": 1939721.0,
      "text": "we can do it again, and this time just to be fun, we declare a polar object, which is"
    },
    {
      "index": 396,
      "start_time": 1939720.0,
      "end_time": 1945809.0,
      "text": "R and theta and, of course, that’s a capital theta because a public field. And then, we"
    },
    {
      "index": 397,
      "start_time": 1945810.0,
      "end_time": 1950140.0,
      "text": "declare p Polar. Notice there is not a pointer this time. Why make it a pointer, it doesn’t"
    },
    {
      "index": 398,
      "start_time": 1950140.0,
      "end_time": 1955831.0,
      "text": "matter. So we just make it a value polar and it returns the radius of the thing which is"
    },
    {
      "index": 399,
      "start_time": 1955830.0,
      "end_time": 1960769.0,
      "text": "the definition of the magnitude. And then we design a value that type to m, and now"
    },
    {
      "index": 400,
      "start_time": 1960770.0,
      "end_time": 1965900.0,
      "text": "we can add another thing at the magnitude. So the interface variable is letting you define,"
    },
    {
      "index": 401,
      "start_time": 1965900.0,
      "end_time": 1970571.0,
      "text": "&quot;I can work with anything that implements these methods and anything at all will do.&quot;"
    },
    {
      "index": 402,
      "start_time": 1970570.0,
      "end_time": 1974360.0,
      "text": "Here, I use three different representations of a coordinate, but they’re quite different"
    },
    {
      "index": 403,
      "start_time": 1974360.0,
      "end_time": 1979820.0,
      "text": "in character. Under the covers, it’s all very simple. And the key point is that nowhere"
    },
    {
      "index": 404,
      "start_time": 1979820.0,
      "end_time": 1986090.0,
      "text": "does point three or polar have to tell you that it implements the magnitude interface."
    },
    {
      "index": 405,
      "start_time": 1986090.0,
      "end_time": 1990840.0,
      "text": "It implemented the fact, though, because it satisfies the methods that are defined by"
    },
    {
      "index": 406,
      "start_time": 1990840.0,
      "end_time": 1994529.0,
      "text": "the interface. And there’s way more going on there than I have time to talk about, but"
    },
    {
      "index": 407,
      "start_time": 1994530.0,
      "end_time": 1998630.0,
      "text": "I have to talk about one and very important concept behind them, which is the generality"
    },
    {
      "index": 408,
      "start_time": 1998630.0,
      "end_time": 2004530.0,
      "text": "that they give you, because any method, it could be part of an interface, an interface"
    },
    {
      "index": 409,
      "start_time": 2004530.0,
      "end_time": 2008341.0,
      "text": "can be any method. It&#39;s all sort of, it’s not one to one, it’s many to many. It’s"
    },
    {
      "index": 410,
      "start_time": 2008340.0,
      "end_time": 2014049.0,
      "text": "all mixed up. And so a struct of a given type may implement multiple interfaces depending"
    },
    {
      "index": 411,
      "start_time": 2014050.0,
      "end_time": 2020520.0,
      "text": "on what interface you are using. And that gives you the opportunity to define very simple"
    },
    {
      "index": 412,
      "start_time": 2020520.0,
      "end_time": 2025130.0,
      "text": "interfaces that define very general properties. And a really good example of this is in the"
    },
    {
      "index": 413,
      "start_time": 2025130.0,
      "end_time": 2030111.0,
      "text": "IO package and it is called the Writer interface. And a Writer is anything that implements a"
    },
    {
      "index": 414,
      "start_time": 2030110.0,
      "end_time": 2034850.0,
      "text": "standard write call and that’s what we define a standard write call to be. The, you know,"
    },
    {
      "index": 415,
      "start_time": 2034850.0,
      "end_time": 2038509.0,
      "text": "there’s a slice of bytes that can--that is the data you’re going to write. It has"
    },
    {
      "index": 416,
      "start_time": 2038510.0,
      "end_time": 2043410.0,
      "text": "a length inclusively inside it, so we don’t need a byte count. And it returns, there’s"
    },
    {
      "index": 417,
      "start_time": 2043410.0,
      "end_time": 2047691.0,
      "text": "that function that [INDISTINCT] before returns a pair, a count and an error, but don’t"
    },
    {
      "index": 418,
      "start_time": 2047690.0,
      "end_time": 2051490.0,
      "text": "worry about that. Just think about the writer. The writer said anything that implements this"
    },
    {
      "index": 419,
      "start_time": 2051489.9999999998,
      "end_time": 2056709.9999999998,
      "text": "standard form of the write call can be used to write it to. It makes sense. This is just--it&#39;s"
    },
    {
      "index": 420,
      "start_time": 2056710.0,
      "end_time": 2062929.0,
      "text": "almost a tautology. But now, anything you implement write for can be used by anybody"
    },
    {
      "index": 421,
      "start_time": 2062929.9999999998,
      "end_time": 2066950.9999999998,
      "text": "that only needs something that implements write. It doesn’t matter where the properties"
    },
    {
      "index": 422,
      "start_time": 2066949.9999999998,
      "end_time": 2072979.9999999998,
      "text": "it has. So for instance, fmt.Printf which is just what it sounds, fmt.Fprintf, pardon"
    },
    {
      "index": 423,
      "start_time": 2072980.0,
      "end_time": 2077610.0,
      "text": "me, which is product much what it sounds like, doesn’t take a file as the first argument."
    },
    {
      "index": 424,
      "start_time": 2077610.0000000002,
      "end_time": 2083210.0000000002,
      "text": "It takes an io.Writer as its first argument. And a result, you can call fmt.Fprintf on"
    },
    {
      "index": 425,
      "start_time": 2083210.0,
      "end_time": 2088010.0,
      "text": "a network connection, a pipe, a file descriptor, a buffer, all kinds of other things, anything"
    },
    {
      "index": 426,
      "start_time": 2088010.0000000002,
      "end_time": 2094020.0000000002,
      "text": "that implements write, a cryptography pipeline. And then, the way buffer io is done in Go"
    },
    {
      "index": 427,
      "start_time": 2094020.0,
      "end_time": 2098460.0,
      "text": "is that there is no such thing as buffer io, there’s just buffering. And what happens"
    },
    {
      "index": 428,
      "start_time": 2098460.0,
      "end_time": 2102820.0,
      "text": "is if you want to create a buffered version of something, you give it a writer which is"
    },
    {
      "index": 429,
      "start_time": 2102820.0,
      "end_time": 2106280.0,
      "text": "anything that implements write into the covers and it gives you back a buffered version of"
    },
    {
      "index": 430,
      "start_time": 2106280.0,
      "end_time": 2110010.0,
      "text": "that same thing that you can use where you used it before. So here’s an example that"
    },
    {
      "index": 431,
      "start_time": 2110010.0,
      "end_time": 2115160.0,
      "text": "puts that together, again, a complete program. Starting with package main, we import bufio,"
    },
    {
      "index": 432,
      "start_time": 2115160.0,
      "end_time": 2121980.0,
      "text": "fmt and os again. And now, we wrote the os.Stdout before, but now were going to use Fprintf"
    },
    {
      "index": 433,
      "start_time": 2121980.0,
      "end_time": 2128440.0,
      "text": "to write to it to make it explicit. So, we say, fmt.Fprnintf os.Stdout hello. Then, we"
    },
    {
      "index": 434,
      "start_time": 2128440.0,
      "end_time": 2134180.0,
      "text": "call bufio.NewWriter. We pass it os.Stdout but NewWriter only--all it cares about os.Stdout"
    },
    {
      "index": 435,
      "start_time": 2134180.0,
      "end_time": 2141550.0,
      "text": "is that it implements the right call. And the NewWriter function inside bufio returns"
    },
    {
      "index": 436,
      "start_time": 2141550.0,
      "end_time": 2145850.0,
      "text": "something else that implements the writer interface, and so I can write to it. So, I"
    },
    {
      "index": 437,
      "start_time": 2145850.0,
      "end_time": 2149630.0,
      "text": "can call fmt.Fprintf of buf and now I have a buffered write. So I better flush it when"
    },
    {
      "index": 438,
      "start_time": 2149630.0,
      "end_time": 2154590.0,
      "text": "I’m done. But you see the Fprintf use two different types in there for its output and"
    },
    {
      "index": 439,
      "start_time": 2154590.0,
      "end_time": 2159840.0,
      "text": "it worked, because underneath--if you look at the Fprintf declaration, all it cares about"
    },
    {
      "index": 440,
      "start_time": 2159840.0,
      "end_time": 2164450.0,
      "text": "is that the thing that is being passed in implements the write call, which of course"
    },
    {
      "index": 441,
      "start_time": 2164450.0,
      "end_time": 2169530.0,
      "text": "they do and it’s type checks, so you know they do. So, there&#39;s a lot more of that stuff"
    },
    {
      "index": 442,
      "start_time": 2169530.0,
      "end_time": 2175650.0,
      "text": "to talk about to, but we’re trying to skip through the highlights. Communication channels"
    },
    {
      "index": 443,
      "start_time": 2175650.0,
      "end_time": 2180250.0,
      "text": "are little as radical than Interfaces because they’re based on, worked on in some early"
    },
    {
      "index": 444,
      "start_time": 2180250.0,
      "end_time": 2186540.0,
      "text": "language, going back to a Hoare’s CSP. But unlike Hoare’s original CSP, the communication"
    },
    {
      "index": 445,
      "start_time": 2186540.0,
      "end_time": 2190900.0,
      "text": "is done through first-class values called Channels. His second round of it done about"
    },
    {
      "index": 446,
      "start_time": 2190900.0,
      "end_time": 2195500.0,
      "text": "10 years later had these, but we’d played with them linguistically by then. And, the"
    },
    {
      "index": 447,
      "start_time": 2195500.0,
      "end_time": 2200610.0,
      "text": "ideas, you make a Channel, it has type string. That means you can send and receive strings"
    },
    {
      "index": 448,
      "start_time": 2200610.0,
      "end_time": 2204690.0,
      "text": "on that channel. Just like a pipe that you can send type values through. And so, that"
    },
    {
      "index": 449,
      "start_time": 2204690.0,
      "end_time": 2209570.0,
      "text": "notation with the left facing out is the communication operator when you used infix it means send."
    },
    {
      "index": 450,
      "start_time": 2209570.0,
      "end_time": 2214400.0,
      "text": "So, that sends the string, hello, down the channel. And somewhere else, some other time,"
    },
    {
      "index": 451,
      "start_time": 2214400.0,
      "end_time": 2220340.0,
      "text": "some other Goroutine can do read from channel c by doing a prefix operator on c of that"
    },
    {
      "index": 452,
      "start_time": 2220340.0,
      "end_time": 2225170.0,
      "text": "communications and get out the greetings, so it will see greeting as assigned to hello."
    },
    {
      "index": 453,
      "start_time": 2225170.0,
      "end_time": 2229330.0,
      "text": "And this is haven’t done giving Goroutine because the channel is synchronized by default,"
    },
    {
      "index": 454,
      "start_time": 2229330.0,
      "end_time": 2234240.0,
      "text": "hello. You can control that when you allocate them. And one of the cool things about having"
    },
    {
      "index": 455,
      "start_time": 2234240.0,
      "end_time": 2239020.0,
      "text": "them is you can make them--channels can actually be first class size. That means you can pass"
    },
    {
      "index": 456,
      "start_time": 2239020.0,
      "end_time": 2242900.0,
      "text": "a channel on a channel. And I’ll show you in a minute to actually give you some interesting"
    },
    {
      "index": 457,
      "start_time": 2242900.0,
      "end_time": 2248410.0,
      "text": "capability. So, if you have someone else wants to have this channel that you can send greetings"
    },
    {
      "index": 458,
      "start_time": 2248410.0,
      "end_time": 2254400.0,
      "text": "on, you can pass it to him over channel then he can send you greetings, all right? So,"
    },
    {
      "index": 459,
      "start_time": 2254400.0,
      "end_time": 2257340.0,
      "text": "to do that, though, we have to talk a little bit about Goroutines. So, I’ve mentioned"
    },
    {
      "index": 460,
      "start_time": 2257340.0,
      "end_time": 2260690.0,
      "text": "some calculations, it just takes far too long, right? Who wants to wait around for that?"
    },
    {
      "index": 461,
      "start_time": 2260690.0,
      "end_time": 2265200.0,
      "text": "You&#39;re going to block forever waiting for the calculation, but maybe you don’t want"
    },
    {
      "index": 462,
      "start_time": 2265200.0,
      "end_time": 2270710.0,
      "text": "to. What you can do instead is create a channel to get the answer back on. And then declare"
    },
    {
      "index": 463,
      "start_time": 2270710.0,
      "end_time": 2276770.0,
      "text": "a function, wrapper, that takes the value of the parameter for the calculation, and"
    },
    {
      "index": 464,
      "start_time": 2276770.0,
      "end_time": 2281430.0,
      "text": "a channel invokes the calculation and then when it is done, sends the result back. And"
    },
    {
      "index": 465,
      "start_time": 2281430.0,
      "end_time": 2285530.0,
      "text": "I broke it in two lines just to make it easier to read. You&#39;d probably just write C gets"
    },
    {
      "index": 466,
      "start_time": 2285530.0,
      "end_time": 2290980.0,
      "text": "long calculation of A in a real code, okay? And then, to run the thing, there’s a Go"
    },
    {
      "index": 467,
      "start_time": 2290980.0,
      "end_time": 2296190.0,
      "text": "keyword. Go is a keyword. Go wrapper of 17c says, &quot;Take the function call, 17 comma C,"
    },
    {
      "index": 468,
      "start_time": 2296190.0,
      "end_time": 2300340.0,
      "text": "and run in the background and let me keep going.&quot; Okay? And then, eventually, you want"
    },
    {
      "index": 469,
      "start_time": 2300340.0,
      "end_time": 2303950.0,
      "text": "to hear what happened, so once you’re finished doing your business, you come back and say,"
    },
    {
      "index": 470,
      "start_time": 2303950.0,
      "end_time": 2307090.0,
      "text": "&quot;Okay, I’m ready for the answer now.&quot; And you say, &quot;Now, I want to receive from C and"
    },
    {
      "index": 471,
      "start_time": 2307090.0,
      "end_time": 2311940.0,
      "text": "get the result.&quot; So I’ve taken this calculation and I’ve solved it off over here and then"
    },
    {
      "index": 472,
      "start_time": 2311940.0,
      "end_time": 2316940.0,
      "text": "it slows back to me by doing a receive on the channel down underneath. That should be"
    },
    {
      "index": 473,
      "start_time": 2316940.0,
      "end_time": 2323430.0,
      "text": "fairly easy to follow. This might not be so easy, but we’ll try. This is a multiplexed"
    },
    {
      "index": 474,
      "start_time": 2323430.0,
      "end_time": 2327820.0,
      "text": "server. At least, the server side of it, I’ll show you the client on the next slide. And"
    },
    {
      "index": 475,
      "start_time": 2327820.0,
      "end_time": 2332030.0,
      "text": "the idea here, remember I said you can pass a channel to a channel. What we have is a"
    },
    {
      "index": 476,
      "start_time": 2332030.0,
      "end_time": 2335210.0,
      "text": "request which is a request for the server to implement. That&#39;s trivial. It just takes"
    },
    {
      "index": 477,
      "start_time": 2335210.0,
      "end_time": 2338440.0,
      "text": "a pair of integers in the channel in which it replies. Very much like what we did before"
    },
    {
      "index": 478,
      "start_time": 2338440.0,
      "end_time": 2343540.0,
      "text": "on previous slides, generalized somewhat. We defined a binary operator type and we defined"
    },
    {
      "index": 479,
      "start_time": 2343540.0,
      "end_time": 2350360.0,
      "text": "a function run that takes a binary operator and a request and sends on the reply channel"
    },
    {
      "index": 480,
      "start_time": 2350360.0,
      "end_time": 2358310.0,
      "text": "inside the request the value of running the operator on the arguments inside the request."
    },
    {
      "index": 481,
      "start_time": 2358310.0,
      "end_time": 2362050.0,
      "text": "So that’s just turning to send the operations in the sending of the thing from the previous"
    },
    {
      "index": 482,
      "start_time": 2362050.0,
      "end_time": 2367560.0,
      "text": "slide into a function, not very exciting yet. But then, we defined a server function that"
    },
    {
      "index": 483,
      "start_time": 2367560.0,
      "end_time": 2372660.0,
      "text": "takes an operator that is going to serve in a channel of request. And it’s just sits"
    },
    {
      "index": 484,
      "start_time": 2372660.0,
      "end_time": 2378850.0,
      "text": "in a loop reading request from the service channel and then saying run of Op request,"
    },
    {
      "index": 485,
      "start_time": 2378850.0,
      "end_time": 2382570.0,
      "text": "but it puts a Go keyword at the beginning. So, it runs all these requests in parallel"
    },
    {
      "index": 486,
      "start_time": 2382570.0,
      "end_time": 2386460.0,
      "text": "in the background. The server is never blocked. It’s always ready to receive another call"
    },
    {
      "index": 487,
      "start_time": 2386460.0,
      "end_time": 2389630.0,
      "text": "no matter how much is going on. Obviously, there&#39;s issues about re-limiting and stuff"
    },
    {
      "index": 488,
      "start_time": 2389630.0,
      "end_time": 2393950.0,
      "text": "like that, but let&#39;s not worry about those. The key point is that that’s, basically,"
    },
    {
      "index": 489,
      "start_time": 2393950.0,
      "end_time": 2399380.0,
      "text": "a server loop. And then, to make it easy to use for the client we defined a public function"
    },
    {
      "index": 490,
      "start_time": 2399380.0,
      "end_time": 2405650.0,
      "text": "or an exported function by starting with a capital letter, starts server. And it says,"
    },
    {
      "index": 491,
      "start_time": 2405650.0,
      "end_time": 2412740.0,
      "text": "&quot;Take an operator and start a server for that operator and return the channel on which those"
    },
    {
      "index": 492,
      "start_time": 2412740.0,
      "end_time": 2418250.0,
      "text": "requests can be sent. So, what we do is we allocate the channel, a channel start a request,"
    },
    {
      "index": 493,
      "start_time": 2418250.0,
      "end_time": 2422070.0,
      "text": "we start the server process which in turn is going to start the little implementers"
    },
    {
      "index": 494,
      "start_time": 2422070.0,
      "end_time": 2427550.0,
      "text": "of the operator as they come in. And then, we return the channel as the return value"
    },
    {
      "index": 495,
      "start_time": 2427550.0,
      "end_time": 2430980.0,
      "text": "from start server. So, you call a function you get a channel back, now you got a thing"
    },
    {
      "index": 496,
      "start_time": 2430980.0,
      "end_time": 2436230.0,
      "text": "you can talk to and that is the fundamental idea on how you use this stuff to build services,"
    },
    {
      "index": 497,
      "start_time": 2436230.0,
      "end_time": 2442040.0,
      "text": "okay? So on the client side, it looks like this. You say, server, start server, here&#39;s"
    },
    {
      "index": 498,
      "start_time": 2442040.0,
      "end_time": 2445800.0,
      "text": "a function. Now, notice that I’m just writing a function in line there. Go has four closure,"
    },
    {
      "index": 499,
      "start_time": 2445800.0,
      "end_time": 2450620.0,
      "text": "it seems writing down its expressions. And so, now I’ve got a server running that’s"
    },
    {
      "index": 500,
      "start_time": 2450620.0,
      "end_time": 2456310.0,
      "text": "going to add numbers for me. And I’ve got a channel for that server in the variable"
    },
    {
      "index": 501,
      "start_time": 2456310.0,
      "end_time": 2459990.0,
      "text": "server called Lowercase Server. I allocated a couple of request in the obvious way and"
    },
    {
      "index": 502,
      "start_time": 2459990.0,
      "end_time": 2465180.0,
      "text": "inside the request, I allocate new channels because I want to do--respond to me on separate"
    },
    {
      "index": 503,
      "start_time": 2465180.0,
      "end_time": 2469630.0,
      "text": "channels for whatever reason, okay? And then, I can send the request to the server, it doesn’t"
    },
    {
      "index": 504,
      "start_time": 2469630.0,
      "end_time": 2472830.0,
      "text": "matter what order I send them. It’s totally not blocking. I&#39;ll just send them anywhere"
    },
    {
      "index": 505,
      "start_time": 2472830.0,
      "end_time": 2476430.0,
      "text": "I want. And now, I can print them out again, print the results as they come back. And I"
    },
    {
      "index": 506,
      "start_time": 2476430.0,
      "end_time": 2478970.0,
      "text": "don’t have to worry about the order because, again, it’s totally parallel. So, in fact,"
    },
    {
      "index": 507,
      "start_time": 2478970.0,
      "end_time": 2483870.0,
      "text": "I send one first but ask her two first. And if two takes forever, I’ll still hang around"
    },
    {
      "index": 508,
      "start_time": 2483870.0,
      "end_time": 2487390.0,
      "text": "there waiting for the response to come back and once it finally does then I’ll print"
    },
    {
      "index": 509,
      "start_time": 2487390.0,
      "end_time": 2492590.0,
      "text": "the value on one even if one is ready sooner. So, this one is very rushed through hear,"
    },
    {
      "index": 510,
      "start_time": 2492590.0,
      "end_time": 2497250.0,
      "text": "so I apologize if I left you a little be fuddled, but there’s examples like this in the tutorial"
    },
    {
      "index": 511,
      "start_time": 2497250.0,
      "end_time": 2502160.0,
      "text": "and some other documents. It should make a little clear what’s going on if that looses"
    },
    {
      "index": 512,
      "start_time": 2502160.0,
      "end_time": 2510060.0,
      "text": "you. Now, if we go back to the server here, remember I said, it has a rate limiting issue"
    },
    {
      "index": 513,
      "start_time": 2510060.0,
      "end_time": 2514490.0,
      "text": "and also the problem is it runs forever. You want to go and shut it down. One way to do"
    },
    {
      "index": 514,
      "start_time": 2514490.0,
      "end_time": 2520790.0,
      "text": "that is to use a control structure in Go called the Select, which is quite a rich control"
    },
    {
      "index": 515,
      "start_time": 2520790.0,
      "end_time": 2526830.0,
      "text": "structure. But the basic idea is given a set of communications on channels. Select let’s"
    },
    {
      "index": 516,
      "start_time": 2526830.0,
      "end_time": 2531170.0,
      "text": "you choose, let&#39;s you to actually wait for any one of them to be become ready and once"
    },
    {
      "index": 517,
      "start_time": 2531170.0,
      "end_time": 2535330.0,
      "text": "it does become ready, let that single thing communicate. So, it’s like a switch statement"
    },
    {
      "index": 518,
      "start_time": 2535330.0,
      "end_time": 2540170.0,
      "text": "for communication. So, if we replace the inner loop of server, which was just, remember,"
    },
    {
      "index": 519,
      "start_time": 2540170.0,
      "end_time": 2546850.0,
      "text": "get a request and then run Go on it. With an operator that has a select statement inside"
    },
    {
      "index": 520,
      "start_time": 2546850.0,
      "end_time": 2551470.0,
      "text": "it and the second channel called Quit, that’s passed into the server when we create it."
    },
    {
      "index": 521,
      "start_time": 2551470.0,
      "end_time": 2555250.0,
      "text": "Then, we can just run this normally. It will just do what it was doing before, but as soon"
    },
    {
      "index": 522,
      "start_time": 2555250.0,
      "end_time": 2559340.0,
      "text": "as you want it to go away, we just send a signal by sending a Boolean of any value,"
    },
    {
      "index": 523,
      "start_time": 2559340.0,
      "end_time": 2564770.0,
      "text": "it doesn’t matter what, on the Quit channel and that branch of the select will fire and"
    },
    {
      "index": 524,
      "start_time": 2564770.0,
      "end_time": 2569240.0,
      "text": "this function will return, which is equivalent to exiting the Go routine. So, that’s again"
    },
    {
      "index": 525,
      "start_time": 2569240.0,
      "end_time": 2574560.0,
      "text": "pretty quick and I apologize for that. But I want to make sure we hit some of those points."
    },
    {
      "index": 526,
      "start_time": 2574560.0,
      "end_time": 2578080.0,
      "text": "And in fact, there’s a lot more to talk about. I haven’t talk much about package"
    },
    {
      "index": 527,
      "start_time": 2578080.0,
      "end_time": 2582100.0,
      "text": "construction. Initialization is actually quite interesting in Go. It&#39;s much--it&#39;s sort of"
    },
    {
      "index": 528,
      "start_time": 2582100.0,
      "end_time": 2586960.0,
      "text": "hard to see, but it does a lot for you. It can help you set up things like RPC servers"
    },
    {
      "index": 529,
      "start_time": 2586960.0,
      "end_time": 2591340.0,
      "text": "with almost no code and stuff like that. There’s fall reflection, you can reflect from there,"
    },
    {
      "index": 530,
      "start_time": 2591340.0,
      "end_time": 2595120.0,
      "text": "you can reflect on functions, channels, maps, all kinds of stuff. It’s got interesting"
    },
    {
      "index": 531,
      "start_time": 2595120.0,
      "end_time": 2598630.0,
      "text": "some dynamic typing going on if you wanted to, but you don’t have to use it. There’s"
    },
    {
      "index": 532,
      "start_time": 2598630.0,
      "end_time": 2604130.0,
      "text": "a thing called Embedding that is a little bit like an inheritance, but somewhat more"
    },
    {
      "index": 533,
      "start_time": 2604130.0,
      "end_time": 2609300.0,
      "text": "simple and yet general. There’s iterators that come out of the way. The range thing"
    },
    {
      "index": 534,
      "start_time": 2609300.0,
      "end_time": 2612660.0,
      "text": "works on fours in our channel’s functions, things like that. And there’s some interesting"
    },
    {
      "index": 535,
      "start_time": 2612660.0,
      "end_time": 2615610.0,
      "text": "testing software, but I don’t have time to talk about any of these right here, but"
    },
    {
      "index": 536,
      "start_time": 2615610.0,
      "end_time": 2619930.0,
      "text": "I just want to make it clear there’s a lot more of the language than what I have time"
    },
    {
      "index": 537,
      "start_time": 2619930.0,
      "end_time": 2624700.0,
      "text": "to show you. So let me close this section with another interesting example. This is"
    },
    {
      "index": 538,
      "start_time": 2624700.0,
      "end_time": 2630180.0,
      "text": "a real communications example. Remember, we started this language because we want to build"
    },
    {
      "index": 539,
      "start_time": 2630180.0,
      "end_time": 2634640.0,
      "text": "servers. And one of the problems with building servers in the modern world is there’s this"
    },
    {
      "index": 540,
      "start_time": 2634640.0,
      "end_time": 2641290.0,
      "text": "model of a thread per request, which is quite labor intensive and resource intensive to"
    },
    {
      "index": 541,
      "start_time": 2641290.0,
      "end_time": 2646410.0,
      "text": "run and quite difficult to get right in more languages. And we want to make it easy to"
    },
    {
      "index": 542,
      "start_time": 2646410.0,
      "end_time": 2650750.0,
      "text": "think about having tens of thousands or even hundreds of thousands of threads—-whatever"
    },
    {
      "index": 543,
      "start_time": 2650750.0,
      "end_time": 2657090.0,
      "text": "they are-—working on your behalf. And to prove that we got some way towards that. This"
    },
    {
      "index": 544,
      "start_time": 2657090.0,
      "end_time": 2661900.0,
      "text": "is an example that will create a hundred thousand goroutines and then they can do something."
    },
    {
      "index": 545,
      "start_time": 2661900.0,
      "end_time": 2665850.0,
      "text": "And what it does, you probably won’t be able to decode this in real time, but what"
    },
    {
      "index": 546,
      "start_time": 2665850.0,
      "end_time": 2671830.0,
      "text": "it does is it has a little function F there that all it does is read a value from a channel,"
    },
    {
      "index": 547,
      "start_time": 2671830.0,
      "end_time": 2675890.0,
      "text": "add one to it and send it out again. So, there left gets one plus, get from right. It’s"
    },
    {
      "index": 548,
      "start_time": 2675890.0,
      "end_time": 2681900.0,
      "text": "that thing inside F. It just passes its token along but adds one to it, okay? And inside"
    },
    {
      "index": 549,
      "start_time": 2681900.0,
      "end_time": 2688120.0,
      "text": "main, we declare the left most piece—-to go your direction—-and then a couple of"
    },
    {
      "index": 550,
      "start_time": 2688120.0,
      "end_time": 2692710.0,
      "text": "variables. And then for the number of goroutines you want to start, we sort of thread a new"
    },
    {
      "index": 551,
      "start_time": 2692710.0,
      "end_time": 2697280.0,
      "text": "piece on and walk away along, but we remember where we started. So, we stitch together a"
    },
    {
      "index": 552,
      "start_time": 2697280.0,
      "end_time": 2702040.0,
      "text": "bunch of goroutines like this, each of which is passing a channel value along to the next"
    },
    {
      "index": 553,
      "start_time": 2702040.0,
      "end_time": 2706540.0,
      "text": "one. And so, we end up constructing, in this case, a hundred thousand goroutines off turning"
    },
    {
      "index": 554,
      "start_time": 2706540.0,
      "end_time": 2711400.0,
      "text": "together like pearls on a string. And each end is waiting for the guy upstream to give"
    },
    {
      "index": 555,
      "start_time": 2711400.0,
      "end_time": 2715900.0,
      "text": "him a value. So, then right at the bottom there after the loop--once we built this thing—-we"
    },
    {
      "index": 556,
      "start_time": 2715900.0,
      "end_time": 2721920.0,
      "text": "say, drop a value into the right hand side and it goes pfft and pops out the left. And"
    },
    {
      "index": 557,
      "start_time": 2721920.0,
      "end_time": 2725860.0,
      "text": "the value that comes out is of course the number of goroutines in the chain because"
    },
    {
      "index": 558,
      "start_time": 2725860.0,
      "end_time": 2731040.0,
      "text": "we’ve added one for each step, okay? So, you can examine that later if it confuses"
    },
    {
      "index": 559,
      "start_time": 2731040.0,
      "end_time": 2740430.0,
      "text": "you, but let me show it to you actually running. Okay. So--oh dear, I think it was the wrong"
    },
    {
      "index": 560,
      "start_time": 2740430.0,
      "end_time": 2749170.0,
      "text": "file—-okay, sorry it took so long. And now, I’ll run it—-now remember this is a little,"
    },
    {
      "index": 561,
      "start_time": 2749170.0,
      "end_time": 2755900.0,
      "text": "a little mac air very fast. That&#39;s a hundred thousand threads of control--I won’t say"
    },
    {
      "index": 562,
      "start_time": 2755900.0,
      "end_time": 2761990.0,
      "text": "threads because that’s not how it is done—-but just incase you’re wondering, it takes about"
    },
    {
      "index": 563,
      "start_time": 2761990.0,
      "end_time": 2767100.0,
      "text": "1.5 seconds to manage a hundred thousand goroutines. And it’s real--it’s honest to God management"
    },
    {
      "index": 564,
      "start_time": 2767100.0,
      "end_time": 2771110.0,
      "text": "too. It’s [INDISTINCT], it’s stitch together communication. Doing the communication and"
    },
    {
      "index": 565,
      "start_time": 2771110.0,
      "end_time": 2776440.0,
      "text": "it’s tearing them down. This hasn&#39;t created an instant kill, this is a legal honest build,"
    },
    {
      "index": 566,
      "start_time": 2776440.0,
      "end_time": 2780570.0,
      "text": "use them, tear them down. It’s kind of a minimum thing you can do that, but still,"
    },
    {
      "index": 567,
      "start_time": 2780570.0,
      "end_time": 2785250.0,
      "text": "hundred thousand is an interesting number and we could go more but it start to use up"
    },
    {
      "index": 568,
      "start_time": 2785250.0,
      "end_time": 2800690.0,
      "text": "memory. So, let’s just prove that there’s—-anyone knew that. Here we go. So, that’s concurrency"
    },
    {
      "index": 569,
      "start_time": 2800690.0,
      "end_time": 2804640.0,
      "text": "showing that you are going to at least, conceptually, have many, many things. Now, the goroutine"
    },
    {
      "index": 570,
      "start_time": 2804640.0,
      "end_time": 2808590.0,
      "text": "implementation has to worry about real threading and real stuff like that when you’re doing"
    },
    {
      "index": 571,
      "start_time": 2808590.0,
      "end_time": 2812810.0,
      "text": "I/O operations that could block but that is taken care off. So, you are left with a simple"
    },
    {
      "index": 572,
      "start_time": 2812810.0,
      "end_time": 2816450.0,
      "text": "mind example, it’s indicative of something that really works. So, let me talk a little"
    },
    {
      "index": 573,
      "start_time": 2816450.0,
      "end_time": 2823610.0,
      "text": "bit about the status. It’s actually quite a bit to say, we have two complete implementations"
    },
    {
      "index": 574,
      "start_time": 2823610.0,
      "end_time": 2829710.0,
      "text": "in two different compiler technologies. Ken Thompson wrote a suite loosely based on some"
    },
    {
      "index": 575,
      "start_time": 2829710.0,
      "end_time": 2836840.0,
      "text": "of the Plan 9 tools but it’s from scratch, and using the peculiar notation, 6g is the"
    },
    {
      "index": 576,
      "start_time": 2836840.0,
      "end_time": 2843980.0,
      "text": "AMD—-it’s a 64 bit X86 compiler. There’s also a 3D 61 and an ARM which is five for"
    },
    {
      "index": 577,
      "start_time": 2843980.0,
      "end_time": 2848120.0,
      "text": "reasons. Don’t even ask. But anyway, the point is there is a compiler. That’s the"
    },
    {
      "index": 578,
      "start_time": 2848120.0,
      "end_time": 2853050.0,
      "text": "one I’ve been using today. Some are more experimental than the other compiler but as"
    },
    {
      "index": 579,
      "start_time": 2853050.0,
      "end_time": 2857220.0,
      "text": "you’ve seen it, it generates code quickly. The code it generates is pretty good, it’s"
    },
    {
      "index": 580,
      "start_time": 2857220.0,
      "end_time": 2861190.0,
      "text": "not as good as what comes out of GCC, but it’s better than you might think for a compiler"
    },
    {
      "index": 581,
      "start_time": 2861190.0,
      "end_time": 2866970.0,
      "text": "that goes that fast. But, in order to do that, it got it’s own rules and so, the output"
    },
    {
      "index": 582,
      "start_time": 2866970.0,
      "end_time": 2871080.0,
      "text": "is not linkable directly with GCC. But there is a foreign function interface support that"
    },
    {
      "index": 583,
      "start_time": 2871080.0,
      "end_time": 2877220.0,
      "text": "is coming along pretty well. We can call C-code from Go with this compiler just fine and once"
    },
    {
      "index": 584,
      "start_time": 2877220.0,
      "end_time": 2882850.0,
      "text": "we get Swig work and we’re able to call C++ code. And then Ian Taylor, wrote a GCC"
    },
    {
      "index": 585,
      "start_time": 2882850.0,
      "end_time": 2888020.0,
      "text": "front end for Go which is a complete implementation--I should say, by the way, that Ken’s compiler"
    },
    {
      "index": 586,
      "start_time": 2888020.0,
      "end_time": 2892390.0,
      "text": "is written in C for bootstrapping reasons, although, honestly it would be a great language"
    },
    {
      "index": 587,
      "start_time": 2892390.0,
      "end_time": 2897750.0,
      "text": "to write a compiler but it’s written in C for now. And Ian Taylor thing is a C++ front"
    },
    {
      "index": 588,
      "start_time": 2897750.0,
      "end_time": 2904480.0,
      "text": "end for the GCC backend. It generates excellent code with GCC quality but it’s not as fast"
    },
    {
      "index": 589,
      "start_time": 2904480.0,
      "end_time": 2908520.0,
      "text": "it’s about something like four or five times slower. But the real advantage of compiling"
    },
    {
      "index": 590,
      "start_time": 2908520.0,
      "end_time": 2912280.0,
      "text": "GO isn’t the compiler speed, it’s the compilation speed. The whole picture is where"
    },
    {
      "index": 591,
      "start_time": 2912280.0,
      "end_time": 2918420.0,
      "text": "the speed really comes from. And both these compilers supports 32 and 64 bit x86 and with"
    },
    {
      "index": 592,
      "start_time": 2918420.0,
      "end_time": 2923110.0,
      "text": "ARM compiler that Kyle has been working on that’s almost ready—-I think it’s up"
    },
    {
      "index": 593,
      "start_time": 2923110.0,
      "end_time": 2928420.0,
      "text": "to 97% to test suite compliance now. So, we are very close. We have to have it ready in"
    },
    {
      "index": 594,
      "start_time": 2928420.0,
      "end_time": 2932310.0,
      "text": "time for the open source release. And for performance of the generated code, it varies"
    },
    {
      "index": 595,
      "start_time": 2932310.0,
      "end_time": 2936400.0,
      "text": "obviously because it’s different but if you avoid some of the libraries for which"
    },
    {
      "index": 596,
      "start_time": 2936400.0,
      "end_time": 2941740.0,
      "text": "have weak implementations. Typical inter loop kind of performance or standard programming"
    },
    {
      "index": 597,
      "start_time": 2941740.0,
      "end_time": 2947460.0,
      "text": "gets you typically to 10 to 20% range with the GCC tending to be more like—-by which"
    },
    {
      "index": 598,
      "start_time": 2947460.0,
      "end_time": 2954480.0,
      "text": "I mean 10 percent slower than C and Ken’s compiler is typically like 20% slower. So,"
    },
    {
      "index": 599,
      "start_time": 2954480.0,
      "end_time": 2959760.0,
      "text": "1.1x to 1.2x, but this is for a type save, statistically compiled garbage collection"
    },
    {
      "index": 600,
      "start_time": 2959760.0,
      "end_time": 2968200.0,
      "text": "language. It’s pretty nice. And I’m happy to give up 10 percent even with words lost"
    },
    {
      "index": 601,
      "start_time": 2968200.0,
      "end_time": 2974020.0,
      "text": "flowing down, that’s still not very much clock time on the calendar. So, there’s"
    },
    {
      "index": 602,
      "start_time": 2974020.0,
      "end_time": 2977970.0,
      "text": "a Run-time that handles all the memory allocation, garbage collection, stuff like that, the stack"
    },
    {
      "index": 603,
      "start_time": 2977970.0,
      "end_time": 2983020.0,
      "text": "handling stuff which is pretty special but very important. The goroutines support channels,"
    },
    {
      "index": 604,
      "start_time": 2983020.0,
      "end_time": 2986770.0,
      "text": "slices, map, reflection; all of that stuff is built into a real run-time. So, even though"
    },
    {
      "index": 605,
      "start_time": 2986770.0,
      "end_time": 2992450.0,
      "text": "it’s a system language it has a really powerful run-time system including dynamic type reflection."
    },
    {
      "index": 606,
      "start_time": 2992450.0,
      "end_time": 2996290.0,
      "text": "And it’s pretty solid. It’s improving, it got ways to go especially in memory allocation"
    },
    {
      "index": 607,
      "start_time": 2996290.0,
      "end_time": 3001650.0,
      "text": "and some of the scheduling stuff, but that’s yet to come, but we’re working on it. 6g"
    },
    {
      "index": 608,
      "start_time": 3001650.0,
      "end_time": 3005850.0,
      "text": "has a very good goroutines support and much of them on the threads well and implements"
    },
    {
      "index": 609,
      "start_time": 3005850.0,
      "end_time": 3008810.0,
      "text": "what we call segmented stacks, which is how we keep the footprints small but let them"
    },
    {
      "index": 610,
      "start_time": 3008810.0,
      "end_time": 3013520.0,
      "text": "grow as they need to. GCC goes a little behind on that because Ian has been working on a"
    },
    {
      "index": 611,
      "start_time": 3013520.0,
      "end_time": 3019300.0,
      "text": "few other things lately. But we hope by the end of the year to have all that stuff working"
    },
    {
      "index": 612,
      "start_time": 3019300.0,
      "end_time": 3024370.0,
      "text": "in GCC Go and they’ll basically be at the same stage at that point. But even so, GCC"
    },
    {
      "index": 613,
      "start_time": 3024370.0,
      "end_time": 3032050.0,
      "text": "Go can compile all the code and run it now. The garbage collector, 6g has a simple but"
    },
    {
      "index": 614,
      "start_time": 3032050.0,
      "end_time": 3037550.0,
      "text": "effective mark-and-sweep collector. And this sounds simple, but work is under the way to"
    },
    {
      "index": 615,
      "start_time": 3037550.0,
      "end_time": 3042410.0,
      "text": "do a much better job. We believe, with multi-card machines, you can actually do concurrent garbage"
    },
    {
      "index": 616,
      "start_time": 3042410.0,
      "end_time": 3047750.0,
      "text": "collection with essentially zero latency and very little cost and overhead. And IBM has"
    },
    {
      "index": 617,
      "start_time": 3047750.0,
      "end_time": 3051420.0,
      "text": "this garbage collector technology that we think is pretty exciting. We think building"
    },
    {
      "index": 618,
      "start_time": 3051420.0,
      "end_time": 3057600.0,
      "text": "on that stuff, we can actually make our real goals which are to avoid a lot of the pitfalls"
    },
    {
      "index": 619,
      "start_time": 3057600.0,
      "end_time": 3062560.0,
      "text": "that garbage collector tend to have. And we’ve done work in other languages before that indicate"
    },
    {
      "index": 620,
      "start_time": 3062560.0,
      "end_time": 3066250.0,
      "text": "this really can be done and now that we have multi-card machines we believe that we can"
    },
    {
      "index": 621,
      "start_time": 3066250.0,
      "end_time": 3070590.0,
      "text": "really solve it. GCC Go at the moment has no collector, but, as I said, we&#39;re working"
    },
    {
      "index": 622,
      "start_time": 3070590.0,
      "end_time": 3075640.0,
      "text": "on a common run-time, and I hope by the time this collector is done is design to run with"
    },
    {
      "index": 623,
      "start_time": 3075640.0,
      "end_time": 3080080.0,
      "text": "either compiler. It’s part of the general run-time so both compilers will have real"
    },
    {
      "index": 624,
      "start_time": 3080080.0,
      "end_time": 3086440.0,
      "text": "garbage collectors inside of them. There’s lot of libraries, there’s tons more to do,"
    },
    {
      "index": 625,
      "start_time": 3086440.0,
      "end_time": 3092050.0,
      "text": "but we have a pretty good start. We’ve got obviously, OS and I/O stuff. I showed you"
    },
    {
      "index": 626,
      "start_time": 3092050.0,
      "end_time": 3095850.0,
      "text": "some of that. It’s got a nice math, a simple math package. It got strings, good support"
    },
    {
      "index": 627,
      "start_time": 3095850.0,
      "end_time": 3101090.0,
      "text": "for Unicode, rudimentary but functional regular expression implementation. It’s got run-time"
    },
    {
      "index": 628,
      "start_time": 3101090.0,
      "end_time": 3105570.0,
      "text": "reflection, command-line flags and logging, which are very nice to use. It&#39;s got full"
    },
    {
      "index": 629,
      "start_time": 3105570.0,
      "end_time": 3108980.0,
      "text": "hashes and crypto and all that kind of stuff. It&#39;s got a really good testing tool and a"
    },
    {
      "index": 630,
      "start_time": 3108980.0,
      "end_time": 3113610.0,
      "text": "library to support it, standard networking libraries just like you’d expect, including"
    },
    {
      "index": 631,
      "start_time": 3113610.0,
      "end_time": 3118470.0,
      "text": "a native RPC implementations. It’s kind of pretty. There’s a really interesting"
    },
    {
      "index": 632,
      "start_time": 3118470.0,
      "end_time": 3123680.0,
      "text": "template library based on some work that Andy Chu did that let’s you write HTML or, in"
    },
    {
      "index": 633,
      "start_time": 3123680.0,
      "end_time": 3130510.0,
      "text": "fact, anything at all using this to generate really simple data driven page generation."
    },
    {
      "index": 634,
      "start_time": 3130510.0,
      "end_time": 3134070.0,
      "text": "It&#39;s really quite nice. Andy gets most of the credit for that. There’s a lot more,"
    },
    {
      "index": 635,
      "start_time": 3134070.0,
      "end_time": 3138760.0,
      "text": "but you can see there’s actually quite a bit in place already. So, one of the most"
    },
    {
      "index": 636,
      "start_time": 3138760.0,
      "end_time": 3142610.0,
      "text": "interesting programs written in Go is a pair of things that are related--they share a lot"
    },
    {
      "index": 637,
      "start_time": 3142610.0,
      "end_time": 3149180.0,
      "text": "of code--called Godoc and Gofmt. Godoc is analogous to Javadoc. It serves documents"
    },
    {
      "index": 638,
      "start_time": 3149180.0,
      "end_time": 3155260.0,
      "text": "to request to look up, you know, what this package does or what that function does. And"
    },
    {
      "index": 639,
      "start_time": 3155260.0,
      "end_time": 3160300.0,
      "text": "there’s a set of links listed there. Golang.org is a top-level guide that’s running Godoc."
    },
    {
      "index": 640,
      "start_time": 3160300.0,
      "end_time": 3165270.0,
      "text": "It serves the landing page. And underneath that, you can find all the other documents"
    },
    {
      "index": 641,
      "start_time": 3165270.0,
      "end_time": 3169210.0,
      "text": "specifications, editorials, and FAQs, and stuff like that. But if you dig down into"
    },
    {
      "index": 642,
      "start_time": 3169210.0,
      "end_time": 3173000.0,
      "text": "the package subdirectory, that’s really interesting, automatically generate the package"
    },
    {
      "index": 643,
      "start_time": 3173000.0,
      "end_time": 3177980.0,
      "text": "documentation is especially quite rich. And then under the source directory, the source"
    },
    {
      "index": 644,
      "start_time": 3177980.0,
      "end_time": 3182210.0,
      "text": "gets served, but, of course, you can get out of this code repository, too. The difference"
    },
    {
      "index": 645,
      "start_time": 3182210.0,
      "end_time": 3188240.0,
      "text": "is that the source is processed by the coding Gofmt. The Gofmt is a pretty printer and all"
    },
    {
      "index": 646,
      "start_time": 3188240.0,
      "end_time": 3194920.0,
      "text": "of the coding repository has been formatted by Gofmt. So, rather than set a bunch of style"
    },
    {
      "index": 647,
      "start_time": 3194920.0,
      "end_time": 3198780.0,
      "text": "rules, we have a program that says this is what a code looks like, and you just run through"
    },
    {
      "index": 648,
      "start_time": 3198780.0,
      "end_time": 3203530.0,
      "text": "Gofmt when you check it in and that’s, just settles all those arguments. If you want debate,"
    },
    {
      "index": 649,
      "start_time": 3203530.0,
      "end_time": 3206840.0,
      "text": "if you wanted debate, we got to debate by changing Gofmt. You can’t debate by changing"
    },
    {
      "index": 650,
      "start_time": 3206840.0,
      "end_time": 3211110.0,
      "text": "a document, and I think it’s actually, it does an amazingly good job. Actually, Robert"
    },
    {
      "index": 651,
      "start_time": 3211110.0,
      "end_time": 3216180.0,
      "text": "[INDISTINCT] a good job. We have a debugger. It’s not quite ready, but it’s pretty"
    },
    {
      "index": 652,
      "start_time": 3216180.0,
      "end_time": 3219360.0,
      "text": "close. I hope by the end of the year we&#39;ll something functional but we’ll be happy"
    },
    {
      "index": 653,
      "start_time": 3219360.0,
      "end_time": 3225890.0,
      "text": "to show. But it&#39;s coming along and it will work with either environment but at the moment"
    },
    {
      "index": 654,
      "start_time": 3225890.0,
      "end_time": 3232840.0,
      "text": "its working in the 6G world primarily. Gccgo users can of course use gdb. Gdb doesn’t"
    },
    {
      "index": 655,
      "start_time": 3232840.0,
      "end_time": 3235390.0,
      "text": "understand the symbols tables. They&#39;re coming out of Ken&#39;s compiler, so it doesn’t work"
    },
    {
      "index": 656,
      "start_time": 3235390.0,
      "end_time": 3240430.0,
      "text": "very well with that. But with Gccgo compilation, you can use gdb, but it thinks that the C"
    },
    {
      "index": 657,
      "start_time": 3240430.0,
      "end_time": 3243920.0,
      "text": "program is debugging and there’s some weirdness in the symbol table. And also it doesn’t"
    },
    {
      "index": 658,
      "start_time": 3243920.0,
      "end_time": 3246590.0,
      "text": "know anything about the run time, which is a critical thing when you’re debugging on"
    },
    {
      "index": 659,
      "start_time": 3246590.0,
      "end_time": 3250570.0,
      "text": "an environment like this. So, we really got to get our debug up to scratch. We had a summary"
    },
    {
      "index": 660,
      "start_time": 3250570.0,
      "end_time": 3255290.0,
      "text": "in turn. Austin Clement was here working on that. It&#39;s pretty close, but not quite ready"
    },
    {
      "index": 661,
      "start_time": 3255290.0,
      "end_time": 3259720.0,
      "text": "for real use. One question everybody wants to know is what about generics. And the answer"
    },
    {
      "index": 662,
      "start_time": 3259720.0,
      "end_time": 3267540.0,
      "text": "is Go doesn’t have them yet. We don’t understand exactly what they do in Go’s"
    },
    {
      "index": 663,
      "start_time": 3267540.0,
      "end_time": 3272590.0,
      "text": "world. They’re quite subtle. The easy examples are easy to write down. It&#39;s obvious what"
    },
    {
      "index": 664,
      "start_time": 3272590.0,
      "end_time": 3277220.0,
      "text": "the easy examples do, but the complete, correct definition is going to be quite complicated."
    },
    {
      "index": 665,
      "start_time": 3277220.0,
      "end_time": 3281300.0,
      "text": "We want to make sure we get it right. In some ways, Go makes it simpler because there’s"
    },
    {
      "index": 666,
      "start_time": 3281300.0,
      "end_time": 3285140.0,
      "text": "no type inheritance, and that eliminates one branch of complexity in generics. But on the"
    },
    {
      "index": 667,
      "start_time": 3285140.0,
      "end_time": 3290050.0,
      "text": "other hand, you can put methods on things that are values of arbitrary size, so, that’s"
    },
    {
      "index": 668,
      "start_time": 3290050.0,
      "end_time": 3294660.0,
      "text": "a consequence, and the other directions are complicates and simplifies at the same time."
    },
    {
      "index": 669,
      "start_time": 3294660.0,
      "end_time": 3300050.0,
      "text": "And we just don’t think we understand it well enough to do them yet. Also, in the current"
    },
    {
      "index": 670,
      "start_time": 3300050.0,
      "end_time": 3305040.0,
      "text": "world, although that would be definitely useful and could solve a lot of problems, the map"
    },
    {
      "index": 671,
      "start_time": 3305040.0,
      "end_time": 3309580.0,
      "text": "and slice implementations and the interfaces themselves actually cover a lot of the sort"
    },
    {
      "index": 672,
      "start_time": 3309580.0,
      "end_time": 3312770.0,
      "text": "of obvious examples for generics, which is not to say they wouldn’t cover a lot of"
    },
    {
      "index": 673,
      "start_time": 3312770.0,
      "end_time": 3316460.0,
      "text": "others if they came along, but the need isn’t quite as acute as it is in the language. It"
    },
    {
      "index": 674,
      "start_time": 3316460.0,
      "end_time": 3322420.0,
      "text": "doesn’t have those features. You can in fact build collections fairly nicely using"
    },
    {
      "index": 675,
      "start_time": 3322420.0,
      "end_time": 3326720.0,
      "text": "what’s called the MT interface, which is just interface open close. That’s an interface"
    },
    {
      "index": 676,
      "start_time": 3326720.0,
      "end_time": 3331470.0,
      "text": "that implements no methods because everything in the world satisfies the MT interface. It&#39;s"
    },
    {
      "index": 677,
      "start_time": 3331470.0,
      "end_time": 3335980.0,
      "text": "kind of a little bit like it but in a completely different meaning the object in Java. And"
    },
    {
      "index": 678,
      "start_time": 3335980.0,
      "end_time": 3340360.0,
      "text": "you can build collections that use. There&#39;s quite a few checked in, but they have the"
    },
    {
      "index": 679,
      "start_time": 3340360.0,
      "end_time": 3345080.0,
      "text": "disadvantage that they’re not type safe since you have to unbox manually and stuff"
    },
    {
      "index": 680,
      "start_time": 3345080.0,
      "end_time": 3349330.0,
      "text": "like that. They’re not really what we would propose to do instead. It&#39;s just what we’re"
    },
    {
      "index": 681,
      "start_time": 3349330.0,
      "end_time": 3354450.0,
      "text": "using for now, why we struggle at this question. So generics, not yet but they&#39;re very subtle."
    },
    {
      "index": 682,
      "start_time": 3354450.0,
      "end_time": 3359300.0,
      "text": "It’s interesting in the codes workbook, Josh Black has a long discussion about them."
    },
    {
      "index": 683,
      "start_time": 3359300.0,
      "end_time": 3363390.0,
      "text": "And I think most people think that Java generics works really well including Josh, but he points"
    },
    {
      "index": 684,
      "start_time": 3363390.0,
      "end_time": 3367430.0,
      "text": "out they&#39;re actually quite a bit harder to get right than you think, and then maybe it&#39;s"
    },
    {
      "index": 685,
      "start_time": 3367430.0,
      "end_time": 3371410.0,
      "text": "time to think really hard before you put them in. So, they may come but they&#39;re not there"
    },
    {
      "index": 686,
      "start_time": 3371410.0,
      "end_time": 3377720.0,
      "text": "now. And, of course, there’s a million of other thing. Where’s my feature? Everybody"
    },
    {
      "index": 687,
      "start_time": 3377720.0,
      "end_time": 3381830.0,
      "text": "who programs has a feature they want, and chances are that some of the things you really"
    },
    {
      "index": 688,
      "start_time": 3381830.0,
      "end_time": 3385790.0,
      "text": "think are important are missing, or they might be there but not in the way you’re used"
    },
    {
      "index": 689,
      "start_time": 3385790.0,
      "end_time": 3391470.0,
      "text": "to. A really good example is inum but there is no iota. And iota&#39;s an interesting thing,"
    },
    {
      "index": 690,
      "start_time": 3391470.0,
      "end_time": 3395320.0,
      "text": "but it&#39;s not an inum. It&#39;s different. So, it may not be there, but there may be some"
    },
    {
      "index": 691,
      "start_time": 3395320.0,
      "end_time": 3398300.0,
      "text": "way to do what you want. It’s just Go is different or almost as good or maybe even"
    },
    {
      "index": 692,
      "start_time": 3398300.0,
      "end_time": 3403100.0,
      "text": "better. But why is it a feature there? Well, maybe it doesn’t really work in the language,"
    },
    {
      "index": 693,
      "start_time": 3403100.0,
      "end_time": 3406800.0,
      "text": "you know. Like there’s no point of arithmetic, point of arithmetic is nice but we can’t"
    },
    {
      "index": 694,
      "start_time": 3406800.0,
      "end_time": 3410880.0,
      "text": "do a point of arithmetic and make a language safe, there just not there. And the compiler"
    },
    {
      "index": 695,
      "start_time": 3410880.0,
      "end_time": 3415120.0,
      "text": "makes up for trying to compile a way some of the inefficiencies you get by having your"
    },
    {
      "index": 696,
      "start_time": 3415120.0,
      "end_time": 3419800.0,
      "text": "index and everywhere but on the other hand you got a safe length. So, a lot of the things"
    },
    {
      "index": 697,
      "start_time": 3419800.0,
      "end_time": 3423650.0,
      "text": "the people expect the language like this were not there because they break the rules and"
    },
    {
      "index": 698,
      "start_time": 3423650.0,
      "end_time": 3427200.0,
      "text": "we don’t have them. Or at least they break principles about what we think for language"
    },
    {
      "index": 699,
      "start_time": 3427200.0,
      "end_time": 3431550.0,
      "text": "should do. And there’s also a possible--like generics is a good example. They&#39;re just not"
    },
    {
      "index": 700,
      "start_time": 3431550.0,
      "end_time": 3435300.0,
      "text": "on top of our list. It doesn’t mean it won’t happen. Union types is another one we’ve"
    },
    {
      "index": 701,
      "start_time": 3435300.0,
      "end_time": 3438000.0,
      "text": "been thinking about. Actually, I think it would be a very good proposal for them, but"
    },
    {
      "index": 702,
      "start_time": 3438000.0,
      "end_time": 3441690.0,
      "text": "we haven’t done that yet. So it’s possible some of the things you’re finding for will"
    },
    {
      "index": 703,
      "start_time": 3441690.0,
      "end_time": 3447250.0,
      "text": "actually occur fairly sooner or not too far out. But it’s a different off language that"
    },
    {
      "index": 704,
      "start_time": 3447250.0,
      "end_time": 3450100.0,
      "text": "even if it doesn’t have the features you want, it may have features you haven’t used"
    },
    {
      "index": 705,
      "start_time": 3450100.0,
      "end_time": 3453790.0,
      "text": "before, if I can guarantee that some of you haven’t used before, the interface stuff"
    },
    {
      "index": 706,
      "start_time": 3453790.0,
      "end_time": 3458080.0,
      "text": "is very interesting. And don’t let the lack of things you expect stop you from playing"
    },
    {
      "index": 707,
      "start_time": 3458080.0,
      "end_time": 3461660.0,
      "text": "with things that are there and seeing that it does actually do of some pretty interesting"
    },
    {
      "index": 708,
      "start_time": 3461660.0,
      "end_time": 3466940.0,
      "text": "stuff. And a lot more information on this topic available is actually explicit language-assigned"
    },
    {
      "index": 709,
      "start_time": 3466940.0,
      "end_time": 3473410.0,
      "text": "FAQ on the website and it talks about a lot of the &quot;why things aren’t there&quot; things."
    },
    {
      "index": 710,
      "start_time": 3473410.0,
      "end_time": 3480430.0,
      "text": "So, to conclude, I think we really have a nice language. I’m having more fun programming"
    },
    {
      "index": 711,
      "start_time": 3480430.0,
      "end_time": 3483850.0,
      "text": "than I’ve had in a long time because I feel like I’m getting work done, because I’m"
    },
    {
      "index": 712,
      "start_time": 3483850.0,
      "end_time": 3487640.0,
      "text": "getting work done. It’s early yet. I think the language is going to evolve some more,"
    },
    {
      "index": 713,
      "start_time": 3487640.0,
      "end_time": 3491590.0,
      "text": "these things we know, but a lot of the basics are locked down pretty well. I feel pretty"
    },
    {
      "index": 714,
      "start_time": 3491590.0,
      "end_time": 3495900.0,
      "text": "comfortable with them. It’s a very comfortable language to work in. It’s very productive."
    },
    {
      "index": 715,
      "start_time": 3495900.0,
      "end_time": 3501510.0,
      "text": "You can write code really fast and have it work and be safe. There’s tons of documentation."
    },
    {
      "index": 716,
      "start_time": 3501510.0,
      "end_time": 3507070.0,
      "text": "There’s a specification, complete spec of the language. There’s simple to trial for"
    },
    {
      "index": 717,
      "start_time": 3507070.0,
      "end_time": 3512140.0,
      "text": "beginners. There’s a document called Effective Go, which is growing to sort of explain idioms"
    },
    {
      "index": 718,
      "start_time": 3512140.0,
      "end_time": 3516240.0,
      "text": "and how you think about things and language differently. There’s some FAQ, and there&#39;s"
    },
    {
      "index": 719,
      "start_time": 3516240.0,
      "end_time": 3523750.0,
      "text": "even other things than that. All the implementations are available as open-source, the 6GHG5G suite"
    },
    {
      "index": 720,
      "start_time": 3523750.0,
      "end_time": 3529910.0,
      "text": "and all its tools, the gzgo and all that stuff is also in the different place, but it’s"
    },
    {
      "index": 721,
      "start_time": 3529910.0,
      "end_time": 3533370.0,
      "text": "also going out and it will be linked from the landing page. And so, if you want to try"
    },
    {
      "index": 722,
      "start_time": 3533370.0,
      "end_time": 3537430.0,
      "text": "it, go get it. If you want to help, please do it. There’s tons of work to do to build"
    },
    {
      "index": 723,
      "start_time": 3537430.0,
      "end_time": 3543180.0,
      "text": "it up to another level. We really are welcoming people to come in and talk about stuff, especially"
    },
    {
      "index": 724,
      "start_time": 3543180.0,
      "end_time": 3546430.0,
      "text": "if they want to help us do some interesting library work or build new tools, there’s"
    },
    {
      "index": 725,
      "start_time": 3546430.0,
      "end_time": 3550950.0,
      "text": "plenty of room for things to happen. So that’s our site and that’s our language. Thanks"
    },
    {
      "index": 726,
      "start_time": 3550950.0,
      "end_time": 3560950.0,
      "text": "for listening."
    }
  ]
}