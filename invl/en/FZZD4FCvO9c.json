{
  "video_id": "FZZD4FCvO9c",
  "title": "Computer Vision with Intel",
  "es": 0,
  "json": [
    {
      "index": 1,
      "start_time": 270.0,
      "end_time": 2930.0,
      "text": "- Cloud or Edge?"
    },
    {
      "index": 2,
      "start_time": 2930.0,
      "end_time": 3923.0,
      "text": "Why not both?"
    },
    {
      "index": 3,
      "start_time": 5300.0,
      "end_time": 8850.0,
      "text": "Hello world it's Siraj and\nIntel recently released"
    },
    {
      "index": 4,
      "start_time": 8850.0,
      "end_time": 12190.0,
      "text": "a toolkit for developers called OpenVINO"
    },
    {
      "index": 5,
      "start_time": 12190.0,
      "end_time": 15290.0,
      "text": "to help build computer vision applications"
    },
    {
      "index": 6,
      "start_time": 15290.0,
      "end_time": 18310.0,
      "text": "that can be used at the\nEdge or in the Cloud."
    },
    {
      "index": 7,
      "start_time": 18310.0,
      "end_time": 21390.0,
      "text": "OpenVINO stands for Open Visual Inference"
    },
    {
      "index": 8,
      "start_time": 21390.0,
      "end_time": 23570.0,
      "text": "and Neural Network Optimization."
    },
    {
      "index": 9,
      "start_time": 23570.0,
      "end_time": 25140.0,
      "text": "The toolkit is available for"
    },
    {
      "index": 10,
      "start_time": 25140.0,
      "end_time": 27890.0,
      "text": "both Windows and Linux platforms"
    },
    {
      "index": 11,
      "start_time": 27890.0,
      "end_time": 32300.0,
      "text": "and it enables us to use\nconvolutional neural networks"
    },
    {
      "index": 12,
      "start_time": 32299.999999999996,
      "end_time": 34680.0,
      "text": "for computer vision at the Edge."
    },
    {
      "index": 13,
      "start_time": 34680.0,
      "end_time": 37770.0,
      "text": "It also supports heterogeneous execution"
    },
    {
      "index": 14,
      "start_time": 37770.0,
      "end_time": 41120.0,
      "text": "across Intel's computer\nvision accelerators."
    },
    {
      "index": 15,
      "start_time": 41120.0,
      "end_time": 45420.0,
      "text": "Using a common API for the\nCPU, Intel integrated graphics,"
    },
    {
      "index": 16,
      "start_time": 45420.0,
      "end_time": 47700.0,
      "text": "the Intel Movidius Neural Compute Stick,"
    },
    {
      "index": 17,
      "start_time": 47700.0,
      "end_time": 51640.0,
      "text": "which I already made a\nvideo about, and FPGA."
    },
    {
      "index": 18,
      "start_time": 51640.0,
      "end_time": 54160.0,
      "text": "Basically develop once deploy anywhere."
    },
    {
      "index": 19,
      "start_time": 54160.0,
      "end_time": 57930.0,
      "text": "And since computer vision\ncan be difficult to master"
    },
    {
      "index": 20,
      "start_time": 57930.0,
      "end_time": 60300.0,
      "text": "it includes an easy to use library"
    },
    {
      "index": 21,
      "start_time": 60300.0,
      "end_time": 63670.0,
      "text": "of CV functions and pre-optimized kernels."
    },
    {
      "index": 22,
      "start_time": 63670.0,
      "end_time": 66360.0,
      "text": "This can be applied to a\nwhole range of applications."
    },
    {
      "index": 23,
      "start_time": 66360.0,
      "end_time": 69110.0,
      "text": "Like face detection, object detection"
    },
    {
      "index": 24,
      "start_time": 69110.0,
      "end_time": 71170.0,
      "text": "and license plate recognition,"
    },
    {
      "index": 25,
      "start_time": 71170.0,
      "end_time": 73440.0,
      "text": "which we'll demo in this video."
    },
    {
      "index": 26,
      "start_time": 73440.0,
      "end_time": 75910.0,
      "text": "Using these dependencies\nit's inference engine"
    },
    {
      "index": 27,
      "start_time": 75910.0,
      "end_time": 78130.0,
      "text": "can run Deep Learning models easily."
    },
    {
      "index": 28,
      "start_time": 78130.0,
      "end_time": 81590.0,
      "text": "And it's model optimizer imports, converts"
    },
    {
      "index": 29,
      "start_time": 81590.0,
      "end_time": 83730.0,
      "text": "and optimizes models that were"
    },
    {
      "index": 30,
      "start_time": 83730.0,
      "end_time": 85710.0,
      "text": "trained in standard frameworks"
    },
    {
      "index": 31,
      "start_time": 85710.0,
      "end_time": 88570.0,
      "text": "into a format usable by Intel tools"
    },
    {
      "index": 32,
      "start_time": 88570.0,
      "end_time": 90720.0,
      "text": "like the Inference Engine."
    },
    {
      "index": 33,
      "start_time": 90720.0,
      "end_time": 93280.0,
      "text": "If you don't feel like\ntraining your own model"
    },
    {
      "index": 34,
      "start_time": 93280.0,
      "end_time": 94800.0,
      "text": "the toolkit comes with a bunch"
    },
    {
      "index": 35,
      "start_time": 94800.0,
      "end_time": 97970.0,
      "text": "of different pre-trained\nmodels you can use."
    },
    {
      "index": 36,
      "start_time": 97970.0,
      "end_time": 100710.0,
      "text": "At the low level the\ntoolkit includes support"
    },
    {
      "index": 37,
      "start_time": 100710.0,
      "end_time": 105550.0,
      "text": "for both the OpenCV and OpenVX\ncomputer vision libraries."
    },
    {
      "index": 38,
      "start_time": 105550.0,
      "end_time": 108380.0,
      "text": "Especially optimized for Intel hardware,"
    },
    {
      "index": 39,
      "start_time": 108380.0,
      "end_time": 111090.0,
      "text": "it also has an included Media SDK"
    },
    {
      "index": 40,
      "start_time": 111090.0,
      "end_time": 114450.0,
      "text": "that offers us access\nto hardware accelerated"
    },
    {
      "index": 41,
      "start_time": 114450.0,
      "end_time": 117070.0,
      "text": "video codex and frame processing."
    },
    {
      "index": 42,
      "start_time": 117070.0,
      "end_time": 120930.0,
      "text": "And it enables the use of\nthe popular OpenCL library"
    },
    {
      "index": 43,
      "start_time": 120930.0,
      "end_time": 124250.0,
      "text": "on the GPU or CPU for Intel processors."
    },
    {
      "index": 44,
      "start_time": 124250.0,
      "end_time": 125840.0,
      "text": "Optimizing and deploying one"
    },
    {
      "index": 45,
      "start_time": 125840.0,
      "end_time": 128380.0,
      "text": "of these models is relatively easy."
    },
    {
      "index": 46,
      "start_time": 128380.0,
      "end_time": 131130.0,
      "text": "First we just configure\nthe model optimizer"
    },
    {
      "index": 47,
      "start_time": 131130.0,
      "end_time": 133180.0,
      "text": "for whichever framework we're using"
    },
    {
      "index": 48,
      "start_time": 133180.0,
      "end_time": 137420.0,
      "text": "including TensorFlow,\nOnyx, MXNet and Caffe."
    },
    {
      "index": 49,
      "start_time": 137420.0,
      "end_time": 139760.0,
      "text": "Then we can convert a trained model"
    },
    {
      "index": 50,
      "start_time": 139760.0,
      "end_time": 143246.0,
      "text": "to produce an optimized\nintermediate representation"
    },
    {
      "index": 51,
      "start_time": 143246.0,
      "end_time": 146910.0,
      "text": "of the model based on the\ntrained network topology,"
    },
    {
      "index": 52,
      "start_time": 146910.0,
      "end_time": 148800.0,
      "text": "weights and bias values."
    },
    {
      "index": 53,
      "start_time": 148800.0,
      "end_time": 150150.0,
      "text": "We can then test the model in"
    },
    {
      "index": 54,
      "start_time": 150150.0,
      "end_time": 152047.0,
      "text": "the intermediate representation format"
    },
    {
      "index": 55,
      "start_time": 152047.0,
      "end_time": 155370.0,
      "text": "using the inference engine\nin the target environment"
    },
    {
      "index": 56,
      "start_time": 155370.0,
      "end_time": 157020.0,
      "text": "via either the provided"
    },
    {
      "index": 57,
      "start_time": 157020.0,
      "end_time": 159930.0,
      "text": "inference engine validation application or"
    },
    {
      "index": 58,
      "start_time": 159930.0,
      "end_time": 162380.0,
      "text": "one of several sample applications."
    },
    {
      "index": 59,
      "start_time": 162380.0,
      "end_time": 164790.0,
      "text": "Lastly we can integrate\nthe inference engine"
    },
    {
      "index": 60,
      "start_time": 164790.0,
      "end_time": 167020.0,
      "text": "into our application to deploy"
    },
    {
      "index": 61,
      "start_time": 167020.0,
      "end_time": 169140.0,
      "text": "the model in the target environment."
    },
    {
      "index": 62,
      "start_time": 169140.0,
      "end_time": 172240.0,
      "text": "So let's demo the\nexample of using OpenVINO"
    },
    {
      "index": 63,
      "start_time": 172240.0,
      "end_time": 174150.0,
      "text": "to perform vehicle detection."
    },
    {
      "index": 64,
      "start_time": 174150.0,
      "end_time": 177840.0,
      "text": "Which will detect a car\nand it's license plate."
    },
    {
      "index": 65,
      "start_time": 177840.0,
      "end_time": 180800.0,
      "text": "We'll want to use a\npre-trained model for this."
    },
    {
      "index": 66,
      "start_time": 180800.0,
      "end_time": 184620.0,
      "text": "Specifically the faster RCNN model."
    },
    {
      "index": 67,
      "start_time": 184620.0,
      "end_time": 186880.0,
      "text": "This is actually two neural networks"
    },
    {
      "index": 68,
      "start_time": 186880.0,
      "end_time": 190958.0,
      "text": "a regional proposal network\nthat generates region proposals"
    },
    {
      "index": 69,
      "start_time": 190958.0,
      "end_time": 195410.0,
      "text": "and a network using these\nproposals to detect objects."
    },
    {
      "index": 70,
      "start_time": 195410.0,
      "end_time": 198620.0,
      "text": "The output of the RPN is a bunch of boxes"
    },
    {
      "index": 71,
      "start_time": 198620.0,
      "end_time": 202090.0,
      "text": "that will be examined by\na classifier and regressor"
    },
    {
      "index": 72,
      "start_time": 202090.0,
      "end_time": 205470.0,
      "text": "to eventually check the\noccurrence of objects."
    },
    {
      "index": 73,
      "start_time": 205470.0,
      "end_time": 207850.0,
      "text": "The RPN thus predicts the possibility"
    },
    {
      "index": 74,
      "start_time": 207850.0,
      "end_time": 211366.0,
      "text": "of a box being background or\nforeground and refines it."
    },
    {
      "index": 75,
      "start_time": 211366.0,
      "end_time": 214380.0,
      "text": "In the first step the\ninput image goes through"
    },
    {
      "index": 76,
      "start_time": 214380.0,
      "end_time": 216880.0,
      "text": "the convolutional\nnetwork which will output"
    },
    {
      "index": 77,
      "start_time": 216880.0,
      "end_time": 218879.0,
      "text": "a set of convolutional feature maps"
    },
    {
      "index": 78,
      "start_time": 218879.0,
      "end_time": 221500.0,
      "text": "on the last convolutional layer."
    },
    {
      "index": 79,
      "start_time": 221500.0,
      "end_time": 224220.0,
      "text": "Then a sliding window is run spatially"
    },
    {
      "index": 80,
      "start_time": 224220.0,
      "end_time": 225640.0,
      "text": "on these feature maps."
    },
    {
      "index": 81,
      "start_time": 225640.0,
      "end_time": 228318.0,
      "text": "For each of sliding window\na set of nine anchor boxes"
    },
    {
      "index": 82,
      "start_time": 228318.0,
      "end_time": 231192.0,
      "text": "are generated which all\nhave the same center"
    },
    {
      "index": 83,
      "start_time": 231192.0,
      "end_time": 233970.0,
      "text": "but with three different aspect ratios"
    },
    {
      "index": 84,
      "start_time": 233970.0,
      "end_time": 235720.0,
      "text": "and three different scales."
    },
    {
      "index": 85,
      "start_time": 235720.0,
      "end_time": 237788.0,
      "text": "Lastly the spatial features extracted"
    },
    {
      "index": 86,
      "start_time": 237788.0,
      "end_time": 240181.0,
      "text": "from these convolutional feature maps"
    },
    {
      "index": 87,
      "start_time": 240181.0,
      "end_time": 242170.0,
      "text": "are given to a smaller network"
    },
    {
      "index": 88,
      "start_time": 242170.0,
      "end_time": 245867.0,
      "text": "which has two tasks,\nclassification and regression."
    },
    {
      "index": 89,
      "start_time": 245867.0,
      "end_time": 248240.0,
      "text": "The output of the regressor decides"
    },
    {
      "index": 90,
      "start_time": 248240.0,
      "end_time": 249457.0,
      "text": "the predicted bounding box."
    },
    {
      "index": 91,
      "start_time": 249457.0,
      "end_time": 252300.0,
      "text": "The output of the\nclassification sub-network"
    },
    {
      "index": 92,
      "start_time": 252300.0,
      "end_time": 254380.0,
      "text": "is a probability P indicating"
    },
    {
      "index": 93,
      "start_time": 254380.0,
      "end_time": 256390.0,
      "text": "weather the predicted box contains"
    },
    {
      "index": 94,
      "start_time": 256390.0,
      "end_time": 259040.0,
      "text": "an object or it's from a background."
    },
    {
      "index": 95,
      "start_time": 259040.00000000003,
      "end_time": 262038.00000000003,
      "text": "We can download the weights,\nmetadata and model weights"
    },
    {
      "index": 96,
      "start_time": 262038.0,
      "end_time": 266080.0,
      "text": "directly from GitHub and\nDropbox respectively."
    },
    {
      "index": 97,
      "start_time": 266080.0,
      "end_time": 267220.0,
      "text": "It's a Caffe model."
    },
    {
      "index": 98,
      "start_time": 267220.0,
      "end_time": 269542.0,
      "text": "So we can run it though\nthe model optimizer"
    },
    {
      "index": 99,
      "start_time": 269542.0,
      "end_time": 272510.0,
      "text": "using the following command in terminal."
    },
    {
      "index": 100,
      "start_time": 272510.0,
      "end_time": 275310.0,
      "text": "This will create an\nintermediate representation"
    },
    {
      "index": 101,
      "start_time": 275310.0,
      "end_time": 277439.0,
      "text": "that our inference engine can serve."
    },
    {
      "index": 102,
      "start_time": 277439.0,
      "end_time": 280020.0,
      "text": "When we run the application we'll receive"
    },
    {
      "index": 103,
      "start_time": 280020.0,
      "end_time": 283240.0,
      "text": "an output file labeled 0.bmp."
    },
    {
      "index": 104,
      "start_time": 283240.0,
      "end_time": 285757.0,
      "text": "When we open that file\nwe'll see the detected car"
    },
    {
      "index": 105,
      "start_time": 285757.0,
      "end_time": 287982.0,
      "text": "enclosed in rectangles."
    },
    {
      "index": 106,
      "start_time": 287982.0,
      "end_time": 291100.0,
      "text": "It outputs the list of classes\nof the detected objects"
    },
    {
      "index": 107,
      "start_time": 291100.0,
      "end_time": 293925.0,
      "text": "along with the respected confidence values"
    },
    {
      "index": 108,
      "start_time": 293925.0,
      "end_time": 296010.0,
      "text": "and the co-ordinates of the rectangles"
    },
    {
      "index": 109,
      "start_time": 296010.0,
      "end_time": 297890.0,
      "text": "in the the standard output stream."
    },
    {
      "index": 110,
      "start_time": 297890.0,
      "end_time": 300210.0,
      "text": "As you can see this\nhigh performance library"
    },
    {
      "index": 111,
      "start_time": 300210.0,
      "end_time": 303600.0,
      "text": "makes computer vision really\nsimple for anyone to try."
    },
    {
      "index": 112,
      "start_time": 303600.0,
      "end_time": 305380.0,
      "text": "I've linked to some great resources"
    },
    {
      "index": 113,
      "start_time": 305380.0,
      "end_time": 307140.0,
      "text": "to learn more in the video description"
    },
    {
      "index": 114,
      "start_time": 307140.0,
      "end_time": 308900.0,
      "text": "including a link to the free download"
    },
    {
      "index": 115,
      "start_time": 308900.0,
      "end_time": 310530.0,
      "text": "on the OpenVINO website."
    },
    {
      "index": 116,
      "start_time": 310530.0,
      "end_time": 312337.0,
      "text": "Please subscribe for\nmore programing videos."
    },
    {
      "index": 117,
      "start_time": 312337.0,
      "end_time": 313930.0,
      "text": "And for now I've got to keep"
    },
    {
      "index": 118,
      "start_time": 313930.0,
      "end_time": 316793.0,
      "text": "an open source so thanks for watching."
    }
  ]
}