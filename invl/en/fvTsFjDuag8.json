{
  "video_id": "fvTsFjDuag8",
  "title": "Valgrind",
  "es": 1,
  "json": [
    {
      "index": 1,
      "start_time": 0.0,
      "end_time": 2000.0,
      "text": "[Valgrind]"
    },
    {
      "index": 2,
      "start_time": 2000.0,
      "end_time": 5000.0,
      "text": "[Nate Hardison, Harvard University]"
    },
    {
      "index": 3,
      "start_time": 5000.0,
      "end_time": 7000.0,
      "text": "This is CS50, CS50.TV]"
    },
    {
      "index": 4,
      "start_time": 7000.0,
      "end_time": 10000.0,
      "text": "Some of the most difficult bugs in C programs"
    },
    {
      "index": 5,
      "start_time": 10000.0,
      "end_time": 13000.0,
      "text": "come from the mismanagement of memory."
    },
    {
      "index": 6,
      "start_time": 13000.0,
      "end_time": 15000.0,
      "text": "There are a huge number of ways to screw things up,"
    },
    {
      "index": 7,
      "start_time": 15000.0,
      "end_time": 17000.0,
      "text": "including allocating the wrong amount of memory,"
    },
    {
      "index": 8,
      "start_time": 17000.0,
      "end_time": 20000.0,
      "text": "forgetting to initialize variables,"
    },
    {
      "index": 9,
      "start_time": 20000.0,
      "end_time": 23000.0,
      "text": "writing before or after the end of a buffer,"
    },
    {
      "index": 10,
      "start_time": 23000.0,
      "end_time": 25000.0,
      "text": "and freeing keep memory multiple times."
    },
    {
      "index": 11,
      "start_time": 25000.0,
      "end_time": 28000.0,
      "text": "The symptoms range from intermittent crashes"
    },
    {
      "index": 12,
      "start_time": 28000.0,
      "end_time": 30000.0,
      "text": "to mysteriously overwritten values,"
    },
    {
      "index": 13,
      "start_time": 30000.0,
      "end_time": 34000.0,
      "text": "often at places and times far removed from the original error."
    },
    {
      "index": 14,
      "start_time": 34000.0,
      "end_time": 37000.0,
      "text": "Tracing the observed problem back to the underlying root cause"
    },
    {
      "index": 15,
      "start_time": 37000.0,
      "end_time": 39000.0,
      "text": "can be challenging,"
    },
    {
      "index": 16,
      "start_time": 39000.0,
      "end_time": 42000.0,
      "text": "but fortunately there's a helpful program called Valgrind"
    },
    {
      "index": 17,
      "start_time": 42000.0,
      "end_time": 44000.0,
      "text": "that can do a lot to help."
    },
    {
      "index": 18,
      "start_time": 44000.0,
      "end_time": 47000.0,
      "text": ">> You run a program under Valgrind to enable"
    },
    {
      "index": 19,
      "start_time": 47000.0,
      "end_time": 50000.0,
      "text": "extensive checking of heap memory allocations and accesses."
    },
    {
      "index": 20,
      "start_time": 50000.0,
      "end_time": 53000.0,
      "text": "When Valgrind detects a problem, it gives you immediate,"
    },
    {
      "index": 21,
      "start_time": 53000.0,
      "end_time": 56000.0,
      "text": "direct information that allows you to"
    },
    {
      "index": 22,
      "start_time": 56000.0,
      "end_time": 58000.0,
      "text": "more easily find and fix the problem."
    },
    {
      "index": 23,
      "start_time": 58000.0,
      "end_time": 61000.0,
      "text": "Valgrind also reports on less deadly memory issues,"
    },
    {
      "index": 24,
      "start_time": 61000.0,
      "end_time": 64000.0,
      "text": "such as memory leaks, allocating heap memory,"
    },
    {
      "index": 25,
      "start_time": 64000.0,
      "end_time": 67000.0,
      "text": "and forgetting to free it."
    },
    {
      "index": 26,
      "start_time": 67000.0,
      "end_time": 70000.0,
      "text": "Like our compiler, Clang, in our debugger, GDB,"
    },
    {
      "index": 27,
      "start_time": 70000.0,
      "end_time": 74000.0,
      "text": "Valgrind is free software, and it is installed on the appliance."
    },
    {
      "index": 28,
      "start_time": 74000.0,
      "end_time": 76000.0,
      "text": "Valgrind runs on your binary executable,"
    },
    {
      "index": 29,
      "start_time": 76000.0,
      "end_time": 80000.0,
      "text": "not your .c or .h source code files,"
    },
    {
      "index": 30,
      "start_time": 80000.0,
      "end_time": 83000.0,
      "text": "so be sure you have compiled an up-to-date copy of your program"
    },
    {
      "index": 31,
      "start_time": 83000.0,
      "end_time": 85000.0,
      "text": "using Clang or Make."
    },
    {
      "index": 32,
      "start_time": 85000.0,
      "end_time": 88000.0,
      "text": "Then, running your program under Valgrind can be"
    },
    {
      "index": 33,
      "start_time": 88000.0,
      "end_time": 92000.0,
      "text": "as simple as just prefixing the standard program command with the word Valgrind,"
    },
    {
      "index": 34,
      "start_time": 92000.0,
      "end_time": 95000.0,
      "text": "which starts up Valgrind and runs the program inside of it."
    },
    {
      "index": 35,
      "start_time": 95000.0,
      "end_time": 98000.0,
      "text": "When starting, Valgrind does some complex"
    },
    {
      "index": 36,
      "start_time": 98000.0,
      "end_time": 101000.0,
      "text": "jiggering to configure the executable for the memory checks,"
    },
    {
      "index": 37,
      "start_time": 101000.0,
      "end_time": 104000.0,
      "text": "so it can take a bit to get up and running."
    },
    {
      "index": 38,
      "start_time": 104000.0,
      "end_time": 108000.0,
      "text": "The program will then execute normally, be it much more slowly,"
    },
    {
      "index": 39,
      "start_time": 108000.0,
      "end_time": 112000.0,
      "text": "and when it finishes, Valgrind will print a summary of its memory usage."
    },
    {
      "index": 40,
      "start_time": 112000.0,
      "end_time": 118000.0,
      "text": "If all goes well, it will look something like this:"
    },
    {
      "index": 41,
      "start_time": 118000.0,
      "end_time": 121000.0,
      "text": "In this case, ./clean_program"
    },
    {
      "index": 42,
      "start_time": 121000.0,
      "end_time": 124000.0,
      "text": "is the path to the program I want to run."
    },
    {
      "index": 43,
      "start_time": 124000.0,
      "end_time": 126000.0,
      "text": "And while this one doesn't take any arguments,"
    },
    {
      "index": 44,
      "start_time": 126000.0,
      "end_time": 129000.0,
      "text": "if it did I'd just tack them on to the end of the command as usual."
    },
    {
      "index": 45,
      "start_time": 129000.0,
      "end_time": 132000.0,
      "text": "Clean program is just a silly little program I created"
    },
    {
      "index": 46,
      "start_time": 132000.0,
      "end_time": 135000.0,
      "text": "that allocates space for a block of ints on the heap,"
    },
    {
      "index": 47,
      "start_time": 135000.0,
      "end_time": 139000.0,
      "text": "put some values inside of them, and frees the whole block."
    },
    {
      "index": 48,
      "start_time": 139000.0,
      "end_time": 143000.0,
      "text": "This is what you're shooting for, no errors and no leaks."
    },
    {
      "index": 49,
      "start_time": 143000.0,
      "end_time": 147000.0,
      "text": ">> Another important metric is the total number of bytes allocated."
    },
    {
      "index": 50,
      "start_time": 147000.0,
      "end_time": 152000.0,
      "text": "Depending on the program, if your allocations are in the megabytes or higher,"
    },
    {
      "index": 51,
      "start_time": 152000.0,
      "end_time": 154000.0,
      "text": "you're probably doing something wrong."
    },
    {
      "index": 52,
      "start_time": 154000.0,
      "end_time": 157000.0,
      "text": "Are you unnecessarily storing duplicates?"
    },
    {
      "index": 53,
      "start_time": 157000.0,
      "end_time": 160000.0,
      "text": "Are you using the heap for storage, when it would be better to use the stack?"
    },
    {
      "index": 54,
      "start_time": 160000.0,
      "end_time": 163000.0,
      "text": "So, memory errors can be truly evil."
    },
    {
      "index": 55,
      "start_time": 163000.0,
      "end_time": 166000.0,
      "text": "The more overt ones cause spectacular crashes,"
    },
    {
      "index": 56,
      "start_time": 166000.0,
      "end_time": 169000.0,
      "text": "but even then it can still be hard to pinpoint"
    },
    {
      "index": 57,
      "start_time": 169000.0,
      "end_time": 171000.0,
      "text": "what exactly led to the crash."
    },
    {
      "index": 58,
      "start_time": 171000.0,
      "end_time": 174000.0,
      "text": "More insidiously, a program with a memory error"
    },
    {
      "index": 59,
      "start_time": 174000.0,
      "end_time": 176000.0,
      "text": "can still compile cleanly"
    },
    {
      "index": 60,
      "start_time": 176000.0,
      "end_time": 178000.0,
      "text": "and can still seem to work correctly"
    },
    {
      "index": 61,
      "start_time": 178000.0,
      "end_time": 181000.0,
      "text": "because you managed to get lucky most of the time."
    },
    {
      "index": 62,
      "start_time": 181000.0,
      "end_time": 184000.0,
      "text": "After several \"successful outcomes,\""
    },
    {
      "index": 63,
      "start_time": 184000.0,
      "end_time": 187000.0,
      "text": "you might just think that a crash is a fluke of the computer,"
    },
    {
      "index": 64,
      "start_time": 187000.0,
      "end_time": 190000.0,
      "text": "but the computer is never wrong."
    },
    {
      "index": 65,
      "start_time": 190000.0,
      "end_time": 193000.0,
      "text": ">> Running Valgrind can help you track down the cause of visible memory errors"
    },
    {
      "index": 66,
      "start_time": 193000.0,
      "end_time": 198000.0,
      "text": "as well as find lurking errors you don't even yet know about."
    },
    {
      "index": 67,
      "start_time": 198000.0,
      "end_time": 202000.0,
      "text": "Each time Valgrind detects a problem, it prints information about what it observed."
    },
    {
      "index": 68,
      "start_time": 202000.0,
      "end_time": 204000.0,
      "text": "Each item is fairly terse--"
    },
    {
      "index": 69,
      "start_time": 204000.0,
      "end_time": 207000.0,
      "text": "the source line of the offending instruction, what the issue is,"
    },
    {
      "index": 70,
      "start_time": 207000.0,
      "end_time": 210000.0,
      "text": "and a little info about the memory involved--"
    },
    {
      "index": 71,
      "start_time": 210000.0,
      "end_time": 214000.0,
      "text": "but often it's enough information to direct your attention to the right place."
    },
    {
      "index": 72,
      "start_time": 214000.0,
      "end_time": 217000.0,
      "text": "Here is an example of Valgrind running on a buggy program"
    },
    {
      "index": 73,
      "start_time": 217000.0,
      "end_time": 220000.0,
      "text": "that does an invalid read of heap memory."
    },
    {
      "index": 74,
      "start_time": 220000.0,
      "end_time": 229000.0,
      "text": "We see no errors or warnings in compilation."
    },
    {
      "index": 75,
      "start_time": 229000.0,
      "end_time": 233000.0,
      "text": "Uh-oh, the error summary says that there are two errors--"
    },
    {
      "index": 76,
      "start_time": 233000.0,
      "end_time": 236000.0,
      "text": "two invalid reads of size 4--bytes, that is."
    },
    {
      "index": 77,
      "start_time": 236000.0,
      "end_time": 241000.0,
      "text": "Both bad reads occurred in the main function of invalid_read.c,"
    },
    {
      "index": 78,
      "start_time": 241000.0,
      "end_time": 244000.0,
      "text": "the first on line 16 and the second on line 19."
    },
    {
      "index": 79,
      "start_time": 244000.0,
      "end_time": 246000.0,
      "text": "Let's look at the code."
    },
    {
      "index": 80,
      "start_time": 246000.0,
      "end_time": 251000.0,
      "text": "Looks like the first call to printf tries to read one int past the end of our memory block."
    },
    {
      "index": 81,
      "start_time": 251000.0,
      "end_time": 253000.0,
      "text": "If we look back at Valgrind's output,"
    },
    {
      "index": 82,
      "start_time": 253000.0,
      "end_time": 256000.0,
      "text": "we see that Valgrind told us exactly that."
    },
    {
      "index": 83,
      "start_time": 256000.0,
      "end_time": 259000.0,
      "text": "The address we're trying to read starts 0 bytes"
    },
    {
      "index": 84,
      "start_time": 259000.0,
      "end_time": 262000.0,
      "text": "past the end of the block of size 16 bytes--"
    },
    {
      "index": 85,
      "start_time": 262000.0,
      "end_time": 265000.0,
      "text": "four 32-bit ints that we allocated."
    },
    {
      "index": 86,
      "start_time": 265000.0,
      "end_time": 269000.0,
      "text": "That is, the address we were trying to read starts right at the end of our block,"
    },
    {
      "index": 87,
      "start_time": 269000.0,
      "end_time": 272000.0,
      "text": "just as we see in our bad printf call."
    },
    {
      "index": 88,
      "start_time": 272000.0,
      "end_time": 276000.0,
      "text": "Now, invalid reads might not seem like that big of a deal,"
    },
    {
      "index": 89,
      "start_time": 276000.0,
      "end_time": 279000.0,
      "text": "but if you're using that data to control the flow of your program--"
    },
    {
      "index": 90,
      "start_time": 279000.0,
      "end_time": 282000.0,
      "text": "for example, as part of an if statement or loop--"
    },
    {
      "index": 91,
      "start_time": 282000.0,
      "end_time": 285000.0,
      "text": "then things can silently go bad."
    },
    {
      "index": 92,
      "start_time": 285000.0,
      "end_time": 287000.0,
      "text": "Watch how I can run the invalid_read program"
    },
    {
      "index": 93,
      "start_time": 287000.0,
      "end_time": 290000.0,
      "text": "and nothing out of the ordinary happens."
    },
    {
      "index": 94,
      "start_time": 290000.0,
      "end_time": 292000.0,
      "text": "Scary, huh?"
    },
    {
      "index": 95,
      "start_time": 292000.0,
      "end_time": 296000.0,
      "text": ">> Now, let's look at some more kinds of errors that you might encounter in your code,"
    },
    {
      "index": 96,
      "start_time": 296000.0,
      "end_time": 299000.0,
      "text": "and we'll see how Valgrind detects them."
    },
    {
      "index": 97,
      "start_time": 299000.0,
      "end_time": 301000.0,
      "text": "We just saw an example of an invalid_read,"
    },
    {
      "index": 98,
      "start_time": 301000.0,
      "end_time": 304000.0,
      "text": "so now let's check out an invalid_write."
    },
    {
      "index": 99,
      "start_time": 304000.0,
      "end_time": 309000.0,
      "text": "Again, no errors or warnings in compilation."
    },
    {
      "index": 100,
      "start_time": 309000.0,
      "end_time": 312000.0,
      "text": "Okay, Valgrind says that there are two errors in this program--"
    },
    {
      "index": 101,
      "start_time": 312000.0,
      "end_time": 315000.0,
      "text": "and invalid_write and an invalid_read."
    },
    {
      "index": 102,
      "start_time": 315000.0,
      "end_time": 318000.0,
      "text": "Let's check out this code."
    },
    {
      "index": 103,
      "start_time": 318000.0,
      "end_time": 321000.0,
      "text": "Looks like we've got an instance of the classic strlen plus one bug."
    },
    {
      "index": 104,
      "start_time": 321000.0,
      "end_time": 324000.0,
      "text": "The code doesn't malloc an extra byte of space"
    },
    {
      "index": 105,
      "start_time": 324000.0,
      "end_time": 326000.0,
      "text": "for the /0 character,"
    },
    {
      "index": 106,
      "start_time": 326000.0,
      "end_time": 330000.0,
      "text": "so when str copy went to write it at ssubstrlen \"cs50 rocks!\""
    },
    {
      "index": 107,
      "start_time": 330000.0,
      "end_time": 333000.0,
      "text": "it wrote 1 byte past the end of our block."
    },
    {
      "index": 108,
      "start_time": 333000.0,
      "end_time": 336000.0,
      "text": "The invalid_read comes when we make our call to printf."
    },
    {
      "index": 109,
      "start_time": 336000.0,
      "end_time": 340000.0,
      "text": "Printf ends up reading invalid memory when it reads the /0 character"
    },
    {
      "index": 110,
      "start_time": 340000.0,
      "end_time": 343000.0,
      "text": "as it looks at the end of this E string it's printing."
    },
    {
      "index": 111,
      "start_time": 343000.0,
      "end_time": 345000.0,
      "text": "But none of this escaped Valgrind."
    },
    {
      "index": 112,
      "start_time": 345000.0,
      "end_time": 348000.0,
      "text": "We see that it caught the invalid_write as part of the str copy"
    },
    {
      "index": 113,
      "start_time": 348000.0,
      "end_time": 351000.0,
      "text": "on line 11 of main, and the invalid_read is part of printf."
    },
    {
      "index": 114,
      "start_time": 351000.0,
      "end_time": 354000.0,
      "text": "Rock on, Valgrind."
    },
    {
      "index": 115,
      "start_time": 354000.0,
      "end_time": 357000.0,
      "text": "Again, this might not seem like a big deal."
    },
    {
      "index": 116,
      "start_time": 357000.0,
      "end_time": 360000.0,
      "text": "We can run this program over and over outside of Valgrind"
    },
    {
      "index": 117,
      "start_time": 360000.0,
      "end_time": 363000.0,
      "text": "and not see any error symptoms."
    },
    {
      "index": 118,
      "start_time": 363000.0,
      "end_time": 366000.0,
      "text": ">> However, let's look at a slight variation of this to see"
    },
    {
      "index": 119,
      "start_time": 366000.0,
      "end_time": 369000.0,
      "text": "how things can get really bad."
    },
    {
      "index": 120,
      "start_time": 369000.0,
      "end_time": 374000.0,
      "text": "So, granted, we are abusing things more than just a bit in this code."
    },
    {
      "index": 121,
      "start_time": 374000.0,
      "end_time": 377000.0,
      "text": "We're only allocating space on the heap for two strings"
    },
    {
      "index": 122,
      "start_time": 377000.0,
      "end_time": 379000.0,
      "text": "the length of cs50 rocks,"
    },
    {
      "index": 123,
      "start_time": 379000.0,
      "end_time": 382000.0,
      "text": "this time, remembering the /0 character."
    },
    {
      "index": 124,
      "start_time": 382000.0,
      "end_time": 385000.0,
      "text": "But then we throw in a super-long string into the memory block"
    },
    {
      "index": 125,
      "start_time": 385000.0,
      "end_time": 387000.0,
      "text": "that S is pointing to."
    },
    {
      "index": 126,
      "start_time": 387000.0,
      "end_time": 390000.0,
      "text": "What effect will that have on the memory block that T points to?"
    },
    {
      "index": 127,
      "start_time": 390000.0,
      "end_time": 394000.0,
      "text": "Well, if T points to memory that's just adjacent to S,"
    },
    {
      "index": 128,
      "start_time": 394000.0,
      "end_time": 397000.0,
      "text": "coming just after it,"
    },
    {
      "index": 129,
      "start_time": 397000.0,
      "end_time": 399000.0,
      "text": "then we might have written over part of T."
    },
    {
      "index": 130,
      "start_time": 399000.0,
      "end_time": 401000.0,
      "text": "Let's run this code."
    },
    {
      "index": 131,
      "start_time": 401000.0,
      "end_time": 403000.0,
      "text": "Look at what happened."
    },
    {
      "index": 132,
      "start_time": 403000.0,
      "end_time": 407000.0,
      "text": "The strings we stored in our heap blocks both appeared to have printed out correctly."
    },
    {
      "index": 133,
      "start_time": 407000.0,
      "end_time": 409000.0,
      "text": "Nothing seems wrong at all."
    },
    {
      "index": 134,
      "start_time": 409000.0,
      "end_time": 412000.0,
      "text": "However, let's go back into our code and"
    },
    {
      "index": 135,
      "start_time": 412000.0,
      "end_time": 415000.0,
      "text": "comment out the line where we copy cs50 rocks"
    },
    {
      "index": 136,
      "start_time": 415000.0,
      "end_time": 419000.0,
      "text": "into the second memory block, pointed to by t."
    },
    {
      "index": 137,
      "start_time": 419000.0,
      "end_time": 422000.0,
      "text": "Now, when we run this code we should"
    },
    {
      "index": 138,
      "start_time": 422000.0,
      "end_time": 426000.0,
      "text": "only see the contents of the first memory block print out."
    },
    {
      "index": 139,
      "start_time": 426000.0,
      "end_time": 429000.0,
      "text": "Whoa, even though we didn't str copy"
    },
    {
      "index": 140,
      "start_time": 429000.0,
      "end_time": 432000.0,
      "text": "any characters into the second heap block, the one pointed to by T,"
    },
    {
      "index": 141,
      "start_time": 432000.0,
      "end_time": 435000.0,
      "text": "we get a print out."
    },
    {
      "index": 142,
      "start_time": 435000.0,
      "end_time": 438000.0,
      "text": "Indeed, the string we stuffed into our first block"
    },
    {
      "index": 143,
      "start_time": 438000.0,
      "end_time": 441000.0,
      "text": "overran the first block and into the second block,"
    },
    {
      "index": 144,
      "start_time": 441000.0,
      "end_time": 443000.0,
      "text": "making everything seem normal."
    },
    {
      "index": 145,
      "start_time": 443000.0,
      "end_time": 446000.0,
      "text": "Valgrind, though, tells us the true story."
    },
    {
      "index": 146,
      "start_time": 446000.0,
      "end_time": 448000.0,
      "text": "There we go."
    },
    {
      "index": 147,
      "start_time": 448000.0,
      "end_time": 452000.0,
      "text": "All of those invalid reads and writes."
    },
    {
      "index": 148,
      "start_time": 452000.0,
      "end_time": 456000.0,
      "text": ">> Let's look at an example of another kind of error."
    },
    {
      "index": 149,
      "start_time": 456000.0,
      "end_time": 459000.0,
      "text": "Here we do something rather unfortunate."
    },
    {
      "index": 150,
      "start_time": 459000.0,
      "end_time": 461000.0,
      "text": "We grab space for an int on the heap,"
    },
    {
      "index": 151,
      "start_time": 461000.0,
      "end_time": 465000.0,
      "text": "and we initialize an int pointer--p--to point to that space."
    },
    {
      "index": 152,
      "start_time": 465000.0,
      "end_time": 468000.0,
      "text": "However, while our pointer is initialized,"
    },
    {
      "index": 153,
      "start_time": 468000.0,
      "end_time": 472000.0,
      "text": "the data that it's pointing to just has whatever junk is in that part of the heap."
    },
    {
      "index": 154,
      "start_time": 472000.0,
      "end_time": 475000.0,
      "text": "So when we load that data into int i,"
    },
    {
      "index": 155,
      "start_time": 475000.0,
      "end_time": 477000.0,
      "text": "we technically initialize i,"
    },
    {
      "index": 156,
      "start_time": 477000.0,
      "end_time": 480000.0,
      "text": "but we do so with junk data."
    },
    {
      "index": 157,
      "start_time": 480000.0,
      "end_time": 483000.0,
      "text": "The call to assert, which is a handy debugging macro"
    },
    {
      "index": 158,
      "start_time": 483000.0,
      "end_time": 486000.0,
      "text": "defined in the aptly named assert library,"
    },
    {
      "index": 159,
      "start_time": 486000.0,
      "end_time": 489000.0,
      "text": "will abort the program if its test condition fails."
    },
    {
      "index": 160,
      "start_time": 489000.0,
      "end_time": 491000.0,
      "text": "That is, if i is not 0."
    },
    {
      "index": 161,
      "start_time": 491000.0,
      "end_time": 494000.0,
      "text": "Depending on what was in the heap space, pointed to by p,"
    },
    {
      "index": 162,
      "start_time": 494000.0,
      "end_time": 498000.0,
      "text": "this program might work sometimes and fail at other times."
    },
    {
      "index": 163,
      "start_time": 498000.0,
      "end_time": 500000.0,
      "text": "If it works, we're just getting lucky."
    },
    {
      "index": 164,
      "start_time": 500000.0,
      "end_time": 504000.0,
      "text": "The compiler won't catch this error, but Valgrind sure will."
    },
    {
      "index": 165,
      "start_time": 504000.0,
      "end_time": 508000.0,
      "text": "There we see the error stemming from our use of that junk data."
    },
    {
      "index": 166,
      "start_time": 508000.0,
      "end_time": 512000.0,
      "text": ">> When you allocate heap memory but don't deallocate it or free it,"
    },
    {
      "index": 167,
      "start_time": 512000.0,
      "end_time": 514000.0,
      "text": "that is called a leak."
    },
    {
      "index": 168,
      "start_time": 514000.0,
      "end_time": 517000.0,
      "text": "For a small, short-lived program that runs and immediately exits,"
    },
    {
      "index": 169,
      "start_time": 517000.0,
      "end_time": 519000.0,
      "text": "leaks are fairly harmless,"
    },
    {
      "index": 170,
      "start_time": 519000.0,
      "end_time": 522000.0,
      "text": "but for a project of larger size and/or longevity,"
    },
    {
      "index": 171,
      "start_time": 522000.0,
      "end_time": 526000.0,
      "text": "even a small leak can compound into something major."
    },
    {
      "index": 172,
      "start_time": 526000.0,
      "end_time": 529000.0,
      "text": "For CS50, we do expect you to"
    },
    {
      "index": 173,
      "start_time": 529000.0,
      "end_time": 531000.0,
      "text": "take care of freeing all of the heap memory that you allocate,"
    },
    {
      "index": 174,
      "start_time": 531000.0,
      "end_time": 534000.0,
      "text": "since we want you to build the skills to properly handle the manual process"
    },
    {
      "index": 175,
      "start_time": 534000.0,
      "end_time": 536000.0,
      "text": "required by C."
    },
    {
      "index": 176,
      "start_time": 536000.0,
      "end_time": 539000.0,
      "text": "To do so, your program should have an exact"
    },
    {
      "index": 177,
      "start_time": 539000.0,
      "end_time": 543000.0,
      "text": "one-to-one correspondence between malloc and free calls."
    },
    {
      "index": 178,
      "start_time": 543000.0,
      "end_time": 546000.0,
      "text": "Fortunately, Valgrind can help you with memory leaks too."
    },
    {
      "index": 179,
      "start_time": 546000.0,
      "end_time": 549000.0,
      "text": "Here is a leaky program called leak.c that allocates"
    },
    {
      "index": 180,
      "start_time": 549000.0,
      "end_time": 553000.0,
      "text": "space on the heap, writes to it, but doesn't free it."
    },
    {
      "index": 181,
      "start_time": 553000.0,
      "end_time": 556000.0,
      "text": "We compile it with Make and run it under Valgrind,"
    },
    {
      "index": 182,
      "start_time": 556000.0,
      "end_time": 558000.0,
      "text": "and we see that, while we have no memory errors,"
    },
    {
      "index": 183,
      "start_time": 558000.0,
      "end_time": 560000.0,
      "text": "we do have one leak."
    },
    {
      "index": 184,
      "start_time": 560000.0,
      "end_time": 563000.0,
      "text": "There are 16 bytes definitely lost,"
    },
    {
      "index": 185,
      "start_time": 563000.0,
      "end_time": 567000.0,
      "text": "meaning that the pointer to that memory wasn't in scope when the program exited."
    },
    {
      "index": 186,
      "start_time": 567000.0,
      "end_time": 570000.0,
      "text": "Now, Valgrind doesn't give us a ton of information about the leak,"
    },
    {
      "index": 187,
      "start_time": 570000.0,
      "end_time": 575000.0,
      "text": "but if we follow this little note that it gives down towards the bottom of its report"
    },
    {
      "index": 188,
      "start_time": 575000.0,
      "end_time": 578000.0,
      "text": "to rerun with --leak-check=full"
    },
    {
      "index": 189,
      "start_time": 578000.0,
      "end_time": 581000.0,
      "text": "to see the full details of leaked memory,"
    },
    {
      "index": 190,
      "start_time": 581000.0,
      "end_time": 584000.0,
      "text": "we'll get more information."
    },
    {
      "index": 191,
      "start_time": 584000.0,
      "end_time": 586000.0,
      "text": "Now, in the heap summary,"
    },
    {
      "index": 192,
      "start_time": 586000.0,
      "end_time": 590000.0,
      "text": "Valgrind tells us where the memory that was lost was initially allocated."
    },
    {
      "index": 193,
      "start_time": 590000.0,
      "end_time": 592000.0,
      "text": "Just as we know from looking in the source code,"
    },
    {
      "index": 194,
      "start_time": 592000.0,
      "end_time": 595000.0,
      "text": "Valgrind informs us that we leaked the memory"
    },
    {
      "index": 195,
      "start_time": 595000.0,
      "end_time": 598000.0,
      "text": "allocated with a call to malloc on line 8 of leak.c"
    },
    {
      "index": 196,
      "start_time": 598000.0,
      "end_time": 600000.0,
      "text": "in the main function."
    },
    {
      "index": 197,
      "start_time": 600000.0,
      "end_time": 602000.0,
      "text": "Pretty nifty."
    },
    {
      "index": 198,
      "start_time": 602000.0,
      "end_time": 604000.0,
      "text": ">> Valgrind categorizes leaks using these terms:"
    },
    {
      "index": 199,
      "start_time": 604000.0,
      "end_time": 607000.0,
      "text": "Definitely lost--this is heap allocated memory"
    },
    {
      "index": 200,
      "start_time": 607000.0,
      "end_time": 610000.0,
      "text": "to which the program no longer has a pointer."
    },
    {
      "index": 201,
      "start_time": 610000.0,
      "end_time": 614000.0,
      "text": "Valgrind knows that you once had the pointer but have since lost track of it."
    },
    {
      "index": 202,
      "start_time": 614000.0,
      "end_time": 617000.0,
      "text": "This memory is definitely leaked."
    },
    {
      "index": 203,
      "start_time": 617000.0,
      "end_time": 620000.0,
      "text": "Indirectly lost--this is heap allocated memory"
    },
    {
      "index": 204,
      "start_time": 620000.0,
      "end_time": 624000.0,
      "text": "to which the only pointers to it also are lost."
    },
    {
      "index": 205,
      "start_time": 624000.0,
      "end_time": 627000.0,
      "text": "For example, if you lost your pointer to the first node of a linked list,"
    },
    {
      "index": 206,
      "start_time": 627000.0,
      "end_time": 630000.0,
      "text": "then the first node itself would be definitely lost,"
    },
    {
      "index": 207,
      "start_time": 630000.0,
      "end_time": 634000.0,
      "text": "while any subsequent nodes would be indirectly lost."
    },
    {
      "index": 208,
      "start_time": 634000.0,
      "end_time": 637000.0,
      "text": "Possibly lost--this is heap allocated memory"
    },
    {
      "index": 209,
      "start_time": 637000.0,
      "end_time": 641000.0,
      "text": "to which Valgrind cannot be sure whether there is a pointer or not."
    },
    {
      "index": 210,
      "start_time": 641000.0,
      "end_time": 644000.0,
      "text": "Still reachable is heap allocated memory"
    },
    {
      "index": 211,
      "start_time": 644000.0,
      "end_time": 647000.0,
      "text": "to which the program still has a pointer at exit,"
    },
    {
      "index": 212,
      "start_time": 647000.0,
      "end_time": 650000.0,
      "text": "which typically means that a global variable points to it."
    },
    {
      "index": 213,
      "start_time": 650000.0,
      "end_time": 653000.0,
      "text": "To check for these leaks, you'll also have to include the option"
    },
    {
      "index": 214,
      "start_time": 653000.0,
      "end_time": 655000.0,
      "text": "--still-reachable=yes"
    },
    {
      "index": 215,
      "start_time": 655000.0,
      "end_time": 658000.0,
      "text": "in your invocation of Valgrind."
    },
    {
      "index": 216,
      "start_time": 658000.0,
      "end_time": 661000.0,
      "text": ">> These different cases might require different strategies for cleaning them up,"
    },
    {
      "index": 217,
      "start_time": 661000.0,
      "end_time": 665000.0,
      "text": "but leaks should be eliminated."
    },
    {
      "index": 218,
      "start_time": 665000.0,
      "end_time": 668000.0,
      "text": "Unfortunately, fixing leaks can be hard to do,"
    },
    {
      "index": 219,
      "start_time": 668000.0,
      "end_time": 671000.0,
      "text": "since incorrect calls to free can blow up your program."
    },
    {
      "index": 220,
      "start_time": 671000.0,
      "end_time": 674000.0,
      "text": "For example, if we look at invalid_free.c,"
    },
    {
      "index": 221,
      "start_time": 674000.0,
      "end_time": 678000.0,
      "text": "we see an example of bad memory deallocation."
    },
    {
      "index": 222,
      "start_time": 678000.0,
      "end_time": 681000.0,
      "text": "What should be a single call to free the entire block"
    },
    {
      "index": 223,
      "start_time": 681000.0,
      "end_time": 684000.0,
      "text": "of memory pointed to by int_block,"
    },
    {
      "index": 224,
      "start_time": 684000.0,
      "end_time": 687000.0,
      "text": "has instead become an attempt to free each int-sized section"
    },
    {
      "index": 225,
      "start_time": 687000.0,
      "end_time": 689000.0,
      "text": "of the memory individually."
    },
    {
      "index": 226,
      "start_time": 689000.0,
      "end_time": 692000.0,
      "text": "This will fail catastrophically."
    },
    {
      "index": 227,
      "start_time": 692000.0,
      "end_time": 694000.0,
      "text": "Boom! What an error."
    },
    {
      "index": 228,
      "start_time": 694000.0,
      "end_time": 696000.0,
      "text": "This is definitely not good."
    },
    {
      "index": 229,
      "start_time": 696000.0,
      "end_time": 699000.0,
      "text": "If you're stuck with this kind of error, though, and you don't know where to look,"
    },
    {
      "index": 230,
      "start_time": 699000.0,
      "end_time": 701000.0,
      "text": "fall back on your new best friend."
    },
    {
      "index": 231,
      "start_time": 701000.0,
      "end_time": 704000.0,
      "text": "You guessed it--Valgrind."
    },
    {
      "index": 232,
      "start_time": 704000.0,
      "end_time": 707000.0,
      "text": "Valgrind, as always, knows exactly what's up."
    },
    {
      "index": 233,
      "start_time": 707000.0,
      "end_time": 710000.0,
      "text": "The alloc and free counts don't match up."
    },
    {
      "index": 234,
      "start_time": 710000.0,
      "end_time": 712000.0,
      "text": "We've got 1 alloc and 4 frees."
    },
    {
      "index": 235,
      "start_time": 712000.0,
      "end_time": 715000.0,
      "text": "And Valgrind also tells us where the first bad free call--"
    },
    {
      "index": 236,
      "start_time": 715000.0,
      "end_time": 718000.0,
      "text": "the one that triggered the blowup--is coming from--"
    },
    {
      "index": 237,
      "start_time": 718000.0,
      "end_time": 720000.0,
      "text": "line 16."
    },
    {
      "index": 238,
      "start_time": 720000.0,
      "end_time": 723000.0,
      "text": "As you see, bad calls to free are really bad,"
    },
    {
      "index": 239,
      "start_time": 723000.0,
      "end_time": 725000.0,
      "text": "so we recommend letting your program leak"
    },
    {
      "index": 240,
      "start_time": 725000.0,
      "end_time": 728000.0,
      "text": "while you're working on getting the functionality correct."
    },
    {
      "index": 241,
      "start_time": 728000.0,
      "end_time": 732000.0,
      "text": "Start looking for leaks only after your program is working properly,"
    },
    {
      "index": 242,
      "start_time": 732000.0,
      "end_time": 734000.0,
      "text": "without any other errors."
    },
    {
      "index": 243,
      "start_time": 734000.0,
      "end_time": 736000.0,
      "text": ">> And that's all we've got for this video."
    },
    {
      "index": 244,
      "start_time": 736000.0,
      "end_time": 738000.0,
      "text": "Now what are you waiting for?"
    },
    {
      "index": 245,
      "start_time": 738000.0,
      "end_time": 741000.0,
      "text": "Go run Valgrind on your programs right now."
    },
    {
      "index": 246,
      "start_time": 741000.0,
      "end_time": 751000.0,
      "text": "My name is Nate Hardison. This is CS50. [CS50.TV]"
    }
  ]
}