{
  "video_id": "tKTZoB2Vjuk",
  "title": "Google Python Class Day 1 Part 1",
  "es": 0,
  "json": [
    {
      "index": 1,
      "start_time": 0.0,
      "end_time": 5830.0,
      "text": "&gt;&gt; PARLANTE: All right, hey there. Hey, good morning. Welcome to the PyQuick Basic Python"
    },
    {
      "index": 2,
      "start_time": 5830.0,
      "end_time": 12120.0,
      "text": "Class. My name is Nick Parlante and I work in Google&#39;s engEDU group which deals with"
    },
    {
      "index": 3,
      "start_time": 12120.0,
      "end_time": 18220.0,
      "text": "sort of technical training in engineering. And also I have a job at Stanford where I"
    },
    {
      "index": 4,
      "start_time": 18220.0,
      "end_time": 22640.0,
      "text": "work as a lecturer. So, the Python today is--or rather, it&#39;s actually a 2-day class. So this"
    },
    {
      "index": 5,
      "start_time": 22640.0,
      "end_time": 29750.0,
      "text": "class is about just the basic useful normal Python. And Python is sort of--you know, it&#39;s"
    },
    {
      "index": 6,
      "start_time": 29750.0,
      "end_time": 34480.0,
      "text": "a nice friendly learn--and you can actually learn a lot of Python in two days. So, that&#39;s"
    },
    {
      "index": 7,
      "start_time": 34480.0,
      "end_time": 38260.0,
      "text": "the good news. This is the class where the prerequisite is not--you don&#39;t need to be"
    },
    {
      "index": 8,
      "start_time": 38260.0,
      "end_time": 42420.0,
      "text": "like super-expert engineer to come in here and learn Python. What we want is just that"
    },
    {
      "index": 9,
      "start_time": 42420.0,
      "end_time": 48460.0,
      "text": "you have some experience in some language. So, like, yeah, you have some idea what a"
    },
    {
      "index": 10,
      "start_time": 48460.0,
      "end_time": 52370.0,
      "text": "variable is or something like that. And then, and Python&#39;s going to meet you halfway on"
    },
    {
      "index": 11,
      "start_time": 52370.0,
      "end_time": 56210.0,
      "text": "this. Python, like I was saying before, you know, it&#39;s a nicely designed language. It--a"
    },
    {
      "index": 12,
      "start_time": 56210.0,
      "end_time": 61440.0,
      "text": "lot of things work pretty easily and so you can learn a lot of Python pretty quickly."
    },
    {
      "index": 13,
      "start_time": 61440.0,
      "end_time": 66790.0,
      "text": "So, this is a 2-day class. And what&#39;s going to happen is it&#39;ll be a mix of lecture and"
    },
    {
      "index": 14,
      "start_time": 66790.0,
      "end_time": 72970.0,
      "text": "coding sections. I&#39;ll kind of alternate between the two. The good news or I guess the bad"
    },
    {
      "index": 15,
      "start_time": 72970.0,
      "end_time": 78509.0,
      "text": "news or whatever; the news is that the class moves pretty quickly. So, I&#39;ll show few things"
    },
    {
      "index": 16,
      "start_time": 78509.0,
      "end_time": 80750.0,
      "text": "in lecture and, you know, kind of demonstrate couple of things. And I want to get pretty"
    },
    {
      "index": 17,
      "start_time": 80750.0,
      "end_time": 85049.0,
      "text": "quickly to you trying that in coding because, really, when you code it up, you know, that&#39;s"
    },
    {
      "index": 18,
      "start_time": 85049.0,
      "end_time": 89740.0,
      "text": "when you&#39;re going to learn it. So, as I lecture through stuff, don&#39;t feel like--I don&#39;t want"
    },
    {
      "index": 19,
      "start_time": 89740.0,
      "end_time": 93250.0,
      "text": "you to have the idea like, &quot;Oh,&quot;--where you&#39;re memorizing or writing down everything that"
    },
    {
      "index": 20,
      "start_time": 93250.0,
      "end_time": 100900.0,
      "text": "I say. So, [INDISTINCT] few here for a second, so there&#39;s a--for the PyQuick class, we have"
    },
    {
      "index": 21,
      "start_time": 100900.0,
      "end_time": 104979.0,
      "text": "a whole set of written materials and here&#39;s the PyQuick page, it links all of them. And"
    },
    {
      "index": 22,
      "start_time": 104979.0,
      "end_time": 109509.0,
      "text": "particular today, there&#39;s this one PyQuick Basics. And that&#39;s pretty much what we&#39;re"
    },
    {
      "index": 23,
      "start_time": 109509.0,
      "end_time": 113270.0,
      "text": "going to talk about today. It&#39;s pretty long and it talks about strings and lists and modules"
    },
    {
      "index": 24,
      "start_time": 113270.0,
      "end_time": 117159.0,
      "text": "and a bunch of things that I&#39;m going to lecture about. So, my goal is in the lecture sections,"
    },
    {
      "index": 25,
      "start_time": 117159.0,
      "end_time": 120250.0,
      "text": "just kind of pick up the basic idea of what I&#39;m showing you. But don&#39;t feel like you need"
    },
    {
      "index": 26,
      "start_time": 120250.0,
      "end_time": 125299.0,
      "text": "to memorize every detail of it. And then later, when we&#39;re in the lab section, yeah, you can"
    },
    {
      "index": 27,
      "start_time": 125299.0,
      "end_time": 128320.0,
      "text": "go to the [INDISTINCT] packing it. You can go, &quot;Oh, rightly, he said something about"
    },
    {
      "index": 28,
      "start_time": 128320.0,
      "end_time": 133520.0,
      "text": "strings,&quot; you can sort of orient yourself a little bit and figure it out how this stuff"
    },
    {
      "index": 29,
      "start_time": 133520.0,
      "end_time": 137950.0,
      "text": "works. So, there&#39;s also--I had, sort of--I printed some copies of this Basics thing but"
    },
    {
      "index": 30,
      "start_time": 137950.0,
      "end_time": 140319.0,
      "text": "then I didn&#39;t make quite enough before class started, so I&#39;ll go get those when we&#39;re at"
    },
    {
      "index": 31,
      "start_time": 140319.0,
      "end_time": 144819.0,
      "text": "the next break so I&#39;ll also give you a printed dead-tree version of this document for you"
    },
    {
      "index": 32,
      "start_time": 144819.0,
      "end_time": 153250.0,
      "text": "to get started. Alrighty, so, let&#39;s just get started. So, Python is a--actually kind of"
    },
    {
      "index": 33,
      "start_time": 153250.0,
      "end_time": 158580.0,
      "text": "an old language. It was created by a guy name Guido van Rossum, who actually works at Google,"
    },
    {
      "index": 34,
      "start_time": 158580.0,
      "end_time": 162040.0,
      "text": "and it was created in 1990. So, I think about it as, like, a little bit old by, you know,"
    },
    {
      "index": 35,
      "start_time": 162040.0,
      "end_time": 166330.0,
      "text": "hip language standards. However, in the most recent years, Python seems to have gotten"
    },
    {
      "index": 36,
      "start_time": 166330.0,
      "end_time": 169980.0,
      "text": "a lot of momentums. It&#39;s becoming pretty popular. And I think it stems from--I get it, it&#39;s"
    },
    {
      "index": 37,
      "start_time": 169980.0,
      "end_time": 174560.0,
      "text": "basically a pretty good language. I think of Python as being sort of a quick and light"
    },
    {
      "index": 38,
      "start_time": 174560.0,
      "end_time": 178489.0,
      "text": "language. So, if I have some little tasks, some little automation, I just want to just"
    },
    {
      "index": 39,
      "start_time": 178489.0,
      "end_time": 183159.0,
      "text": "dance, encode and be done. Python seems to work very well, like it&#39;s very, sort of, frictionless."
    },
    {
      "index": 40,
      "start_time": 183159.0,
      "end_time": 188519.0,
      "text": "It&#39;s just--quick little things just happen very nicely. I think you would categorize"
    },
    {
      "index": 41,
      "start_time": 188519.0,
      "end_time": 194080.0,
      "text": "Python as a scripting language. So, it&#39;s similar to maybe Pearl or Bash or Ruby or maybe JavaScript,"
    },
    {
      "index": 42,
      "start_time": 194080.0,
      "end_time": 199349.0,
      "text": "the whole sort of space of languages that don&#39;t have a real heavy type system. So, Python"
    },
    {
      "index": 43,
      "start_time": 199349.0,
      "end_time": 204959.0,
      "text": "is certainly a nice example in there. Python as a--I&#39;ll show you as we start mess around"
    },
    {
      "index": 44,
      "start_time": 204959.0,
      "end_time": 209230.0,
      "text": "with Python. Python is good at, sort of, quick turnaround. So, you could--if you have an"
    },
    {
      "index": 45,
      "start_time": 209230.0,
      "end_time": 212470.0,
      "text": "idea, a little experiment you want to run, you just type it in and you could just try"
    },
    {
      "index": 46,
      "start_time": 212470.0,
      "end_time": 216200.0,
      "text": "it immediately. There&#39;s not a big compile stuff or anything, sort of, slow. So, we&#39;re"
    },
    {
      "index": 47,
      "start_time": 216200.0,
      "end_time": 219290.0,
      "text": "going to--I&#39;m going to encourage you to have a development style where you have a, sort"
    },
    {
      "index": 48,
      "start_time": 219290.0,
      "end_time": 225519.0,
      "text": "of, quick turnaround between editing and running and I&#39;ll demo that in a minute. So Python"
    },
    {
      "index": 49,
      "start_time": 225519.0,
      "end_time": 230010.0,
      "text": "is certainly very appropriate for small projects, with little bits of animation. Within Google,"
    },
    {
      "index": 50,
      "start_time": 230010.0,
      "end_time": 235239.0,
      "text": "Python gets used for all sorts of little things like that. There is debate about whether or"
    },
    {
      "index": 51,
      "start_time": 235239.0,
      "end_time": 239069.0,
      "text": "not Python is also good for huge projects, since it lacks a big type system--and I&#39;m"
    },
    {
      "index": 52,
      "start_time": 239069.0,
      "end_time": 242090.0,
      "text": "not going to settle that debate today. But, you know, there&#39;s certainly advocates for"
    },
    {
      "index": 53,
      "start_time": 242090.0,
      "end_time": 246989.0,
      "text": "both sides. But, certainly, as you know, Python is a wonderful language to learn for solving"
    },
    {
      "index": 54,
      "start_time": 246989.0,
      "end_time": 254150.0,
      "text": "small encoding problems. Ah, all right. So, let me show you--a little bit of Python code"
    },
    {
      "index": 55,
      "start_time": 254150.0,
      "end_time": 260470.0,
      "text": "here. Let&#39;s see. So, Python is an interpretive language. So, there&#39;s this program called"
    },
    {
      "index": 56,
      "start_time": 260470.00000000003,
      "end_time": 266000.0,
      "text": "Python. And later on, we&#39;re going to write Python programs, the Python--this is called"
    },
    {
      "index": 57,
      "start_time": 266000.0,
      "end_time": 269570.0,
      "text": "the Python interpreter. It&#39;s actually going to, kind of, do the running for us. So, one"
    },
    {
      "index": 58,
      "start_time": 269570.0,
      "end_time": 273949.0,
      "text": "of the nice qualities of Python is that you can just run the interpreter, so I just type"
    },
    {
      "index": 59,
      "start_time": 273949.0,
      "end_time": 279520.0,
      "text": "&quot;python&quot; in here. And then, I can just type little snippets of codes, just add it and"
    },
    {
      "index": 60,
      "start_time": 279520.0,
      "end_time": 282940.0,
      "text": "it&#39;ll, sort of, compile and run them just as we go. And so, this is a marvelous way"
    },
    {
      "index": 61,
      "start_time": 282940.0,
      "end_time": 287350.0,
      "text": "to sort of see what&#39;s going on. So, I can just show you some basic Python here. So,"
    },
    {
      "index": 62,
      "start_time": 287350.0,
      "end_time": 292190.0,
      "text": "I&#39;ll assign a variable &quot;a,&quot; I&#39;ll say, you know, &quot;a is 6.&quot; And so, what the interpreter"
    },
    {
      "index": 63,
      "start_time": 292190.0,
      "end_time": 296139.0,
      "text": "does here is what&#39;s called the read eval print loop. So, I type a little bit of code to it."
    },
    {
      "index": 64,
      "start_time": 296139.0,
      "end_time": 299410.0,
      "text": "When I hit return, it&#39;s going to evaluate it and its going to come back with a prompt."
    },
    {
      "index": 65,
      "start_time": 299410.0,
      "end_time": 303900.0,
      "text": "It&#39;ll say, &quot;Okay, I know you--now what do you want to do?&quot; So if I type &quot;a,&quot; just a"
    },
    {
      "index": 66,
      "start_time": 303900.0,
      "end_time": 308100.0,
      "text": "value, what it does is it evaluates it. In some sense, it kind of prints like, &quot;Well,"
    },
    {
      "index": 67,
      "start_time": 308100.0,
      "end_time": 311740.0,
      "text": "here&#39;s, sort of, the ASCII form of that,&quot; and then it comes back with a prompt. This"
    },
    {
      "index": 68,
      "start_time": 311740.0,
      "end_time": 316220.0,
      "text": "is a very standard interpreter sort of thing. So, a couple of notes; please notice there."
    },
    {
      "index": 69,
      "start_time": 316220.0,
      "end_time": 320759.0,
      "text": "Notice I didn&#39;t have to declare that I was going to have a variable &quot;a&quot; or that it was"
    },
    {
      "index": 70,
      "start_time": 320759.0,
      "end_time": 325699.0,
      "text": "going to be an &quot;int,&quot; no. Python, it&#39;s all about quick light. We&#39;re just like, get right"
    },
    {
      "index": 71,
      "start_time": 325699.0,
      "end_time": 330750.0,
      "text": "to it. So, just by assigning to &quot;a&quot; that it cause us to exist. Later on, I could say,"
    },
    {
      "index": 72,
      "start_time": 330750.0,
      "end_time": 336710.0,
      "text": "&quot;Oh, let&#39;s have &#39;a&#39; be the string &#39;hello,&#39;&quot; Well, okay. We&#39;re fine. So, there&#39;s not a"
    },
    {
      "index": 73,
      "start_time": 336710.0,
      "end_time": 341930.0,
      "text": "compiled time type that associated with &quot;a.&quot; Instead, &quot;a&quot; just points to whatever it points"
    },
    {
      "index": 74,
      "start_time": 341930.0,
      "end_time": 346120.0,
      "text": "to. So right now--so I have to hit &quot;a&quot; here. So, yeah, so now it&#39;s a string, earlier it"
    },
    {
      "index": 75,
      "start_time": 346120.0,
      "end_time": 349780.0,
      "text": "wasn&#39;t it. Though, with the jolly a little bit aligned, the way you can think about in"
    },
    {
      "index": 76,
      "start_time": 349780.0,
      "end_time": 354330.0,
      "text": "Python is that a value, you know, &quot;a&quot; in this case, it points to something and in or a string."
    },
    {
      "index": 77,
      "start_time": 354330.0,
      "end_time": 359060.0,
      "text": "And whatever it points to knows what type it is. That&#39;s stored at runtime. And so, then,"
    },
    {
      "index": 78,
      "start_time": 359060.0,
      "end_time": 364569.0,
      "text": "as the code runs, it just uses the types of the objects as they are at runtime. And we&#39;ll"
    },
    {
      "index": 79,
      "start_time": 364569.0,
      "end_time": 370870.0,
      "text": "certainly see that theme in a lot of the cases. Okay, I&#39;ll show you just syntax, at least."
    },
    {
      "index": 80,
      "start_time": 370870.0,
      "end_time": 374850.0,
      "text": "So, there&#39;s a built-in function called Len. And so, if I wanted to take the, you know,"
    },
    {
      "index": 81,
      "start_time": 374850.0,
      "end_time": 378400.0,
      "text": "find the length of that string, I could say, &quot;Len of a,&quot; and okay, it turns out, that&#39;s"
    },
    {
      "index": 82,
      "start_time": 378400.0,
      "end_time": 386880.0,
      "text": "&quot;5.&quot; Also, Python is case sensitive. So, if I type an upper case &quot;A&quot; I&#39;m going to get"
    },
    {
      "index": 83,
      "start_time": 386880.0,
      "end_time": 391889.0,
      "text": "this error. So it says, &quot;nah, blah-blah.&quot; This bottom part, I think it&#39;s almost English,"
    },
    {
      "index": 84,
      "start_time": 391889.0,
      "end_time": 396270.0,
      "text": "&quot;Name error: name &quot;A&quot; is not defined.&quot; Okay, well, that&#39;s telling you something. So, in"
    },
    {
      "index": 85,
      "start_time": 396270.0,
      "end_time": 401240.0,
      "text": "Python, if it comes across a variable or some other symbol which has not previously been"
    },
    {
      "index": 86,
      "start_time": 401240.0,
      "end_time": 405539.0,
      "text": "given some value, then that&#39;s an error. Then there&#39;s a little bit in contrast to some languages"
    },
    {
      "index": 87,
      "start_time": 405539.0,
      "end_time": 409030.0,
      "text": "where if it&#39;s undefined, it&#39;s like, &quot;Well, you know, let&#39;s just use the empty string.&quot;"
    },
    {
      "index": 88,
      "start_time": 409030.0,
      "end_time": 413750.0,
      "text": "Or, you know, &quot;Let&#39;s just kind of blunder ahead.&quot; Python is not that way. So, this will"
    },
    {
      "index": 89,
      "start_time": 413750.0,
      "end_time": 416580.0,
      "text": "also come up like when you go out and bounce an array or do some other thing where it&#39;s"
    },
    {
      "index": 90,
      "start_time": 416580.0,
      "end_time": 421229.0,
      "text": "a little bit like it doesn&#39;t seem to match up, Python will halt. And I think giving you"
    },
    {
      "index": 91,
      "start_time": 421229.0,
      "end_time": 426229.0,
      "text": "an experience, the Python language is just--since the greatest source of delays in your code-working"
    },
    {
      "index": 92,
      "start_time": 426229.0,
      "end_time": 431090.0,
      "text": "is bugs. And so, it&#39;s bad, or if it&#39;s been found, it&#39;s bad if a bug is, sort of, sitting"
    },
    {
      "index": 93,
      "start_time": 431090.0,
      "end_time": 434830.0,
      "text": "in there, hidden. Really, if there&#39;s an error, you want to know. And so, Python reflects,"
    },
    {
      "index": 94,
      "start_time": 434830.0,
      "end_time": 442050.0,
      "text": "or reflects that style. So, let me show--so, what&#39;s going to happen is we&#39;re going to do"
    },
    {
      "index": 95,
      "start_time": 442050.0,
      "end_time": 447770.0,
      "text": "all sorts of Python. And the interpreter is a great source of doing little experiments."
    },
    {
      "index": 96,
      "start_time": 447770.0,
      "end_time": 451660.0,
      "text": "So, for example, what&#39;s going to happen is someone&#39;s going to ask me some questions about"
    },
    {
      "index": 97,
      "start_time": 451660.0,
      "end_time": 455009.0,
      "text": "Python and I&#39;m just not going to know the answer. I mean, of course. And--but rather"
    },
    {
      "index": 98,
      "start_time": 455009.0,
      "end_time": 460669.0,
      "text": "than admit that, what I&#39;m going to say is, &quot;Oh, that&#39;s an excellent question. Hey, let&#39;s"
    },
    {
      "index": 99,
      "start_time": 460669.0,
      "end_time": 464460.0,
      "text": "try it in the interpreter and see.&quot; And in that way, I&#39;m never at risk of being wrong,"
    },
    {
      "index": 100,
      "start_time": 464460.0,
      "end_time": 467590.0,
      "text": "or whatever, it&#39;s just going to do whatever it is going to do. So, for example, you might"
    },
    {
      "index": 101,
      "start_time": 467590.0,
      "end_time": 474190.0,
      "text": "wonder, &quot;Oh, well, what if I want to have a string and an int together?&quot; So, I&#39;ll say,"
    },
    {
      "index": 102,
      "start_time": 474190.0,
      "end_time": 481009.0,
      "text": "&quot;&#39;Hello&#39; + 6.&quot; Now, what does that do? Okay, it turns out that doesn&#39;t work. I was mentioning"
    },
    {
      "index": 103,
      "start_time": 481009.0,
      "end_time": 484669.0,
      "text": "the solution, so you&#39;re already at &quot;+&quot;--in Java that works and some of the--in Python"
    },
    {
      "index": 104,
      "start_time": 484669.0,
      "end_time": 488389.0,
      "text": "though, &quot;+&quot; between a string and it does not automatically convert then it fix it. Oh,"
    },
    {
      "index": 105,
      "start_time": 488389.0,
      "end_time": 492419.0,
      "text": "in the interpreter, by the way, the &quot;Up arrow&quot; works. So it&#39;s, sort of, like in Bash, I can,"
    },
    {
      "index": 106,
      "start_time": 492419.0,
      "end_time": 498280.0,
      "text": "like, flip the previous lines. So it just happens, if I call, there&#39;s an &quot;str&quot; function."
    },
    {
      "index": 107,
      "start_time": 498280.0,
      "end_time": 502300.0,
      "text": "So, if I do &quot;str&quot; on it then &quot;str&quot; on kind of anything. Then that makes, or tries to"
    },
    {
      "index": 108,
      "start_time": 502300.0,
      "end_time": 506900.0,
      "text": "make a string out of it and then the code works. I&#39;ll talk more about strings and stuff"
    },
    {
      "index": 109,
      "start_time": 506900.0,
      "end_time": 511169.0,
      "text": "later on. But you can do that yourself, right? You can be the interpreter and if you have"
    },
    {
      "index": 110,
      "start_time": 511169.0,
      "end_time": 515219.0,
      "text": "some questions about, &quot;Oh, what if I do to--do the--where?&quot; It&#39;s just so quick like, well,"
    },
    {
      "index": 111,
      "start_time": 515219.00000000006,
      "end_time": 519130.00000000006,
      "text": "just, you know, fire up the interpreter and try it out. And so, Python does work. I guess"
    },
    {
      "index": 112,
      "start_time": 519130.0,
      "end_time": 523500.0,
      "text": "it&#39;s in an interactive style. And I&#39;m being a little repetitious about this because coming"
    },
    {
      "index": 113,
      "start_time": 523500.0,
      "end_time": 528230.0,
      "text": "from a Java or C++ background, this feature isn&#39;t very foreign. So, it&#39;s not something"
    },
    {
      "index": 114,
      "start_time": 528230.0,
      "end_time": 531830.0,
      "text": "you would necessary have an instinct to do. But in Python, it works very well. So I will"
    },
    {
      "index": 115,
      "start_time": 531830.0,
      "end_time": 535740.0,
      "text": "certainly encourage you to go that way. Oh, all right. So let me get out this. I&#39;ll show"
    },
    {
      "index": 116,
      "start_time": 535740.0,
      "end_time": 541010.0,
      "text": "you how quit the interpreter; the way I do it. What I do is I type the word, &quot;quit,&quot;"
    },
    {
      "index": 117,
      "start_time": 541010.0,
      "end_time": 547390.0,
      "text": "and it doesn&#39;t work. But in the error message, it says--&quot;Oh, right, right, Control D.&quot; Okay,"
    },
    {
      "index": 118,
      "start_time": 547390.0,
      "end_time": 553269.0,
      "text": "good. And so then I type &#39;control&#39;--Oops. So, here we go. So, in our in--you know, later"
    },
    {
      "index": 119,
      "start_time": 553269.0,
      "end_time": 556339.0,
      "text": "on, oh, you don&#39;t have to do it now, but later on we&#39;ll have this PyQuick directory. It&#39;s"
    },
    {
      "index": 120,
      "start_time": 556339.0,
      "end_time": 560029.0,
      "text": "going to have a bunch of exercises for you to do. And I&#39;ll analyze my selling here. And"
    },
    {
      "index": 121,
      "start_time": 560029.0,
      "end_time": 566519.0,
      "text": "in particular, I&#39;ve got this &quot;hello.py&quot; file. And so, I&#39;m going to use that as kind of a--just"
    },
    {
      "index": 122,
      "start_time": 566519.0,
      "end_time": 573279.0,
      "text": "real basic example to start things up. So, one of the required, you know, in order to"
    },
    {
      "index": 123,
      "start_time": 573279.0,
      "end_time": 575920.0,
      "text": "do this class, what you want to do is you&#39;re going to have a way of editing and running,"
    },
    {
      "index": 124,
      "start_time": 575920.0,
      "end_time": 578510.0,
      "text": "and switching between those two very quickly. And there&#39;s a separate handout that talks"
    },
    {
      "index": 125,
      "start_time": 578510.0,
      "end_time": 581899.0,
      "text": "about that. So, I won&#39;t repeat that in lecture. In this case, I&#39;m going to have these two"
    },
    {
      "index": 126,
      "start_time": 581899.0,
      "end_time": 586950.0,
      "text": "windows. So up here, I&#39;ve got this like, you know, whatever, primitive EmEx editor but"
    },
    {
      "index": 127,
      "start_time": 586950.0,
      "end_time": 590959.0,
      "text": "while I can do editing in that screen and then in this screen, I can do running. So,"
    },
    {
      "index": 128,
      "start_time": 590959.0,
      "end_time": 595940.0,
      "text": "what I&#39;d like to do is, you know, right here is a very basic Python program. I&#39;d like to"
    },
    {
      "index": 129,
      "start_time": 595940.0,
      "end_time": 603079.0,
      "text": "just talk about the parts of this thing. So, up here at the very top, you&#39;ve have this"
    },
    {
      "index": 130,
      "start_time": 603079.0,
      "end_time": 607630.0,
      "text": "standard user bin, Python, you know, sort of, or, you know, number sign--bang! Just"
    },
    {
      "index": 131,
      "start_time": 607630.0,
      "end_time": 612140.0,
      "text": "talking about what interpreter is going to use this. We&#39;re going to--today, we&#39;re going"
    },
    {
      "index": 132,
      "start_time": 612140.0,
      "end_time": 617260.0,
      "text": "to use Python 2.4. It&#39;s a perfectly modern version and this is also the official modern"
    },
    {
      "index": 133,
      "start_time": 617260.0,
      "end_time": 621829.0,
      "text": "version used here in Google. There&#39;s also a 2.5 and a 2.6. But those differences are"
    },
    {
      "index": 134,
      "start_time": 621829.0,
      "end_time": 626890.0,
      "text": "like not real big, so I wouldn&#39;t worry about those. I would not use Python 2.2 because"
    },
    {
      "index": 135,
      "start_time": 626890.0,
      "end_time": 633420.0,
      "text": "that at--is actually different. So, 2.4. Go with that. Python 3 actually just came out"
    },
    {
      "index": 136,
      "start_time": 633420.0,
      "end_time": 638450.0,
      "text": "and it does have some real differences; although, it&#39;s not in wide use yet. Here and there--mostly,"
    },
    {
      "index": 137,
      "start_time": 638450.0,
      "end_time": 643290.0,
      "text": "we&#39;re doing just totally straight-ahead normal standard Python. And so, that&#39;s not very different"
    },
    {
      "index": 138,
      "start_time": 643290.0,
      "end_time": 647240.0,
      "text": "in Python 3000--in Python 3. But in a couple of places, I may point out things that are"
    },
    {
      "index": 139,
      "start_time": 647240.0,
      "end_time": 650430.0,
      "text": "going to be over little different in Python 3. But for the most part, the stuff we&#39;re"
    },
    {
      "index": 140,
      "start_time": 650430.0,
      "end_time": 655190.0,
      "text": "going to do, we&#39;ll all come through fine. The &quot;-tt&quot; thing, I&#39;ll talk about in a second."
    },
    {
      "index": 141,
      "start_time": 655190.0,
      "end_time": 664800.0,
      "text": "Okay, let&#39;s get rid with this import system. There. So, what this says, this is a &quot;def"
    },
    {
      "index": 142,
      "start_time": 664800.0,
      "end_time": 670160.0,
      "text": "main: print &#39;Hello.&#39;&quot; That defines a function. So, you say, &quot;def&quot; and space and then the"
    },
    {
      "index": 143,
      "start_time": 670160.0,
      "end_time": 671170.0,
      "text": "name of the thing. Yeah, question? &gt;&gt; [INDISTINCT]"
    },
    {
      "index": 144,
      "start_time": 671170.0,
      "end_time": 678600.0,
      "text": "&gt;&gt; PARLANTE: Oh, I&#39;m sorry. It&#39;s coming off a bit. Oh, thank you. There we go, all right."
    },
    {
      "index": 145,
      "start_time": 678600.0,
      "end_time": 682740.0,
      "text": "So, this is just a simple function definition. In this case, I can get whatever name I want."
    },
    {
      "index": 146,
      "start_time": 682740.0,
      "end_time": 686399.0,
      "text": "But it&#39;s very conventional in Python that whatever is going to be, kind of, like the"
    },
    {
      "index": 147,
      "start_time": 686399.0,
      "end_time": 690550.0,
      "text": "main thing you do, you&#39;ll call lower case m, &quot;main.&quot; In this case, it turns out Python"
    },
    {
      "index": 148,
      "start_time": 690550.0,
      "end_time": 695800.0,
      "text": "has a print operator. And so, you can say &quot;print&quot; and then there&#39;s a series of things"
    },
    {
      "index": 149,
      "start_time": 695800.0,
      "end_time": 700550.0,
      "text": "and separate them with commas and it prints them. So, in this case, it just prints out,"
    },
    {
      "index": 150,
      "start_time": 700550.0,
      "end_time": 707060.0,
      "text": "&quot;Hello.&quot; This thing at the bottom is a little unfortunate but I&#39;m going to--it&#39;s boilerplate"
    },
    {
      "index": 151,
      "start_time": 707060.0,
      "end_time": 712500.0,
      "text": "syntax. And that is the boilerplate syntax to run the &quot;main,&quot; that we find above. And"
    },
    {
      "index": 152,
      "start_time": 712500.0,
      "end_time": 717450.0,
      "text": "I will mention very briefly why this is here. But then, you should think of this as just"
    },
    {
      "index": 153,
      "start_time": 717450.0,
      "end_time": 719769.0,
      "text": "something that&#39;s just mechanically you just put at the bottom of the file and then don&#39;t"
    },
    {
      "index": 154,
      "start_time": 719769.0,
      "end_time": 725639.0,
      "text": "think about too much. The way this works is that a Python program can be--in this case,"
    },
    {
      "index": 155,
      "start_time": 725639.0,
      "end_time": 730860.0,
      "text": "&quot;Hello.py,&quot; you can run it like [INDISTINCT] like I want to invoke this program. And in"
    },
    {
      "index": 156,
      "start_time": 730860.0,
      "end_time": 735019.0,
      "text": "that case, that if statement will be true, the way the interpreter sets things up. And"
    },
    {
      "index": 157,
      "start_time": 735019.0,
      "end_time": 738399.0,
      "text": "so, since it&#39;s true then here what does is it&#39;s calling the main function. So, actually,"
    },
    {
      "index": 158,
      "start_time": 738399.0,
      "end_time": 744700.0,
      "text": "I can just demonstrate that. So, if I go down here to my--same directory, so, the way you"
    },
    {
      "index": 159,
      "start_time": 744700.0,
      "end_time": 750200.0,
      "text": "run this thing--well, there&#39;s two ways, you could type &quot;python,&quot; the name of the interpreter,"
    },
    {
      "index": 160,
      "start_time": 750200.0,
      "end_time": 754959.0,
      "text": "and then give it &quot;hello.py,&quot; say, &quot;Hey, please run that.&quot; And then, you could see here it"
    },
    {
      "index": 161,
      "start_time": 754959.0,
      "end_time": 760389.0,
      "text": "prints, &quot;Hello.&quot; So, there&#39;s my marvelous program functioning. In the Unix way, the"
    },
    {
      "index": 162,
      "start_time": 760389.0,
      "end_time": 766010.0,
      "text": "more modern thing is that you would--you have the XQ bit set--I&#39;ll have talk about this"
    },
    {
      "index": 163,
      "start_time": 766010.0,
      "end_time": 769620.0,
      "text": "a little bit, and so then, you can just say, that&#39;s the, you know, whatever. &quot;hello.py&quot;"
    },
    {
      "index": 164,
      "start_time": 769620.0,
      "end_time": 777709.0,
      "text": "and it just runs it. So, either of those techniques will work okay. All right. So, in that example,"
    },
    {
      "index": 165,
      "start_time": 777709.0,
      "end_time": 784240.0,
      "text": "I&#39;m running it and so that then this if statement is trying out to be true and so then it runs"
    },
    {
      "index": 166,
      "start_time": 784240.0,
      "end_time": 788800.0,
      "text": "&quot;main.&quot; There is this other way that you can load a Python program. Where one Python module"
    },
    {
      "index": 167,
      "start_time": 788800.0,
      "end_time": 793329.0,
      "text": "wants to load another one and use it essentially like a library--which I, actually, am going"
    },
    {
      "index": 168,
      "start_time": 793329.0,
      "end_time": 799690.0,
      "text": "to demonstrate, I think, tomorrow. And in that case, I want to load the Python module,"
    },
    {
      "index": 169,
      "start_time": 799690.0,
      "end_time": 803579.0,
      "text": "it&#39;s sort of synonymous with [INDISTINCT] file in Python. I want to load it but I don&#39;t"
    },
    {
      "index": 170,
      "start_time": 803579.0,
      "end_time": 808630.0,
      "text": "want to run it. I just want to have its definitions available and so, in that case, this if statement"
    },
    {
      "index": 171,
      "start_time": 808630.0,
      "end_time": 812899.0,
      "text": "will be false if I load it. And so then, it will bring the module in but it won&#39;t run"
    },
    {
      "index": 172,
      "start_time": 812899.0,
      "end_time": 819310.0,
      "text": "its main. So, that&#39;s what the if statement is for. But for today, we&#39;re just always going"
    },
    {
      "index": 173,
      "start_time": 819310.0,
      "end_time": 823510.0,
      "text": "to run it just like hello.py so you don&#39;t need to worry about this too much. Okay, so"
    },
    {
      "index": 174,
      "start_time": 823510.0,
      "end_time": 828310.0,
      "text": "let me show you--I want to, you know, I going to add a few features to this thing; and so"
    },
    {
      "index": 175,
      "start_time": 828310.0,
      "end_time": 833529.0,
      "text": "just to, kind of, show you some things. So first thing I&#39;m going to do is, I want to"
    },
    {
      "index": 176,
      "start_time": 833529.0,
      "end_time": 836529.0,
      "text": "print out the command-line arguments from my main here. It&#39;s just a very common thing"
    },
    {
      "index": 177,
      "start_time": 836529.0,
      "end_time": 846529.0,
      "text": "to want to do. And it turns out, there&#39;s a module called &quot;sys.&quot; And the sys module, there&#39;s"
    },
    {
      "index": 178,
      "start_time": 846529.0,
      "end_time": 850740.0,
      "text": "a Python--standard Python thing, it includes a lot of, sort of, operating system interface-type"
    },
    {
      "index": 179,
      "start_time": 850740.0,
      "end_time": 856180.0,
      "text": "stuff. So, you could access command-line arguments or you could exit the whole program or whatever."
    },
    {
      "index": 180,
      "start_time": 856180.0,
      "end_time": 861120.0,
      "text": "I&#39;ll show you how to bring up the documentation in a second. In Python, the way that you refer"
    },
    {
      "index": 181,
      "start_time": 861120.0,
      "end_time": 864500.0,
      "text": "to some external module of stuff you&#39;d like to pull in is you have an import statement."
    },
    {
      "index": 182,
      "start_time": 864500.0,
      "end_time": 869310.0,
      "text": "You say, &quot;import sys&quot; or import--I&#39;ll show you a bunch of different ones over the next"
    },
    {
      "index": 183,
      "start_time": 869310.0,
      "end_time": 874130.0,
      "text": "few days. And then, down here, to refer to something inside of the module, you say module"
    },
    {
      "index": 184,
      "start_time": 874130.0,
      "end_time": 877680.0,
      "text": "name, so &quot;sys&quot; and then dot and then and you&#39;ll just need to know the name. In this case,"
    },
    {
      "index": 185,
      "start_time": 877680.0,
      "end_time": 883490.0,
      "text": "it&#39;s, &quot;sys.argv,&quot; is the name of the command-line arguments in that module. So, I&#39;m going to"
    },
    {
      "index": 186,
      "start_time": 883490.0,
      "end_time": 890540.0,
      "text": "save that and then down here, I&#39;ll run, &quot;hello,&quot; and I&#39;ll just say like &quot;aaa bbb ccc,&quot; right?"
    },
    {
      "index": 187,
      "start_time": 890540.0,
      "end_time": 899680.0,
      "text": "So, those are command-line arguments. So now, when I run it, see it prints these out. So"
    },
    {
      "index": 188,
      "start_time": 899680.0,
      "end_time": 907160.0,
      "text": "that is a Python list. It has four--so Python lists have square brackets around them. And"
    },
    {
      "index": 189,
      "start_time": 907160.0,
      "end_time": 910970.0,
      "text": "we&#39;ll mess with this a lot more later on. In this case, this list has four elements"
    },
    {
      "index": 190,
      "start_time": 910970.0,
      "end_time": 914600.0,
      "text": "in it, which is, kind of, the old Unix standard way of doing command-line arguments. The first"
    },
    {
      "index": 191,
      "start_time": 914600.0,
      "end_time": 921000.0,
      "text": "argument, it points to the script itself, so that&#39;s &quot;./hello.py.&quot; And then, the subsequently"
    },
    {
      "index": 192,
      "start_time": 921000.0,
      "end_time": 929949.0,
      "text": "three elements--these guys here, that&#39;s just--Oops! These guys then just correspond to the arguments"
    },
    {
      "index": 193,
      "start_time": 929949.0,
      "end_time": 936209.0,
      "text": "here of that I passed at. So, what I want to show you--so, I&#39;m going back to my source"
    },
    {
      "index": 194,
      "start_time": 936209.0,
      "end_time": 941110.0,
      "text": "code here. So, so far, this part doesn&#39;t really do anything very useful. But I do want to"
    },
    {
      "index": 195,
      "start_time": 941110.0,
      "end_time": 944829.0,
      "text": "show you just the idea of a module like, yeah, there&#39;s--we&#39;re going to use modules a lot"
    },
    {
      "index": 196,
      "start_time": 944829.0,
      "end_time": 948269.0,
      "text": "today. So, that&#39;s how we&#39;re going to pull stuff, you know, you use codec way to write"
    },
    {
      "index": 197,
      "start_time": 948269.0,
      "end_time": 956959.0,
      "text": "by code of my program. Now, a very reasonable question is like, &quot;Oh, &#39;sys,&#39; like, how am"
    },
    {
      "index": 198,
      "start_time": 956959.0,
      "end_time": 961880.0,
      "text": "I supposed to know that?&quot; like, &quot;Where did that come from?&quot; So, I want to show you two"
    },
    {
      "index": 199,
      "start_time": 961880.0,
      "end_time": 967889.0,
      "text": "ways that you can, kind of, research what a module is and what it has in it. And I&#39;m"
    },
    {
      "index": 200,
      "start_time": 967889.0,
      "end_time": 973730.0,
      "text": "going to show you two. There&#39;s the hi-tech way and there&#39;s the easy way. And they both"
    },
    {
      "index": 201,
      "start_time": 973730.0,
      "end_time": 976649.0,
      "text": "work fine. So, you could use either of these ways. First of all, I&#39;ll show you the hi-tech"
    },
    {
      "index": 202,
      "start_time": 976649.0,
      "end_time": 983639.0,
      "text": "way. All right, so I&#39;m going to fire up the Python interpreter, and actually in the Python"
    },
    {
      "index": 203,
      "start_time": 983639.0,
      "end_time": 987959.0,
      "text": "interpreter, I can say &quot;import sys.&quot; I mean, it really kind of looks like a program. It&#39;s"
    },
    {
      "index": 204,
      "start_time": 987959.0,
      "end_time": 994300.0,
      "text": "just that I get to type stuff interactively. So then, inside of--there are two functions"
    },
    {
      "index": 205,
      "start_time": 994300.0,
      "end_time": 1001170.0,
      "text": "in here. One is &quot;dir,&quot; so I can do a &quot;dir&quot; on sys. And what that does is to just, kind"
    },
    {
      "index": 206,
      "start_time": 1001170.0,
      "end_time": 1005120.0,
      "text": "of, shows me all the symbols that are defined in there. So, it&#39;s sort of an homage to dash,"
    },
    {
      "index": 207,
      "start_time": 1005120.0,
      "end_time": 1010959.0,
      "text": "I always think of dir. And so, you can see, you know, if you didn&#39;t know about &quot;argv,&quot;"
    },
    {
      "index": 208,
      "start_time": 1010960.0,
      "end_time": 1014231.0,
      "text": "or whatever, you&#39;d say like, &quot;Oh, exit.&quot; &quot;Oh, that&#39;s probably the exit function,&quot; and--where&#39;s"
    },
    {
      "index": 209,
      "start_time": 1014230.0,
      "end_time": 1019320.0,
      "text": "&quot;argv?&quot; Oh, all right. Check it out. There&#39;s &quot;argv.&quot; So this--some of these are data, some"
    },
    {
      "index": 210,
      "start_time": 1019320.0,
      "end_time": 1023970.0,
      "text": "of them are codes but you can at least get a feel for what&#39;s inside of there. So, dir,"
    },
    {
      "index": 211,
      "start_time": 1023970.0,
      "end_time": 1030079.0,
      "text": "that&#39;s the first one; then there&#39;s a companion called help. And what help does is it kind"
    },
    {
      "index": 212,
      "start_time": 1030079.9999999999,
      "end_time": 1035819.9999999999,
      "text": "of pulls up sort of a JavaDoc, sort of a man page documents about like, oh, what is going"
    },
    {
      "index": 213,
      "start_time": 1035819.9999999999,
      "end_time": 1041530.9999999999,
      "text": "on with this module? And so, with dir and help, you can kind of poke around a little"
    },
    {
      "index": 214,
      "start_time": 1041530.0,
      "end_time": 1046110.0,
      "text": "bit and orient yourself. And what&#39;s nice--if you look at my list here, for example, there&#39;s--this"
    },
    {
      "index": 215,
      "start_time": 1046109.9999999999,
      "end_time": 1052169.0,
      "text": "is my example, there&#39;s exit. So, that&#39;s sys dot exit that&#39;s a function. I can actually"
    },
    {
      "index": 216,
      "start_time": 1052170.0,
      "end_time": 1059331.0,
      "text": "say help of sys dot exit, and then it pulls up just help about that function. So, just"
    },
    {
      "index": 217,
      "start_time": 1059330.0,
      "end_time": 1064730.0,
      "text": "in Python and in lecture or whatever, I will say, &quot;Oh, use the Ebola ABC Module,&quot; and I&#39;ll"
    },
    {
      "index": 218,
      "start_time": 1064730.0,
      "end_time": 1067230.0,
      "text": "kind of mention a couple of functions that you need to use but I won&#39;t give you further"
    },
    {
      "index": 219,
      "start_time": 1067230.0,
      "end_time": 1070590.0,
      "text": "direction than that. And so then, what you know, which is a very realistic position to"
    },
    {
      "index": 220,
      "start_time": 1070590.0,
      "end_time": 1074730.0,
      "text": "be in. And what will happen is that in Python, you can use dir and help to kind of dig around"
    },
    {
      "index": 221,
      "start_time": 1074730.0,
      "end_time": 1082150.0,
      "text": "and get better docs, or you know, using--using this technique. I&#39;ll do another example. Remember"
    },
    {
      "index": 222,
      "start_time": 1082150.0,
      "end_time": 1088630.0,
      "text": "I talked about the len function earlier? So, I could say help of len and that like, gives"
    },
    {
      "index": 223,
      "start_time": 1088630.0,
      "end_time": 1092710.0,
      "text": "you like, okay--not pretty scant description but a little bit of description about that."
    },
    {
      "index": 224,
      "start_time": 1092710.0,
      "end_time": 1097190.0,
      "text": "One thing I&#39;ll point out about this first of all, usual--notice why, when I type help"
    },
    {
      "index": 225,
      "start_time": 1097190.0,
      "end_time": 1102809.0,
      "text": "len, I&#39;m just typing len without a set of parentheses after it? And that&#39;s a kind of"
    },
    {
      "index": 226,
      "start_time": 1102810.0,
      "end_time": 1110641.0,
      "text": "subtle syntactic distinction. When I say len paren hello like that, I&#39;m calling the len"
    },
    {
      "index": 227,
      "start_time": 1110640.0,
      "end_time": 1117230.0,
      "text": "function. But when I just say len with no parens like that, I&#39;m just referring to the"
    },
    {
      "index": 228,
      "start_time": 1117230.0,
      "end_time": 1119789.0,
      "text": "len function. I&#39;m pointing to say, well, here is some code. Don&#39;t run it, I just want to"
    },
    {
      "index": 229,
      "start_time": 1119790.0,
      "end_time": 1127861.0,
      "text": "talk about this code. So, here when I call help, notice it&#39;s just len and it&#39;s just unadorned,"
    },
    {
      "index": 230,
      "start_time": 1127860.0,
      "end_time": 1133370.0,
      "text": "all righty? So, let me show you--so that&#39;s the high-tech way of doing dir and help, certainly"
    },
    {
      "index": 231,
      "start_time": 1133370.0,
      "end_time": 1140110.0,
      "text": "very useful. Now, I&#39;ll show you the easy way. The easy way is you go to your browser and"
    },
    {
      "index": 232,
      "start_time": 1140110.0,
      "end_time": 1148140.0,
      "text": "you just go to Google and you just type Python--like what did we just do? I&#39;ll say Python sys exit"
    },
    {
      "index": 233,
      "start_time": 1148140.0,
      "end_time": 1152610.0,
      "text": "and then whatever; Google searches, for whatever reason, just work really well with Python."
    },
    {
      "index": 234,
      "start_time": 1152610.0,
      "end_time": 1156910.0,
      "text": "So, like the first couple hits, like yeah, it just is the docs for the Python sys exit"
    },
    {
      "index": 235,
      "start_time": 1156910.0,
      "end_time": 1163080.0,
      "text": "function or I&#39;ve been doing a Python--I&#39;ll show you strings in a second. So, if I say"
    },
    {
      "index": 236,
      "start_time": 1163080.0,
      "end_time": 1170580.0,
      "text": "Python string, type that out, oh yeah, first hit here. So, Python.org is the official--so,"
    },
    {
      "index": 237,
      "start_time": 1170580.0,
      "end_time": 1175830.0,
      "text": "Python, I should mention, is you know open-source and all, like good minor stuff. Python.org"
    },
    {
      "index": 238,
      "start_time": 1175830.0,
      "end_time": 1180070.0,
      "text": "is sort of the official Python home and so if you see a link that&#39;s docs.Python.org a"
    },
    {
      "index": 239,
      "start_time": 1180070.0,
      "end_time": 1184850.0,
      "text": "lot--you know that--Python.org has excellent documentation and tutorials and all sorts"
    },
    {
      "index": 240,
      "start_time": 1184850.0,
      "end_time": 1187770.0,
      "text": "of stuff like that. And so, if you get a Google search that just kind of points into that"
    },
    {
      "index": 241,
      "start_time": 1187770.0,
      "end_time": 1192450.0,
      "text": "a lot of times, so that&#39;s going to be nice authoritative answer. So, just doing Google"
    },
    {
      "index": 242,
      "start_time": 1192450.0,
      "end_time": 1196660.0,
      "text": "actually works amazing alone. I was feel like I&#39;m being kind of powerful and hip if I use"
    },
    {
      "index": 243,
      "start_time": 1196660.0,
      "end_time": 1201780.0,
      "text": "like, dir and help to dig around, but I must admit that in fact, just doing a Google search"
    },
    {
      "index": 244,
      "start_time": 1201780.0,
      "end_time": 1206690.0,
      "text": "that, like, any six-year old could do, like, in fact, works great. And so, you know, both"
    },
    {
      "index": 245,
      "start_time": 1206690.0,
      "end_time": 1211610.0,
      "text": "those techniques are available, you have to use whichever one you like, all righty. So,"
    },
    {
      "index": 246,
      "start_time": 1211610.0,
      "end_time": 1219360.0,
      "text": "let me show you--let me go back to my--get out of here. So, I want to build up the Python"
    },
    {
      "index": 247,
      "start_time": 1219360.0,
      "end_time": 1225390.0,
      "text": "code inside of a--inside of this function bit, show you couple of things. One thing,"
    },
    {
      "index": 248,
      "start_time": 1225390.0,
      "end_time": 1234890.0,
      "text": "I&#39;m going to show you a very common error, real quick. So, I&#39;m going to comment out the"
    },
    {
      "index": 249,
      "start_time": 1234890.0,
      "end_time": 1239010.0,
      "text": "import sys. So, incidentally the number sign is the comment character, so like, and that"
    },
    {
      "index": 250,
      "start_time": 1239010.0,
      "end_time": 1243590.0,
      "text": "just goes to the end of the line. So, this is a very typical way I would write this code."
    },
    {
      "index": 251,
      "start_time": 1243590.0,
      "end_time": 1249340.0,
      "text": "I&#39;m using sys.argv, but I&#39;ve forgotten to do the import. So, I want to show you what"
    },
    {
      "index": 252,
      "start_time": 1249340.0,
      "end_time": 1257510.0,
      "text": "that looks like. So, if I say hello, I get an error. So, this is a Python error trace."
    },
    {
      "index": 253,
      "start_time": 1257510.0,
      "end_time": 1263950.0,
      "text": "So, the most interesting part here is maybe at the bottom, says, &quot;Global name sys is not"
    },
    {
      "index": 254,
      "start_time": 1263950.0,
      "end_time": 1268240.0,
      "text": "defined.&quot; Now, the error is not very specific here but it&#39;s kind of--it doesn&#39;t quite know"
    },
    {
      "index": 255,
      "start_time": 1268240.0,
      "end_time": 1271590.0,
      "text": "if I wanted to have a variable name sys or module, it doesn&#39;t know. It just looks like"
    },
    {
      "index": 256,
      "start_time": 1271590.0,
      "end_time": 1276659.0,
      "text": "S-Y-S to it, but it is that error like, while I came across the symbol and it was not previously"
    },
    {
      "index": 257,
      "start_time": 1276660.0,
      "end_time": 1279471.0,
      "text": "defined. So, you could see that that is one of the basic rules of Python that if you--if"
    },
    {
      "index": 258,
      "start_time": 1279470.0,
      "end_time": 1284120.0,
      "text": "you&#39;re going to use a symbol, it previously needs to have been given a value. So, when"
    },
    {
      "index": 259,
      "start_time": 1284120.0,
      "end_time": 1287909.0,
      "text": "you see something like that and it refers to a module that you&#39;re trying to use, then"
    },
    {
      "index": 260,
      "start_time": 1287910.0,
      "end_time": 1294531.0,
      "text": "what that means is--oh, right, I forgot to do the import. So, I go back here, I&#39;ll put"
    },
    {
      "index": 261,
      "start_time": 1294530.0,
      "end_time": 1299900.0,
      "text": "the import back. So, essentially what the import does is it takes the symbol S-Y-S and"
    },
    {
      "index": 262,
      "start_time": 1299900.0,
      "end_time": 1304830.0,
      "text": "it binds it to point to something so that then down stream, when you say sys dot whatever,"
    },
    {
      "index": 263,
      "start_time": 1304830.0,
      "end_time": 1308750.0,
      "text": "it&#39;s able to see if it&#39;ll actually work. So, let&#39;s try that much and now work again. Okay"
    },
    {
      "index": 264,
      "start_time": 1308750.0,
      "end_time": 1313669.0,
      "text": "good, now we&#39;re back to just pitching the arguments. All right, so I&#39;d like to do--well,"
    },
    {
      "index": 265,
      "start_time": 1313670.0,
      "end_time": 1320981.0,
      "text": "I&#39;ll show you how to build a real program out of this. So, I&#39;m going to define a hello"
    },
    {
      "index": 266,
      "start_time": 1320980.0,
      "end_time": 1325020.0,
      "text": "function that does something. So, I&#39;ll say hello and then let&#39;s say this will take in"
    },
    {
      "index": 267,
      "start_time": 1325020.0,
      "end_time": 1337559.0,
      "text": "a string. So, I&#39;m doing a second def here and let&#39;s say--let&#39;s say this is a name, actually."
    },
    {
      "index": 268,
      "start_time": 1337560.0,
      "end_time": 1346821.0,
      "text": "I&#39;ll say prints, &quot;hello&quot; and then the print--you can actually separate things with commas."
    },
    {
      "index": 269,
      "start_time": 1346820.0,
      "end_time": 1350120.0,
      "text": "So, if I say &quot;hello&quot; name--and you can have multiple comments, multiple things in it;"
    },
    {
      "index": 270,
      "start_time": 1350120.0,
      "end_time": 1358390.0,
      "text": "it sort of prints those out and puts them on a line. So, what I&#39;ll do down here actually"
    },
    {
      "index": 271,
      "start_time": 1358390.0,
      "end_time": 1368240.0,
      "text": "and when I&#39;m all set, let&#39;s have--let&#39;s put a bunch of exclamation marks after the name."
    },
    {
      "index": 272,
      "start_time": 1368240.0,
      "end_time": 1371659.0,
      "text": "So, that&#39;s my little &quot;hello&quot; function that has two lines in it and I&#39;ll talk about the"
    },
    {
      "index": 273,
      "start_time": 1371660.0,
      "end_time": 1375851.0,
      "text": "plus and--you know, I&#39;m glossing over some details there, but you can sort of see what"
    },
    {
      "index": 274,
      "start_time": 1375850.0,
      "end_time": 1381360.0,
      "text": "it does. And then down here, I&#39;ll call my &quot;hello&quot; function and what I&#39;m going to do"
    },
    {
      "index": 275,
      "start_time": 1381360.0,
      "end_time": 1387059.0,
      "text": "is I&#39;m going to pass in the first command line argument. So that was sys.argv and that"
    },
    {
      "index": 276,
      "start_time": 1387060.0,
      "end_time": 1395741.0,
      "text": "turns out the zeroth element refers to the script itself which is--that&#39;s just an ancient"
    },
    {
      "index": 277,
      "start_time": 1395740.0,
      "end_time": 1401860.0,
      "text": "convention. So, the element that I really care about is sys.argv one there. So, I&#39;m"
    },
    {
      "index": 278,
      "start_time": 1401860.0,
      "end_time": 1407270.0,
      "text": "going to save that and I&#39;ll see if this works, so I&#39;ll say, &quot;Hello Alice,&quot; and so there,"
    },
    {
      "index": 279,
      "start_time": 1407270.0,
      "end_time": 1411600.0,
      "text": "check it out. All right, so now it prints &quot;Hello Alice,&quot; you can sort of see the results"
    },
    {
      "index": 280,
      "start_time": 1411600.0,
      "end_time": 1415679.0,
      "text": "there. All right, so let me talk a little bit. I just want to use this as a vehicle"
    },
    {
      "index": 281,
      "start_time": 1415680.0,
      "end_time": 1422081.0,
      "text": "to kind of talk about what&#39;s going on syntactically with Python. So, I&#39;ll sort of o through this"
    },
    {
      "index": 282,
      "start_time": 1422080.0,
      "end_time": 1426760.0,
      "text": "top to bottom. So, I give this thing an argument called name. Notice just like--just as with"
    },
    {
      "index": 283,
      "start_time": 1426760.0,
      "end_time": 1431390.0,
      "text": "the variables, I didn&#39;t have to declare that this was a string or an ant or anything like"
    },
    {
      "index": 284,
      "start_time": 1431390.0,
      "end_time": 1435080.0,
      "text": "that. I just say well, whatever; it&#39;s just called name and it just points to whatever"
    },
    {
      "index": 285,
      "start_time": 1435080.0,
      "end_time": 1440020.0,
      "text": "it points to. So, arguments and variables are similar, they&#39;re both just names that"
    },
    {
      "index": 286,
      "start_time": 1440020.0,
      "end_time": 1445130.0,
      "text": "point to some value. Then, in Python when you want set off a block of code, it very"
    },
    {
      "index": 287,
      "start_time": 1445130.0,
      "end_time": 1449010.0,
      "text": "often uses the colon, as you see here. So, I&#39;m going to say define this function and"
    },
    {
      "index": 288,
      "start_time": 1449010.0,
      "end_time": 1452190.0,
      "text": "there&#39;s a colon. Now, I&#39;m going to go to the next line and I&#39;m going to have, you know,"
    },
    {
      "index": 289,
      "start_time": 1452190.0,
      "end_time": 1457779.0,
      "text": "how are many lines of code I want to have. Now, this brings us to Python&#39;s most sort"
    },
    {
      "index": 290,
      "start_time": 1457780.0,
      "end_time": 1465951.0,
      "text": "of famous syntactic feature which is that Python does not have any sort--any left curly"
    },
    {
      "index": 291,
      "start_time": 1465950.0,
      "end_time": 1473919.0,
      "text": "brace, right curly brace notion to enclose a block of code, instead, Python uses indentation."
    },
    {
      "index": 292,
      "start_time": 1473920.0,
      "end_time": 1477810.0,
      "text": "So, notice under the def here--so the Google standard is to indent by two spaces, and so"
    },
    {
      "index": 293,
      "start_time": 1477810.0,
      "end_time": 1482971.0,
      "text": "that&#39;s a fine thing to do for today. So under the def, this first line is indented by two"
    },
    {
      "index": 294,
      "start_time": 1482970.0,
      "end_time": 1487100.0,
      "text": "and this next line is indented by two. So, that&#39;s what&#39;s putting them inside of that"
    },
    {
      "index": 295,
      "start_time": 1487100.0,
      "end_time": 1491820.0,
      "text": "function and there just isn&#39;t a left curly brace or right curly brace I typed to put"
    },
    {
      "index": 296,
      "start_time": 1491820.0,
      "end_time": 1496620.0,
      "text": "those in there. So, this is--it&#39;s a little bit controversial. I&#39;ll just give you my take"
    },
    {
      "index": 297,
      "start_time": 1496620.0,
      "end_time": 1502039.0,
      "text": "on it. I think the idea is that if we were writing this in Java--I&#39;ll disturb all the"
    },
    {
      "index": 298,
      "start_time": 1502040.0,
      "end_time": 1505511.0,
      "text": "real Python people here, you know. I don&#39;t know. Suppose it looked like this ... sounds"
    },
    {
      "index": 299,
      "start_time": 1505510.0,
      "end_time": 1511240.0,
      "text": "really funny, all right. Suppose we had that, right? We&#39;re blocking out the code that makes"
    },
    {
      "index": 300,
      "start_time": 1511240.0,
      "end_time": 1516520.0,
      "text": "this function and what we would&#39;ve indented--like we would&#39;ve had one set of brain cells that"
    },
    {
      "index": 301,
      "start_time": 1516520.0,
      "end_time": 1520570.0,
      "text": "was managing the curly bracers and putting them in right. But then, we also would&#39;ve"
    },
    {
      "index": 302,
      "start_time": 1520570.0,
      "end_time": 1523789.0,
      "text": "indented correctly, right? And we were raised right and it looks terrible. So, of course,"
    },
    {
      "index": 303,
      "start_time": 1523790.0,
      "end_time": 1525920.0,
      "text": "we would&#39;ve indented correctly as well; that would&#39;ve been a second set of brain cells,"
    },
    {
      "index": 304,
      "start_time": 1525920.0,
      "end_time": 1529831.0,
      "text": "those. So, we would&#39;ve maintaining these two things kind of in parallel. But if you start"
    },
    {
      "index": 305,
      "start_time": 1529830.0,
      "end_time": 1533500.0,
      "text": "to think about it, those two bits of syntax would&#39;ve been reflecting the same piece of"
    },
    {
      "index": 306,
      "start_time": 1533500.0,
      "end_time": 1537140.0,
      "text": "information; they always would&#39;ve moved in tandem. And so, the Python idea is like you"
    },
    {
      "index": 307,
      "start_time": 1537140.0,
      "end_time": 1540850.0,
      "text": "know, having two bits of syntax that represent the same thing and then we&#39;re just trying"
    },
    {
      "index": 308,
      "start_time": 1540850.0,
      "end_time": 1545760.0,
      "text": "to keep them in sync is dumb. Like, we want to just do the quickest, most minimal, clean"
    },
    {
      "index": 309,
      "start_time": 1545760.0,
      "end_time": 1548950.0,
      "text": "thing and that&#39;s kind what Python looks like, and so it&#39;s like, you know what? Let&#39;s just"
    },
    {
      "index": 310,
      "start_time": 1548950.0,
      "end_time": 1553799.0,
      "text": "get rid of the curly braces. If the--if we want to look right--so I&#39;ll put the colon"
    },
    {
      "index": 311,
      "start_time": 1553800.0,
      "end_time": 1559441.0,
      "text": "back there--let&#39;s just have the indentation define how the blocks of code go. I&#39;ll fill"
    },
    {
      "index": 312,
      "start_time": 1559440.0,
      "end_time": 1563400.0,
      "text": "this--this function have to be little longer so you&#39;d get a better feel for what indentation"
    },
    {
      "index": 313,
      "start_time": 1563400.0,
      "end_time": 1568270.0,
      "text": "looks like. My advice about this is that it seems extremely foreign, weird and slightly"
    },
    {
      "index": 314,
      "start_time": 1568270.0,
      "end_time": 1573110.0,
      "text": "wrong for about the first 11 minutes that you use it. And then, it&#39;s just fine. I mean,"
    },
    {
      "index": 315,
      "start_time": 1573110.0,
      "end_time": 1577400.0,
      "text": "it&#39;s just basically very logical and reason why--it&#39;s kind of visual and so, it very quickly"
    },
    {
      "index": 316,
      "start_time": 1577400.0,
      "end_time": 1582330.0,
      "text": "just seems normal. So I encourage you just not worry about it. All right, so let me--I"
    },
    {
      "index": 317,
      "start_time": 1582330.0,
      "end_time": 1584620.0,
      "text": "want to make this function a little longer; then allow me to demonstrate the indentation"
    },
    {
      "index": 318,
      "start_time": 1584620.0,
      "end_time": 1590240.0,
      "text": "a little more. Yeah, question? &gt;&gt; It has space between hello and Alice [INDISTINCT]."
    },
    {
      "index": 319,
      "start_time": 1590240.0,
      "end_time": 1593640.0,
      "text": "&gt;&gt; PARLANTE: Oh, so yeah, the question is, where does the space come? That&#39;s a quality"
    },
    {
      "index": 320,
      "start_time": 1593640.0,
      "end_time": 1597929.0,
      "text": "of print that when you separate things with a comma, it puts a single space between them."
    },
    {
      "index": 321,
      "start_time": 1597930.0,
      "end_time": 1603361.0,
      "text": "If I wanted to bunch those together, I could&#39;ve done a plus. The plus in string space just"
    },
    {
      "index": 322,
      "start_time": 1603360.0,
      "end_time": 1608919.0,
      "text": "crams them together, so that would&#39;ve done it. All right, so, let me show you--so, I"
    },
    {
      "index": 323,
      "start_time": 1608920.0,
      "end_time": 1615060.0,
      "text": "want to make this a little fancier here. I&#39;m going to put in an If statement. So, let&#39;s"
    },
    {
      "index": 324,
      "start_time": 1615060.0,
      "end_time": 1619951.0,
      "text": "see. I&#39;ll say if--let&#39;s say, if name and I know I&#39;ll just end up showing you how Boolean"
    },
    {
      "index": 325,
      "start_time": 1619950.0,
      "end_time": 1629809.0,
      "text": "this stuff work. If name is, let&#39;s say, Alice, then we&#39;ll say--I&#39;m just going to--this won&#39;t"
    },
    {
      "index": 326,
      "start_time": 1629810.0,
      "end_time": 1638780.0,
      "text": "be very meaningful. Here, we&#39;ll add some question marks on there. So the--I&#39;ll just start at"
    },
    {
      "index": 327,
      "start_time": 1638780.0,
      "end_time": 1643741.0,
      "text": "the top here. So, this is what an If statement looks like. You say if and then you have the"
    },
    {
      "index": 328,
      "start_time": 1643740.0,
      "end_time": 1648140.0,
      "text": "test and then there&#39;s a colon and then it has whatever--block of statements underneath"
    },
    {
      "index": 329,
      "start_time": 1648140.0,
      "end_time": 1653730.0,
      "text": "it. Now, just to get with this idea of indentation, if I wanted to also do multiple things, I"
    },
    {
      "index": 330,
      "start_time": 1653730.0,
      "end_time": 1659510.0,
      "text": "could say you know, you know, I&#39;d consider, you know, &quot;Alert: Alice Mode&quot; here or something."
    },
    {
      "index": 331,
      "start_time": 1659510.0,
      "end_time": 1663919.0,
      "text": "The fact that those two lines, the print alert and these two lines are underneath the If,"
    },
    {
      "index": 332,
      "start_time": 1663920.0,
      "end_time": 1667341.0,
      "text": "that&#39;s what&#39;s putting them, you know, under the control of that if statement. And then"
    },
    {
      "index": 333,
      "start_time": 1667340.0,
      "end_time": 1672440.0,
      "text": "here, when this line is indented back to Alt that--that&#39;s what putting me outside the If"
    },
    {
      "index": 334,
      "start_time": 1672440.0,
      "end_time": 1675529.0,
      "text": "statement. So, this is what it means to say that the indentation is significant, right?"
    },
    {
      "index": 335,
      "start_time": 1675530.0,
      "end_time": 1681001.0,
      "text": "Where something is placed left-right does control what the code means and so that&#39;s"
    },
    {
      "index": 336,
      "start_time": 1681000.0,
      "end_time": 1684930.0,
      "text": "the foreign part. All right, so let&#39;s start about this If statement. Here, I&#39;m using"
    },
    {
      "index": 337,
      "start_time": 1684930.0,
      "end_time": 1691539.0,
      "text": "&quot;= =.&quot; &quot;= =&quot; does sort of an intuitive deep comparison. In some languages, you kind of"
    },
    {
      "index": 338,
      "start_time": 1691540.0,
      "end_time": 1696121.0,
      "text": "have to worry, well, is this a point of comparison or whatever? In Python, you do not to have"
    },
    {
      "index": 339,
      "start_time": 1696120.0,
      "end_time": 1700140.0,
      "text": "that worry. &quot;= =&quot; does what I have described as a kind of a real comparison. It takes the"
    },
    {
      "index": 340,
      "start_time": 1700140.0,
      "end_time": 1703419.0,
      "text": "thing on the left, the thing in the right and it really fleshes them out and compares"
    },
    {
      "index": 341,
      "start_time": 1703420.0,
      "end_time": 1707091.0,
      "text": "them. So, it works for integers, it works for strings; later on, I&#39;ll show you it works"
    },
    {
      "index": 342,
      "start_time": 1707090.0,
      "end_time": 1711299.0,
      "text": "for entire lists. So, you could have relatively big data structures and just compare them"
    },
    {
      "index": 343,
      "start_time": 1711300.0,
      "end_time": 1720871.0,
      "text": "with &quot;= =&quot; and you&#39;d still get a reasonable result. In C++ or Java, you always got to"
    },
    {
      "index": 344,
      "start_time": 1720870.0,
      "end_time": 1727659.0,
      "text": "have the parentheses around the test. In Python, the parentheses are not required. And then,"
    },
    {
      "index": 345,
      "start_time": 1727660.0,
      "end_time": 1732201.0,
      "text": "so it&#39;s regarded as the best Python style to not put them in. It&#39;s a little bit like--it&#39;s"
    },
    {
      "index": 346,
      "start_time": 1732200.0,
      "end_time": 1736039.0,
      "text": "like speaking with your sort of vulgar accent. Like if you put the parens in, then everyone&#39;s"
    },
    {
      "index": 347,
      "start_time": 1736040.0,
      "end_time": 1741040.0,
      "text": "like, &quot;Oh, I see. One of you is, you know, C++ refugees.&quot; So, you could sort of show"
    },
    {
      "index": 348,
      "start_time": 1741040.0,
      "end_time": 1747430.0,
      "text": "off your modernity by, like, not putting in it. If you want to have a logical connective,"
    },
    {
      "index": 349,
      "start_time": 1747430.0,
      "end_time": 1753021.0,
      "text": "this is a little bit strange. The logical connectives are spelled out with letters."
    },
    {
      "index": 350,
      "start_time": 1753020.0,
      "end_time": 1761830.0,
      "text": "So, or is O-R and is A-N-D and not is--it&#39;s a little hard to say in English--not isn&#39;t"
    },
    {
      "index": 351,
      "start_time": 1761830.0,
      "end_time": 1770309.0,
      "text": "the thing above the one on the keyboard, its N-O-T. So, I&#39;ll say, you know, if name is,"
    },
    {
      "index": 352,
      "start_time": 1770310.0,
      "end_time": 1778461.0,
      "text": "you know, Nick. So, finally, I&#39;ll put a--I&#39;ll put an else in here just to show off. So I&#39;ll"
    },
    {
      "index": 353,
      "start_time": 1778460.0,
      "end_time": 1791230.0,
      "text": "say else colon--what do we do in the else case? I&#39;ll print &quot;Else.&quot; Okay. So, now you"
    },
    {
      "index": 354,
      "start_time": 1791230.0,
      "end_time": 1793440.0,
      "text": "that--you could sort of see the indentation and you&#39;re really working here and we&#39;ve got"
    },
    {
      "index": 355,
      "start_time": 1793440.0,
      "end_time": 1800140.0,
      "text": "this kind of modest Python program. All those mentioned, you know, all the regular Boolean"
    },
    {
      "index": 356,
      "start_time": 1800140.0,
      "end_time": 1803360.0,
      "text": "stuff. You know, there&#39;s less than and equal equal and, you know, all the kind of regular"
    },
    {
      "index": 357,
      "start_time": 1803360.0,
      "end_time": 1809399.0,
      "text": "Boolean stuff works in Python as it does in other languages. There are Boolean true and"
    },
    {
      "index": 358,
      "start_time": 1809400.0,
      "end_time": 1817550.0,
      "text": "false values, although those aren&#39;t used very often. The rule in Python is that if you have"
    },
    {
      "index": 359,
      "start_time": 1817550.0,
      "end_time": 1822930.0,
      "text": "appointed (ph) or something, there&#39;s a few kind of null values that count as false. So,"
    },
    {
      "index": 360,
      "start_time": 1822930.0,
      "end_time": 1827081.0,
      "text": "if a number is zero that counts as false. If a string is the empty string that counts"
    },
    {
      "index": 361,
      "start_time": 1827080.0,
      "end_time": 1832720.0,
      "text": "as false and any other value or, you know, and the--or if the string is not empty or"
    },
    {
      "index": 362,
      "start_time": 1832720.0,
      "end_time": 1837450.0,
      "text": "if a number is not zero, then those count as true. So, that&#39;s similar to how other languages"
    },
    {
      "index": 363,
      "start_time": 1837450.0,
      "end_time": 1841350.0,
      "text": "do it. All right, so let me just try running this a little bit. So, I guess if I run this"
    },
    {
      "index": 364,
      "start_time": 1841350.0,
      "end_time": 1847669.0,
      "text": "and I say &quot;Hello Alice,&quot; then my If statement kicks in, so I get all those question marks"
    },
    {
      "index": 365,
      "start_time": 1847670.0,
      "end_time": 1851951.0,
      "text": "and then the line below kicks in and I go--oh, it&#39;s pretty doofy, pretty doofy looking out,"
    },
    {
      "index": 366,
      "start_time": 1851950.0,
      "end_time": 1859029.0,
      "text": "but hey, at least it works. So, I&#39;m going to show you--I&#39;m going to make a very sweeping"
    },
    {
      "index": 367,
      "start_time": 1859030.0,
      "end_time": 1865631.0,
      "text": "claim about how Python works. Python does everything at the last possible second. So,"
    },
    {
      "index": 368,
      "start_time": 1865630.0,
      "end_time": 1871769.0,
      "text": "in C++ or Java, it takes your code and it compiles and it checks it in a million different"
    },
    {
      "index": 369,
      "start_time": 1871770.0,
      "end_time": 1875191.0,
      "text": "ways and you might get a lot of different compile errors, and then only after all that"
    },
    {
      "index": 370,
      "start_time": 1875190.0,
      "end_time": 1881169.0,
      "text": "compile checking, then it runs it. That&#39;s not how Python works. When you feed your Python"
    },
    {
      "index": 371,
      "start_time": 1881170.0,
      "end_time": 1886280.0,
      "text": "code like my hello.py in the Python, it just looks at it in the most superficial way, it"
    },
    {
      "index": 372,
      "start_time": 1886280.0,
      "end_time": 1892571.0,
      "text": "checks pretty much nothing; it just starts running it. And each line it gets to, it evaluates"
    },
    {
      "index": 373,
      "start_time": 1892570.0,
      "end_time": 1897029.0,
      "text": "at that line kind of in the moment. So, in the moment, it looks at what those variables"
    },
    {
      "index": 374,
      "start_time": 1897030.0,
      "end_time": 1901211.0,
      "text": "point to and oh, he&#39;s got a string and an ant here and it just tries to do it just at"
    },
    {
      "index": 375,
      "start_time": 1901210.0,
      "end_time": 1905159.0,
      "text": "the last possible second. And only at that second does it notice if there&#39;s an error,"
    },
    {
      "index": 376,
      "start_time": 1905160.0,
      "end_time": 1908930.0,
      "text": "maybe a variable is not defined or you&#39;re calling a function that doesn&#39;t exist or you"
    },
    {
      "index": 377,
      "start_time": 1908930.0,
      "end_time": 1913040.0,
      "text": "know, dividing by zero--I mean, we&#39;re always, you know, aware of bugs. So, to highlight"
    },
    {
      "index": 378,
      "start_time": 1913040.0,
      "end_time": 1921530.0,
      "text": "that, I want to try calling a function here. I&#39;m going to call a function called DoesNotExist."
    },
    {
      "index": 379,
      "start_time": 1921530.0,
      "end_time": 1927451.0,
      "text": "Here, I&#39;ll pass in a name. Now, there is no such function. I haven&#39;t defined it, there&#39;s"
    },
    {
      "index": 380,
      "start_time": 1927450.0,
      "end_time": 1934350.0,
      "text": "not a built in code DoesNotExist, it&#39;s just wrong, all right? That else is just incorrect."
    },
    {
      "index": 381,
      "start_time": 1934350.0,
      "end_time": 1939919.0,
      "text": "This does demonstrate a deep quality of Python. Now, if I call hello.py and pass Alice, you"
    },
    {
      "index": 382,
      "start_time": 1939920.0,
      "end_time": 1946751.0,
      "text": "know what? It&#39;s going to work fine. All right, this is what I mean. What happens is Python"
    },
    {
      "index": 383,
      "start_time": 1946750.0,
      "end_time": 1953559.0,
      "text": "only checks a line when it runs that line, all right? And so, because it just kind of"
    },
    {
      "index": 384,
      "start_time": 1953560.0,
      "end_time": 1959331.0,
      "text": "never hit this else, whatever, it just kind of never knows that that was wrong. Now, in"
    },
    {
      "index": 385,
      "start_time": 1959330.0,
      "end_time": 1963830.0,
      "text": "the great, you know--as we understand the universe, you don&#39;t get something for nothing."
    },
    {
      "index": 386,
      "start_time": 1963830.0,
      "end_time": 1967789.0,
      "text": "Well, in Python it means there&#39;s not a big barrier between you and just, like, your code"
    },
    {
      "index": 387,
      "start_time": 1967790.0,
      "end_time": 1973861.0,
      "text": "running. And that can be a real virtue in a lot of cases. But also, you&#39;re giving up"
    },
    {
      "index": 388,
      "start_time": 1973860.0,
      "end_time": 1979750.0,
      "text": "a certain amount of checking that some languages might have done. This also means that in a"
    },
    {
      "index": 389,
      "start_time": 1979750.0,
      "end_time": 1984269.0,
      "text": "more industrial sense, because Python doesn&#39;t really check a lot at a compel time, for industrial"
    },
    {
      "index": 390,
      "start_time": 1984270.0,
      "end_time": 1988020.0,
      "text": "code, it&#39;s more important for it have to have good units test coverage. Like you actually"
    },
    {
      "index": 391,
      "start_time": 1988020.0,
      "end_time": 1992351.0,
      "text": "need to have run all the lines to see that they&#39;re correct. Now, for our two days, we&#39;re"
    },
    {
      "index": 392,
      "start_time": 1992350.0,
      "end_time": 1995480.0,
      "text": "going to work on things that are just kind of medium sized little utilities where, you"
    },
    {
      "index": 393,
      "start_time": 1995480.0,
      "end_time": 1998919.0,
      "text": "know, if they&#39;re incorrect, you can see pretty clearly and so for that kind of problem Python"
    },
    {
      "index": 394,
      "start_time": 1998920.0,
      "end_time": 2005321.0,
      "text": "is really a good match. All righty. So, let me show you--I think I&#39;m going to go back"
    },
    {
      "index": 395,
      "start_time": 2005320.0,
      "end_time": 2010559.0,
      "text": "to the Python interpreter here. And I&#39;ve showed you--I&#39;ve sort of used strings and lists and"
    },
    {
      "index": 396,
      "start_time": 2010560.0,
      "end_time": 2013300.0,
      "text": "a few things informally, but I never really explained them, so I want to kind of slowdown"
    },
    {
      "index": 397,
      "start_time": 2013300.0,
      "end_time": 2018511.0,
      "text": "a little bit here and actually talk about how some of these things work. So, the Python"
    },
    {
      "index": 398,
      "start_time": 2018510.0,
      "end_time": 2028340.0,
      "text": "string-type is enclosed in quotes. So, there&#39;s like this string &quot;hello&quot; I&#39;ve been done. You"
    },
    {
      "index": 399,
      "start_time": 2028340.0,
      "end_time": 2036429.0,
      "text": "can also actually put the string in double quotes or--here I&#39;ll do a different one. Isn&#39;t--oops--that"
    },
    {
      "index": 400,
      "start_time": 2036430.0,
      "end_time": 2041170.0,
      "text": "works the same. There&#39;s not a deep semantic difference you could--it&#39;s just your choice,"
    },
    {
      "index": 401,
      "start_time": 2041170.0,
      "end_time": 2046400.0,
      "text": "you can either use single quotes or double quotes. The one difference is that inside"
    },
    {
      "index": 402,
      "start_time": 2046400.0,
      "end_time": 2050600.0,
      "text": "of a double quoted string, as I have here, you can put a single quote like isn&#39;t there"
    },
    {
      "index": 403,
      "start_time": 2050600.0,
      "end_time": 2055650.0,
      "text": "and it just, just works. And, likewise, if I&#39;d use single quotes, on the outside, I could"
    },
    {
      "index": 404,
      "start_time": 2055650.0,
      "end_time": 2062370.0,
      "text": "put a double quote inside. There&#39;s not a real strong preference. You can kind of use which"
    },
    {
      "index": 405,
      "start_time": 2062370.0,
      "end_time": 2066501.0,
      "text": "the one you prefer. I tend to use the single quote one. It&#39;s just, it looks a little Python"
    },
    {
      "index": 406,
      "start_time": 2066500.0,
      "end_time": 2069500.0,
      "text": "to me. Yeah, question. &gt;&gt; What kind string that you want include"
    },
    {
      "index": 407,
      "start_time": 2069500.0,
      "end_time": 2072589.0,
      "text": "single and double quotes? &gt;&gt; PARLANTE: Ah, in fairness to your question,"
    },
    {
      "index": 408,
      "start_time": 2072590.0000000002,
      "end_time": 2076061.0000000002,
      "text": "so if want to--so let&#39;s say I&#39;ll do a double quoted one and I want to put a double quote"
    },
    {
      "index": 409,
      "start_time": 2076060.0,
      "end_time": 2082579.0,
      "text": "inside of it. So say like--I--what would you say, I&#39;d say like--I--what you do is you put"
    },
    {
      "index": 410,
      "start_time": 2082580.0,
      "end_time": 2088011.0,
      "text": "a back quote, a back taken from it. So I&#39;d say, &quot;I love this exercise,&quot; yeah, that&#39;s"
    },
    {
      "index": 411,
      "start_time": 2088010.0000000002,
      "end_time": 2094839.0000000002,
      "text": "fine. Well, alternately, I could have done it, and set some quotes. All right. So, I"
    },
    {
      "index": 412,
      "start_time": 2094840.0000000002,
      "end_time": 2103340.0,
      "text": "should you--let&#39;s see what&#39;s a--isn&#39;t. So I showed you the &quot;len.&quot; Oops. The &quot;len&quot; function"
    },
    {
      "index": 413,
      "start_time": 2103340.0,
      "end_time": 2111421.0,
      "text": "earlier. So strings also––as I think I&#39;ve already done, they--the plus works. So if"
    },
    {
      "index": 414,
      "start_time": 2111420.0,
      "end_time": 2118530.0,
      "text": "I&#39;d say &quot;a + you know yay&quot; then that puts it together, you know, plus put strings together"
    },
    {
      "index": 415,
      "start_time": 2118530.0,
      "end_time": 2126599.0,
      "text": "to make a bigger string. Strings in Python are what is called immutable and that means"
    },
    {
      "index": 416,
      "start_time": 2126600.0,
      "end_time": 2131281.0,
      "text": "that once the string is created it never changes. It&#39;s like a little read only thing. That&#39;s"
    },
    {
      "index": 417,
      "start_time": 2131280.0,
      "end_time": 2134200.0,
      "text": "a pretty modern style that turns out to be pretty popular in a lot of languages. So for"
    },
    {
      "index": 418,
      "start_time": 2134200.0,
      "end_time": 2139160.0,
      "text": "an example when I did that little plus there, if I look at the original &quot;a&quot; it&#39;s unchanged."
    },
    {
      "index": 419,
      "start_time": 2139160.0,
      "end_time": 2145369.0,
      "text": "All right, the--so whenever anything you do with strings, lowercase, uppercase, I&#39;m gonna"
    },
    {
      "index": 420,
      "start_time": 2145370.0,
      "end_time": 2150511.0,
      "text": "show you a few things. It&#39;s always creating new strings to sort of show you the result,"
    },
    {
      "index": 421,
      "start_time": 2150510.0,
      "end_time": 2156599.0,
      "text": "but the original string it&#39;s always left unchanged. So, well, maybe I&#39;ll do is I&#39;ll set &quot;a&quot; to"
    },
    {
      "index": 422,
      "start_time": 2156600.0,
      "end_time": 2165401.0,
      "text": "let&#39;s say uppercase &quot;hello.&quot; Now it turns out there are a bunch of built-in string what"
    },
    {
      "index": 423,
      "start_time": 2165400.0,
      "end_time": 2170630.0,
      "text": "are called methods and I&#39;ll show you one now. So for example there&#39;s one called &quot;lower&quot;"
    },
    {
      "index": 424,
      "start_time": 2170630.0,
      "end_time": 2176730.0,
      "text": "and what that does is it makes the lowercase version of a string. Now the reason this is"
    },
    {
      "index": 425,
      "start_time": 2176730.0,
      "end_time": 2181790.0,
      "text": "called a method and this is basic object oriented programming just as a--you know there&#39;s some--a"
    },
    {
      "index": 426,
      "start_time": 2181790.0,
      "end_time": 2186760.0,
      "text": "few things that are very easy and that&#39;s we&#39;re going to work on for the next couple of days."
    },
    {
      "index": 427,
      "start_time": 2186760.0,
      "end_time": 2190890.0,
      "text": "&quot;A&quot; this is, it points to the string, all right, I could think of a string object and"
    },
    {
      "index": 428,
      "start_time": 2190890.0,
      "end_time": 2196570.0,
      "text": "with this syntax where I say pointer to a thing dot and them the name of the method"
    },
    {
      "index": 429,
      "start_time": 2196570.0,
      "end_time": 2202390.0,
      "text": "I want to run. What that means is run that method on that object. So if I had &quot;b&quot; is"
    },
    {
      "index": 430,
      "start_time": 2202390.0,
      "end_time": 2209670.0,
      "text": "equal to like &quot;yay,&quot; so if I say &quot;b.lower&quot; okay, well, it runs on that string. Whereas"
    },
    {
      "index": 431,
      "start_time": 2209670.0,
      "end_time": 2213260.0,
      "text": "when I&#39;d say &quot;a.lower&quot; then it ran on &quot;a,&quot; so that&#39;s basic, it&#39;s, it&#39;s, it doesn&#39;t, it&#39;s"
    },
    {
      "index": 432,
      "start_time": 2213260.0,
      "end_time": 2217619.0,
      "text": "a different syntax for running a piece of code called the method on an object and that&#39;s"
    },
    {
      "index": 433,
      "start_time": 2217620.0,
      "end_time": 2223171.0,
      "text": "you know hopefully pretty--that&#39;s done pretty intuitively. So, what I was saying before"
    },
    {
      "index": 434,
      "start_time": 2223170.0,
      "end_time": 2227839.0,
      "text": "is that strings are immutable, they are never changed. So for example, if I look at the"
    },
    {
      "index": 435,
      "start_time": 2227840.0,
      "end_time": 2233981.0,
      "text": "original--so here, I&#39;ll do it again. If I say &quot;a.lower&quot; that&#39;s not changing &quot;a&quot; that&#39;s"
    },
    {
      "index": 436,
      "start_time": 2233980.0,
      "end_time": 2240390.0,
      "text": "returning to me a new string that&#39;s the lowercase version I wanted. d if I look at the original"
    },
    {
      "index": 437,
      "start_time": 2240390.0,
      "end_time": 2250280.0,
      "text": "&quot;a, it&#39;s unchanged. Now Python has--there are many built-in string methods. I showed"
    },
    {
      "index": 438,
      "start_time": 2250280.0,
      "end_time": 2258869.0,
      "text": "you lower. I can show you--there&#39;s like a find, just for example. So if I say &quot;a.find"
    },
    {
      "index": 439,
      "start_time": 2258870.0,
      "end_time": 2265321.0,
      "text": "of &quot;e&quot; and what that does is it searches in the string for the first occurrence of that"
    },
    {
      "index": 440,
      "start_time": 2265320.0,
      "end_time": 2271680.0,
      "text": "and then returns to me in the index. Now in reality, there are probably dozens of built-in"
    },
    {
      "index": 441,
      "start_time": 2271680.0,
      "end_time": 2274790.0,
      "text": "string methods and I&#39;m not gonna demo them all in lecture. I just want you to know that"
    },
    {
      "index": 442,
      "start_time": 2274790.0,
      "end_time": 2278349.0,
      "text": "there are a lot of built-in ones and either you could look at the Python (ph) where it"
    },
    {
      "index": 443,
      "start_time": 2278350.0,
      "end_time": 2283571.0,
      "text": "talks about some of the common ones, or you could type, you know, in Google, type, Python"
    },
    {
      "index": 444,
      "start_time": 2283570.0,
      "end_time": 2289369.0,
      "text": "string, or maybe Python string method and go to the page where it list them all. One"
    },
    {
      "index": 445,
      "start_time": 2289370.0,
      "end_time": 2292850.0,
      "text": "of the theme--you know one of the reasons that software is a lot more productive than"
    },
    {
      "index": 446,
      "start_time": 2292850.0,
      "end_time": 2298151.0,
      "text": "it was say 15 years ago is that we&#39;ve gotten better at having what I think sort of built-in"
    },
    {
      "index": 447,
      "start_time": 2298150.0,
      "end_time": 2302349.0,
      "text": "codes. Like a code you didn&#39;t write that, but that you can call and it just solves basic"
    },
    {
      "index": 448,
      "start_time": 2302350.0,
      "end_time": 2307691.0,
      "text": "problems for you, sort of code reuse, and Python like any modern language actually has"
    },
    {
      "index": 449,
      "start_time": 2307690.0,
      "end_time": 2312540.0,
      "text": "a lot of code already done for you. And so one of the basic skills--I think it&#39;s kind"
    },
    {
      "index": 450,
      "start_time": 2312540.0,
      "end_time": 2317140.0,
      "text": "of living higher on the food chain is when you&#39;re solving a problem, you don&#39;t necessarily"
    },
    {
      "index": 451,
      "start_time": 2317140.0,
      "end_time": 2320890.0,
      "text": "like, &quot;Oh, now I&#39;m gonna manually ride a loop to solve that.&quot; Very often your first instinct"
    },
    {
      "index": 452,
      "start_time": 2320890.0,
      "end_time": 2324119.0,
      "text": "is to find the module and dig around a little bit to find some code that somebody else already"
    },
    {
      "index": 453,
      "start_time": 2324120.0,
      "end_time": 2328161.0,
      "text": "wrote, it&#39;s already done and you&#39;re going to build your solution on top of that. That"
    },
    {
      "index": 454,
      "start_time": 2328160.0,
      "end_time": 2331210.0,
      "text": "is, that&#39;s a sort of good modern technique and it&#39;s an excellent Python technique. Python"
    },
    {
      "index": 455,
      "start_time": 2331210.0,
      "end_time": 2333790.0,
      "text": "has a lot of built-in stuff and you know over the cost of few days, I will certainly point"
    },
    {
      "index": 456,
      "start_time": 2333790.0,
      "end_time": 2341800.0,
      "text": "you where a lot of that code list. All right. So, I haven&#39;t talked about how to look inside"
    },
    {
      "index": 457,
      "start_time": 2341800.0,
      "end_time": 2347770.0,
      "text": "of a string. It turns out you can use a square brackets to look inside of a string. So if"
    },
    {
      "index": 458,
      "start_time": 2347770.0,
      "end_time": 2357300.0,
      "text": "I&#39;d say, &quot;a [0]&quot; that&#39;s the left most character in &quot;a [1]&quot; that&#39;s the &quot;e&quot; and so on. If I"
    },
    {
      "index": 459,
      "start_time": 2357300.0,
      "end_time": 2364079.0,
      "text": "go out of bounds here then that&#39;s an error, so I really need to adjust you know keep within"
    },
    {
      "index": 460,
      "start_time": 2364080.0,
      "end_time": 2372141.0,
      "text": "the bounds of the actual thing. So one last--some text--I&#39;ll show you for this--this is a little"
    },
    {
      "index": 461,
      "start_time": 2372140.0,
      "end_time": 2377660.0,
      "text": "less--so you can use the plus to put together. You know if I wanted to have a string and"
    },
    {
      "index": 462,
      "start_time": 2377660.0,
      "end_time": 2383119.0,
      "text": "whatever, I could use the plus to put together. There&#39;s another form that uses seized print-up"
    },
    {
      "index": 463,
      "start_time": 2383120.0,
      "end_time": 2389651.0,
      "text": "syntax where I could say like &quot;hi % s&quot; and the &quot;% s&quot; is a place holder where I&#39;d like"
    },
    {
      "index": 464,
      "start_time": 2389650.0,
      "end_time": 2396510.0,
      "text": "a string to go and I could say like, &quot;I have&quot; you know &quot;% d donuts&quot; and so that&#39;s, that&#39;s"
    },
    {
      "index": 465,
      "start_time": 2396510.0,
      "end_time": 2400500.0,
      "text": "called a format string and it a sort of--it&#39;s a good way of mixing in. You have this outer"
    },
    {
      "index": 466,
      "start_time": 2400500.0,
      "end_time": 2405030.0,
      "text": "skeleton and you want to sort of substitute in a few things and so then you use the &quot;%&quot;"
    },
    {
      "index": 467,
      "start_time": 2405030.0,
      "end_time": 2417349.0,
      "text": "sign and then you combine it with what you want. So here I&#39;ll say, &quot;Alice and 42.&quot; And"
    },
    {
      "index": 468,
      "start_time": 2417350.0,
      "end_time": 2421061.0,
      "text": "so using this sort of &quot;%&quot; construct, you can have a string in sort of substitute values"
    },
    {
      "index": 469,
      "start_time": 2421060.0,
      "end_time": 2425349.0,
      "text": "into it into make a bigger string. Does not it really ever required, you could always"
    },
    {
      "index": 470,
      "start_time": 2425350.0,
      "end_time": 2430441.0,
      "text": "have gotten that result using plus to kind of put the string together but, it&#39;s fairly"
    },
    {
      "index": 471,
      "start_time": 2430440.0,
      "end_time": 2433930.0,
      "text": "common to use this so I&#39;ll just, I&#39;ll just mention it. The last thing I&#39;ll say about"
    },
    {
      "index": 472,
      "start_time": 2433930.0,
      "end_time": 2440420.0,
      "text": "strings is that, the strings that I&#39;m showing you right here these are Unicode strings."
    },
    {
      "index": 473,
      "start_time": 2440420.0,
      "end_time": 2445349.0,
      "text": "Python&#39;s Unicode treatment has been like a little uneven and particular in Python 3 it"
    },
    {
      "index": 474,
      "start_time": 2445350.0,
      "end_time": 2449991.0,
      "text": "changed a little bit, it got better. So for here I just want you to realize like, yeah,"
    },
    {
      "index": 475,
      "start_time": 2449990.0,
      "end_time": 2454930.0,
      "text": "these are not Python strings. These are not Unicode strings but--and in the handout talks"
    },
    {
      "index": 476,
      "start_time": 2454930.0,
      "end_time": 2459670.0,
      "text": "about there&#39;s a slightly difference route by which you create Unicode string. But once"
    },
    {
      "index": 477,
      "start_time": 2459670.0,
      "end_time": 2464240.0,
      "text": "you&#39;ve got a Unicode string then all the things I showed you still work. The square brackets,"
    },
    {
      "index": 478,
      "start_time": 2464240.0,
      "end_time": 2468880.0,
      "text": "the &quot;len&quot;, the &quot;.lower,&quot; all that kind of stuff, it&#39;s the same interface is just you"
    },
    {
      "index": 479,
      "start_time": 2468880.0,
      "end_time": 2472910.0,
      "text": "created or so in a different way. And so, I will--but for our purposes this will work."
    },
    {
      "index": 480,
      "start_time": 2472910.0,
      "end_time": 2477819.0,
      "text": "These strings essentially are just serious and bites, it&#39;s just a (buck) of bites. All"
    },
    {
      "index": 481,
      "start_time": 2477820.0,
      "end_time": 2483171.0,
      "text": "right. So that&#39;s almost--I&#39;m going to show there. So, I want to, I want to show you this"
    },
    {
      "index": 482,
      "start_time": 2483170.0,
      "end_time": 2489069.0,
      "text": "one--how are we do on time? Oh, excellent. I want to show this last string feature and"
    },
    {
      "index": 483,
      "start_time": 2489070.0,
      "end_time": 2496901.0,
      "text": "I want to block out time for our first exercise. So, in order to show you this, I&#39;m going to"
    },
    {
      "index": 484,
      "start_time": 2496900.0,
      "end_time": 2505700.0,
      "text": "go to the py quick basics document. I want to--very high tech here. I&#39;m going to attempt"
    },
    {
      "index": 485,
      "start_time": 2505700.0,
      "end_time": 2510430.0,
      "text": "to--here we go. It&#39;s just possible. I&#39;m going to try and show the interpreter in a little"
    },
    {
      "index": 486,
      "start_time": 2510430.0,
      "end_time": 2518760.0,
      "text": "bit of art that I put in there to end up. Okay, oh, perfect. All right. So here, I&#39;ll"
    },
    {
      "index": 487,
      "start_time": 2518760.0,
      "end_time": 2525140.0,
      "text": "say, &quot;a = hello,&quot; so I&#39;ve got the same string. So, in that little piece of art, all I&#39;ve"
    },
    {
      "index": 488,
      "start_time": 2525140.0,
      "end_time": 2530750.0,
      "text": "done is I&#39;ve drawn in the index numbers, so like all the languages in Python, the things"
    },
    {
      "index": 489,
      "start_time": 2530750.0,
      "end_time": 2535210.0,
      "text": "are--if I want a number and when your sequence of things, they are numbered from zero, starting"
    },
    {
      "index": 490,
      "start_time": 2535210.0,
      "end_time": 2542020.0,
      "text": "at the left. So, if I&#39;d say--if I refer to &quot;a [0]&quot; that&#39;s the &quot;h&quot;--this is how I should"
    },
    {
      "index": 491,
      "start_time": 2542020.0,
      "end_time": 2547500.0,
      "text": "have done it for or &quot;a [1]&quot; that&#39;s the &quot;e.&quot; Or if I say, &quot;What&#39;s the len of this thing?&quot;"
    },
    {
      "index": 492,
      "start_time": 2547500.0,
      "end_time": 2555619.0,
      "text": "that&#39;s &quot;5,&quot; so that just sort of conventional indexing into something. Now Python has a"
    },
    {
      "index": 493,
      "start_time": 2555620.0,
      "end_time": 2562491.0,
      "text": "syntax for referring to not just a single element in a string like this but a kind of"
    },
    {
      "index": 494,
      "start_time": 2562490.0,
      "end_time": 2570780.0,
      "text": "subpart of it, and this syntax is gonna use the colon. So the way this is going to work"
    },
    {
      "index": 495,
      "start_time": 2570780.0,
      "end_time": 2574560.0,
      "text": "is if I say &quot;a&quot; and I&#39;ll put the square bracket but I&#39;m going to put a colon in the middle"
    },
    {
      "index": 496,
      "start_time": 2574560.0,
      "end_time": 2579619.0,
      "text": "here, and I&#39;m going to refer--I&#39;m going to indicate both the start and the end. So, for"
    },
    {
      "index": 497,
      "start_time": 2579620.0,
      "end_time": 2584840.0,
      "text": "example, if I&#39;d say, &quot;What, what?&quot; I want you to start at one; so that&#39;s the first index"
    },
    {
      "index": 498,
      "start_time": 2584840.0,
      "end_time": 2590570.0,
      "text": "number and then the second number--yeah, it&#39;s going to say, it&#39;s going to go up to but not"
    },
    {
      "index": 499,
      "start_time": 2590570.0,
      "end_time": 2598471.0,
      "text": "including that one. In Python, this is called a slice. So if I&#39;d say &quot;a [1:3]&quot; that&#39;s the"
    },
    {
      "index": 500,
      "start_time": 2598470.0,
      "end_time": 2605790.0,
      "text": "subpart of the string starting at the one and going up to but not including the three."
    },
    {
      "index": 501,
      "start_time": 2605790.0,
      "end_time": 2611619.0,
      "text": "This is called--it&#39;s only entitled called the slice. There&#39;s a--the word Pythonic is"
    },
    {
      "index": 502,
      "start_time": 2611620.0,
      "end_time": 2617771.0,
      "text": "not a word I just made up, it&#39;s a real one, in the nerdoroty (ph), and this is a very"
    },
    {
      "index": 503,
      "start_time": 2617770.0,
      "end_time": 2624589.0,
      "text": "Pythonic feature. Python likes having syntaxes which are sort of very short but crisp but"
    },
    {
      "index": 504,
      "start_time": 2624590.0,
      "end_time": 2629221.0,
      "text": "then again you know it express something that a common thing that you might want to do."
    },
    {
      "index": 505,
      "start_time": 2629220.0,
      "end_time": 2638329.0,
      "text": "So, if I wanted to--if I wanted to say, &quot;Hello,&quot; I guess, I could say, what is it, a one--oops,"
    },
    {
      "index": 506,
      "start_time": 2638330.0,
      "end_time": 2645291.0,
      "text": "&quot;a [1:5].&quot; That&#39;s a little weird. The five is kind of one out of bounds there but, actually,"
    },
    {
      "index": 507,
      "start_time": 2645290.0,
      "end_time": 2652319.0,
      "text": "what you could do in the slice syntax is if you omit the second, the thing after the colon,"
    },
    {
      "index": 508,
      "start_time": 2652320.0,
      "end_time": 2657921.0,
      "text": "it just goes all the way through the end of the string. And, if you omit the first one,"
    },
    {
      "index": 509,
      "start_time": 2657920.0,
      "end_time": 2662579.0,
      "text": "it starts at the beginning. So actually it is a truism that if I&#39;d just say square bracket,"
    },
    {
      "index": 510,
      "start_time": 2662580.0,
      "end_time": 2667830.0,
      "text": "colon square bracket, well, I just get the whole of whatever it was. So this is a very"
    },
    {
      "index": 511,
      "start_time": 2667830.0,
      "end_time": 2673850.0,
      "text": "heavy syntax. For say, for example, if I want to, you know, remove the first level--level--letter."
    },
    {
      "index": 512,
      "start_time": 2673850.0,
      "end_time": 2678891.0,
      "text": "I could just say one colon (ph) so like instead of starting at zero, start at one and then"
    },
    {
      "index": 513,
      "start_time": 2678890.0,
      "end_time": 2686619.0,
      "text": "just go through the end. So that&#39;s, so far that&#39;s like pretty neat. But now, just a little"
    },
    {
      "index": 514,
      "start_time": 2686620.0,
      "end_time": 2695221.0,
      "text": "bit of scrolling, I&#39;d show you the slightly other crazy thing it does. So, thus far, I&#39;ve"
    },
    {
      "index": 515,
      "start_time": 2695220.0,
      "end_time": 2704910.0,
      "text": "just used the positive numbers, but in Python, they also added a second set of numbers that"
    },
    {
      "index": 516,
      "start_time": 2704910.0,
      "end_time": 2708540.0,
      "text": "also index into the strings. So it&#39;s just using the negative numbers and the negative"
    },
    {
      "index": 517,
      "start_time": 2708540.0,
      "end_time": 2714800.0,
      "text": "numbers instead of starting at the left, they start at the right. So minus one refers to"
    },
    {
      "index": 518,
      "start_time": 2714800.0,
      "end_time": 2719589.0,
      "text": "the rightmost character and minus two refers to the next one and the minus three and so"
    },
    {
      "index": 519,
      "start_time": 2719590.0,
      "end_time": 2724051.0,
      "text": "on. You can think of essentially as there&#39;s an implicit len there that--the minus one"
    },
    {
      "index": 520,
      "start_time": 2724050.0,
      "end_time": 2729180.0,
      "text": "essentially saying len minus one, right. So len in this case is five. Len minus one is"
    },
    {
      "index": 521,
      "start_time": 2729180.0,
      "end_time": 2735480.0,
      "text": "four. I&#39;ll check it out for you. So do you have written a code in a zero based system"
    },
    {
      "index": 522,
      "start_time": 2735480.0,
      "end_time": 2738589.0,
      "text": "but it means that referring to things that happen to be at the left is very convenient"
    },
    {
      "index": 523,
      "start_time": 2738590.0,
      "end_time": 2741401.0,
      "text": "because like zero, one, two, you always know where you are. But then referring to things"
    },
    {
      "index": 524,
      "start_time": 2741400.0,
      "end_time": 2745579.0,
      "text": "at the right is like a pain because you always have to add len and subtract something. So"
    },
    {
      "index": 525,
      "start_time": 2745580.0,
      "end_time": 2750171.0,
      "text": "the negative numbers scheme just also makes it convenient to refer to things on the right"
    },
    {
      "index": 526,
      "start_time": 2750170.0,
      "end_time": 2759930.0,
      "text": "hand side, and they work in slices too. So, for example, how about I say that I want to"
    },
    {
      "index": 527,
      "start_time": 2759930.0,
      "end_time": 2765760.0,
      "text": "omit--first, I&#39;ll just do my earlier example. So I could say what is it? &quot;[-4:-2]&quot;--oops."
    },
    {
      "index": 528,
      "start_time": 2765760.0,
      "end_time": 2776829.0,
      "text": "I&#39;ll put the &quot;a&quot; there. That&#39;s exactly equivalent to the one where earlier it was a one colon"
    },
    {
      "index": 529,
      "start_time": 2776830.0,
      "end_time": 2782100.0,
      "text": "three, right. The minus four is just another way of saying that. I&#39;m going to get a more"
    },
    {
      "index": 530,
      "start_time": 2782100.0,
      "end_time": 2787761.0,
      "text": "realistic example. Say for example, I wanted to omit the last three characters of the string."
    },
    {
      "index": 531,
      "start_time": 2787760.0,
      "end_time": 2792589.0,
      "text": "I didn&#39;t know how long it was. I could just write that as colon minus three. All right,"
    },
    {
      "index": 532,
      "start_time": 2792590.0,
      "end_time": 2797661.0,
      "text": "that it&#39;s going to go up to but not included. I know minus three is the third in. So like"
    },
    {
      "index": 533,
      "start_time": 2797660.0,
      "end_time": 2802550.0,
      "text": "I could &quot;he&quot; or I could do a getaway. What if I only want the last three characters of"
    },
    {
      "index": 534,
      "start_time": 2802550.0,
      "end_time": 2810530.0,
      "text": "a string? I guess right that is minus three colon. So, it just--I think, syntactically,"
    },
    {
      "index": 535,
      "start_time": 2810530.0,
      "end_time": 2814970.0,
      "text": "this is maybe it looks a little bit weird but I found--the slice syntax, I find it--it&#39;s"
    },
    {
      "index": 536,
      "start_time": 2814970.0,
      "end_time": 2820270.0,
      "text": "just useful in a lot of situations. So I would encourage you to go ahead and actually learn"
    },
    {
      "index": 537,
      "start_time": 2820270.0,
      "end_time": 2825660.0,
      "text": "this one and we&#39;re going to have all these exercises and stuff in a little bit. Certainly,"
    },
    {
      "index": 538,
      "start_time": 2825660.0,
      "end_time": 2831430.0,
      "text": "I have hidden inside of their little opportunities for you to end up going to use the slice syntax."
    },
    {
      "index": 539,
      "start_time": 2831430.0,
      "end_time": 2838700.0,
      "text": "So that is a nice one to get the stuff going. Okay, so that actually concludes the first"
    },
    {
      "index": 540,
      "start_time": 2838700.0,
      "end_time": 2847750.0,
      "text": "lecture section. So what I would like you to do is pull up the exercises and so if you"
    },
    {
      "index": 541,
      "start_time": 2847750.0,
      "end_time": 2857790.0,
      "text": "go to the py quick page--just do it here--it points to this page, py quick exercises, here"
    },
    {
      "index": 542,
      "start_time": 2857790.0,
      "end_time": 2863300.0,
      "text": "you go. And then that explains how you copy and I--if you could raise your hand, I&#39;m happy"
    },
    {
      "index": 543,
      "start_time": 2863300.0,
      "end_time": 2869270.0,
      "text": "to kind of walk on. How you can copy--this is--said directory, direct, directories. It&#39;s"
    },
    {
      "index": 544,
      "start_time": 2869270.0,
      "end_time": 2873220.0,
      "text": "going to look like this and let me--now, let me show what I want you to do. So inside here,"
    },
    {
      "index": 545,
      "start_time": 2873220.0,
      "end_time": 2878220.0,
      "text": "there&#39;s like day one, day two, and some other stuff. Today, we&#39;re doing day one. So go in"
    },
    {
      "index": 546,
      "start_time": 2878220.0,
      "end_time": 2885710.0,
      "text": "the day one directory, and the first thing I want you to look at is there&#39;s this, there&#39;s"
    },
    {
      "index": 547,
      "start_time": 2885710.0,
      "end_time": 2890770.0,
      "text": "a file there called--oops, no, not that one. There&#39;s a file there called &quot;string1.py&quot; and"
    },
    {
      "index": 548,
      "start_time": 2890770.0,
      "end_time": 2900660.0,
      "text": "I&#39;m just going to look inside of there. A so what this thing has--is in the comments--sorry,"
    },
    {
      "index": 549,
      "start_time": 2900660.0,
      "end_time": 2905920.0,
      "text": "I&#39;ll make this a little bigger. There are some little exercises in here that just use"
    },
    {
      "index": 550,
      "start_time": 2905920.0,
      "end_time": 2910240.0,
      "text": "the stuff in lecture that we&#39;ve done so far. So, for example, here&#39;s, you know, exercise"
    },
    {
      "index": 551,
      "start_time": 2910240.0,
      "end_time": 2915130.0,
      "text": "&quot;A: Dr. Evil&quot; and just in English, there&#39;s a little description of like what it is I"
    },
    {
      "index": 552,
      "start_time": 2915130.0,
      "end_time": 2920710.0,
      "text": "want you to do and it gives a little example but then the code it just not done. And so"
    },
    {
      "index": 553,
      "start_time": 2920710.0,
      "end_time": 2925650.0,
      "text": "your job is fill in the code there to actually compute what it&#39;s suppose to compute; there&#39;s"
    },
    {
      "index": 554,
      "start_time": 2925650.0,
      "end_time": 2932349.0,
      "text": "a few of these things. And then at the bottom, I have filled in little bits of test code."
    },
    {
      "index": 555,
      "start_time": 2932350.0,
      "end_time": 2934600.0,
      "text": "And so you see that you don&#39;t have to touch that, that&#39;s already done. They&#39;re just going"
    },
    {
      "index": 556,
      "start_time": 2934600.0,
      "end_time": 2936671.0,
      "text": "to call the functions above and just kind of check that they were trying the right thing."
    },
    {
      "index": 557,
      "start_time": 2936670.0,
      "end_time": 2944200.0,
      "text": "So it&#39;s kind of a primitive form of unit testing. So if I run this thing right now, what it"
    },
    {
      "index": 558,
      "start_time": 2944200.0,
      "end_time": 2949660.0,
      "text": "does is they all fail, because yeah, there is no code and so what&#39;s gonna happen is as"
    },
    {
      "index": 559,
      "start_time": 2949660.0,
      "end_time": 2954020.0,
      "text": "you fill those bits of function in then somebody&#39;s pass--this discussion start passing. You can"
    },
    {
      "index": 560,
      "start_time": 2954020.0,
      "end_time": 2958750.0,
      "text": "just run it each time to just very quickly just get feedback about how it&#39;s going. So"
    },
    {
      "index": 561,
      "start_time": 2958750.0,
      "end_time": 2966760.0,
      "text": "that is string one, I&#39;d like everyone to do string one. If you are just so fast, you get"
    },
    {
      "index": 562,
      "start_time": 2966760.0,
      "end_time": 2973059.0,
      "text": "a little bored, there&#39;s also a string two. In string two, it just contains more. And"
    },
    {
      "index": 563,
      "start_time": 2973060.0,
      "end_time": 2975070.0,
      "text": "so, optionally, if we you have more time to kill, I&#39;d be happy for you to go ahead and"
    },
    {
      "index": 564,
      "start_time": 2975070.0,
      "end_time": 2981860.0,
      "text": "do that. The last thing I need to point out here--let&#39;s see, I&#39;ll just look at string"
    },
    {
      "index": 565,
      "start_time": 2981860.0,
      "end_time": 2992041.0,
      "text": "one here. There&#39;s a thing I mentioned earlier that I never explained. This &quot;-tt&quot; flag. What"
    },
    {
      "index": 566,
      "start_time": 2992040.0,
      "end_time": 2998770.0,
      "text": "that refers to is in a Python file, what I would recommend is you just always indent"
    },
    {
      "index": 567,
      "start_time": 2998770.0,
      "end_time": 3003079.0,
      "text": "with spaces and that that is the Google standard, just always indent with spaces and you&#39;re"
    },
    {
      "index": 568,
      "start_time": 3003080.0,
      "end_time": 3006971.0,
      "text": "okay. But, in your editor, maybe by habit or whatever you might accidentally hit the"
    },
    {
      "index": 569,
      "start_time": 3006970.0,
      "end_time": 3011780.0,
      "text": "tab key, and if you have a Python file that has a mixture where it uses and spaces in"
    },
    {
      "index": 570,
      "start_time": 3011780.0,
      "end_time": 3018200.0,
      "text": "some places, in tabs and other places that is deeply confusing, because visually where"
    },
    {
      "index": 571,
      "start_time": 3018200.0,
      "end_time": 3023900.0,
      "text": "the codes appears to vertically appears to a line may not correspond to how it really"
    },
    {
      "index": 572,
      "start_time": 3023900.0,
      "end_time": 3027900.0,
      "text": "aligns as far as Python is concerned. So what the &quot;-tt&quot; flag does is if it ever finds a"
    },
    {
      "index": 573,
      "start_time": 3027900.0,
      "end_time": 3032930.0,
      "text": "mixture of spaces and tabs, it just immediately halts, which is for--when you&#39;re on your first"
    },
    {
      "index": 574,
      "start_time": 3032930.0,
      "end_time": 3036309.0,
      "text": "day of Python programming that&#39;s absolutely what you want. So this will help you find"
    },
    {
      "index": 575,
      "start_time": 3036310.0,
      "end_time": 3039810.0,
      "text": "the case where you want to do is the [INDISTINCT] I&#39;ve talked about. You want to set your editor"
    },
    {
      "index": 576,
      "start_time": 3039810.0,
      "end_time": 3045350.0,
      "text": "so that if you ever hit the tab key, it understands to just put in spaces. So put the &quot;-tt&quot; flag"
    },
    {
      "index": 577,
      "start_time": 3045350.0,
      "end_time": 3050991.0,
      "text": "will protect you if, if you end up with--make a mistake with that. Oh, all right so here&#39;s"
    },
    {
      "index": 578,
      "start_time": 3050990.0,
      "end_time": 3056740.0,
      "text": "what I&#39;d like to do, it&#39;s now, it&#39;s about 10:50, so I&#39;m going to imagine; I want you"
    },
    {
      "index": 579,
      "start_time": 3056740.0,
      "end_time": 3061520.0,
      "text": "to work on this with me maybe about half hour for that, so that&#39;s--what I&#39;d like you to"
    },
    {
      "index": 580,
      "start_time": 3061520.0,
      "end_time": 3072270.0,
      "text": "do is then go have lunch. So what I&#39;d like you to do is be back in here--I&#39;ll have do"
    },
    {
      "index": 581,
      "start_time": 3072270.0,
      "end_time": 3077970.0,
      "text": "all the math here. Back in here at 1:15 and so I&#39;m going to leave you some time for doing"
    },
    {
      "index": 582,
      "start_time": 3077970.0,
      "end_time": 3081770.0,
      "text": "Python coding and then some time for having for having lunch. You, it allows you to bounce"
    },
    {
      "index": 583,
      "start_time": 3081770.0,
      "end_time": 3084980.0,
      "text": "something and of course, you know, I&#39;m in here to answer questions or whatever during"
    },
    {
      "index": 584,
      "start_time": 3084980.0,
      "end_time": 3094980.0,
      "text": "that whole time. All right. So, so please go ahead and get started with that."
    }
  ]
}