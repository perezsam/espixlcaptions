{
  "video_id": "p54Hd7AmVFU",
  "title": "Category Theory 1.2: What is a category?",
  "es": 0,
  "json": [
    {
      "index": 1,
      "start_time": 6130.0,
      "end_time": 21880.0,
      "text": "So that was the philosophical part of my talk, and I will be slowly moving towards more practical"
    },
    {
      "index": 2,
      "start_time": 21880.0,
      "end_time": 28480.0,
      "text": "I mean, practically in the sense of mathematical stuff not so much philosophy"
    },
    {
      "index": 3,
      "start_time": 28480.0,
      "end_time": 38019.0,
      "text": "But from all this talk about how our brains work"
    },
    {
      "index": 4,
      "start_time": 38019.0,
      "end_time": 49149.0,
      "text": "The important part is that we want to be able to – the major tools in our"
    },
    {
      "index": 5,
      "start_time": 49149.0,
      "end_time": 75990.0,
      "text": "Arsenal, right, are: Abstraction, Composition, and i'm going to add one more thing to this, Identity"
    },
    {
      "index": 6,
      "start_time": 75990.0,
      "end_time": 84390.0,
      "text": "So as I said \"abstraction\" means we want to get rid of the details we want to"
    },
    {
      "index": 7,
      "start_time": 84390.0,
      "end_time": 91470.0,
      "text": "like forget about the assembly language or machine language of what we are"
    },
    {
      "index": 8,
      "start_time": 91470.0,
      "end_time": 100110.0,
      "text": "doing and that's not only in programming it's also in mathematics or physics we"
    },
    {
      "index": 9,
      "start_time": 100110.0,
      "end_time": 104159.0,
      "text": "want to get rid of unnecessary details"
    },
    {
      "index": 10,
      "start_time": 104159.0,
      "end_time": 113459.0,
      "text": "ok so once we get rid of unnecessary details then suddenly what happens is"
    },
    {
      "index": 11,
      "start_time": 113459.0,
      "end_time": 119490.0,
      "text": "that things that were different, but they were different because of unnecessary"
    },
    {
      "index": 12,
      "start_time": 119490.0,
      "end_time": 127470.0,
      "text": "details, they suddenly become identical. Like if you have let's say two"
    },
    {
      "index": 13,
      "start_time": 127470.0,
      "end_time": 135239.0,
      "text": "billiard balls of the same colour, they are not really identical if"
    },
    {
      "index": 14,
      "start_time": 135239.0,
      "end_time": 140040.0,
      "text": "you look under the microscope, they have different maybe scratches maybe they"
    },
    {
      "index": 15,
      "start_time": 140040.0,
      "end_time": 146940.0,
      "text": "have different configuration of atoms, right but you can replace one"
    },
    {
      "index": 16,
      "start_time": 146940.0,
      "end_time": 149910.0,
      "text": "with another when you're playing billiards"
    },
    {
      "index": 17,
      "start_time": 149910.0,
      "end_time": 158700.0,
      "text": "So once you abstract, things that used to be different now become"
    },
    {
      "index": 18,
      "start_time": 158700.0,
      "end_time": 163769.0,
      "text": "identical. this is why we have this notion of identity and this notion of"
    },
    {
      "index": 19,
      "start_time": 163769.0,
      "end_time": 169709.0,
      "text": "identity because of abstraction is always nontrivial. So there are"
    },
    {
      "index": 20,
      "start_time": 169709.0,
      "end_time": 174810.0,
      "text": "things that are strictly identical, so like you can replace one with another"
    },
    {
      "index": 21,
      "start_time": 174810.0,
      "end_time": 180780.0,
      "text": "and you won't notice any difference but then there are things that are identical"
    },
    {
      "index": 22,
      "start_time": 180780.0,
      "end_time": 184410.0,
      "text": "for all intents and purposes"
    },
    {
      "index": 23,
      "start_time": 184410.0,
      "end_time": 187010.0,
      "text": "ok and in mathematics is"
    },
    {
      "index": 24,
      "start_time": 187010.0,
      "end_time": 193040.0,
      "text": "this is like a very very important thing, that there is this distinction between"
    },
    {
      "index": 25,
      "start_time": 193040.0,
      "end_time": 200689.0,
      "text": "\"it's really the same\" or \"it's not really the same, but we will look at it"
    },
    {
      "index": 26,
      "start_time": 200689.0,
      "end_time": 210089.0,
      "text": "as if it were the same\". And there is even a whole foundation theory that's being now developed"
    },
    {
      "index": 27,
      "start_time": 210089.0,
      "end_time": 215090.0,
      "text": "that's based on distinguishing between what's identical and what's not identical"
    },
    {
      "index": 28,
      "start_time": 215090.0,
      "end_time": 220609.0,
      "text": "it's called Homotopy Type Theory, it's a very hot topic right now in mathematics"
    },
    {
      "index": 29,
      "start_time": 220609.0,
      "end_time": 226700.0,
      "text": "that just tries to solve this, just this one problem of what things, what are things"
    },
    {
      "index": 30,
      "start_time": 226700.0,
      "end_time": 234290.0,
      "text": "that are equal and what are things that are almost equal, or as they say \"isomorphic\""
    },
    {
      "index": 31,
      "start_time": 234290.0,
      "end_time": 247700.0,
      "text": "is isomorphism and equality the same thing? Or not? Should it be treated the same way or not?"
    },
    {
      "index": 32,
      "start_time": 247700.0,
      "end_time": 260460.0,
      "text": "So composition and identity, these two things, they just define category theory"
    },
    {
      "index": 33,
      "start_time": 260459.99999999997,
      "end_time": 268900.0,
      "text": "This is all there is in category theory, it just encompasses composition and identity"
    },
    {
      "index": 34,
      "start_time": 268900.0,
      "end_time": 279450.0,
      "text": "So you are now ready for the first definition: the definition of category. ok and"
    },
    {
      "index": 35,
      "start_time": 279450.0,
      "end_time": 286830.0,
      "text": "I wish I could define category – what a category is very precisely but I can't"
    },
    {
      "index": 36,
      "start_time": 286830.0,
      "end_time": 293460.0,
      "text": "Ok so I will be using terms like a bunch"
    },
    {
      "index": 37,
      "start_time": 293460.0,
      "end_time": 297870.0,
      "text": "Ok, a category is a bunch of objects"
    },
    {
      "index": 38,
      "start_time": 297870.0,
      "end_time": 305880.0,
      "text": "and like, you would want me to say it's a set of objects, right? Because a set"
    },
    {
      "index": 39,
      "start_time": 305880.0,
      "end_time": 314580.0,
      "text": "has a precise mathematical meaning, right? But it's not! Okay so you have categories"
    },
    {
      "index": 40,
      "start_time": 314580.0,
      "end_time": 323040.0,
      "text": "that have sets of objects and it's fine, but not all categories have sets of objects."
    },
    {
      "index": 41,
      "start_time": 323040.0,
      "end_time": 329080.0,
      "text": "It turns out that there are things that are bigger than sets."
    },
    {
      "index": 42,
      "start_time": 329080.0,
      "end_time": 332789.0,
      "text": "and you might think like \"What can be bigger than a set?\" I mean what's a set?"
    },
    {
      "index": 43,
      "start_time": 332789.0,
      "end_time": 338629.0,
      "text": "A set is something that has a bunch of elements, right?"
    },
    {
      "index": 44,
      "start_time": 338629.0,
      "end_time": 345889.0,
      "text": "A set is defined by membership. \"Is this element a member of the set or not?\""
    },
    {
      "index": 45,
      "start_time": 345889.0,
      "end_time": 354030.0,
      "text": "But then you know, you can build sets with sets, you can say \"I have a set of sets"
    },
    {
      "index": 46,
      "start_time": 354030.0,
      "end_time": 361410.0,
      "text": "that are two elements sets\" and \"I have a set of all sets that are of this"
    },
    {
      "index": 47,
      "start_time": 361410.0,
      "end_time": 368100.0,
      "text": "particular shape\" right, so elements of a set can also be sets, right? It's like, from"
    },
    {
      "index": 48,
      "start_time": 368100.0,
      "end_time": 373169.0,
      "text": "a set theorist's point of view everything is a set right? They have a set-hammer"
    },
    {
      "index": 49,
      "start_time": 373169.0,
      "end_time": 376070.0,
      "text": "and everything is a set-nail."
    },
    {
      "index": 50,
      "start_time": 376070.0,
      "end_time": 384950.0,
      "text": "So sets are built from sets and so on and and then you can say \"So how do i"
    },
    {
      "index": 51,
      "start_time": 384950.0,
      "end_time": 391880.0,
      "text": "define a set? Ok I will specify what kind of elements it has.\" right, so I can"
    },
    {
      "index": 52,
      "start_time": 391880.0,
      "end_time": 397640.0,
      "text": "say okay \"I have a set of sets\", and there are some sets that are members of"
    },
    {
      "index": 53,
      "start_time": 397640.0,
      "end_time": 404540.0,
      "text": "themselves and there are some sets that are not, like a set of dogs is not a dog,"
    },
    {
      "index": 54,
      "start_time": 404540.0,
      "end_time": 418860.0,
      "text": "so that's one. Well let's think of an example of a set that is a member of itself"
    },
    {
      "index": 55,
      "start_time": 418860.0,
      "end_time": 420430.0,
      "text": "Yeah?"
    },
    {
      "index": 56,
      "start_time": 420430.0,
      "end_time": 430150.0,
      "text": "A set that only contains itself. Okay yeah. So now if you can define a set"
    },
    {
      "index": 57,
      "start_time": 430150.0,
      "end_time": 440770.0,
      "text": "that – so you can also define a set of sets that are not members of itself"
    },
    {
      "index": 58,
      "start_time": 440770.0,
      "end_time": 449740.0,
      "text": "and then you can ask \"is this set a member of itself, or not?\""
    },
    {
      "index": 59,
      "start_time": 449740.0,
      "end_time": 454780.0,
      "text": "And if it is a member of itself then should not belong to the set"
    },
    {
      "index": 60,
      "start_time": 454780.0,
      "end_time": 460960.0,
      "text": "and if it's not, then it should belong. It's like, you know, the Barber's Paradox"
    },
    {
      "index": 61,
      "start_time": 460960.0,
      "end_time": 465010.0,
      "text": "if he shaves himself then he should not shave himself he doesn't shave himself-"
    },
    {
      "index": 62,
      "start_time": 465010.0,
      "end_time": 473830.0,
      "text": "so you get into these paradoxes in set theory, right? So if I say a"
    },
    {
      "index": 63,
      "start_time": 473830.0,
      "end_time": 481630.0,
      "text": "category is a set of objects, then I immediately get into this problem and in"
    },
    {
      "index": 64,
      "start_time": 481630.0,
      "end_time": 487960.0,
      "text": "particular you cannot define a set of all sets for some other reason, right?"
    },
    {
      "index": 65,
      "start_time": 487960.0,
      "end_time": 493810.0,
      "text": "Because it's too big, it's like a power set, it would have to contain all its subsets as"
    },
    {
      "index": 66,
      "start_time": 493810.0,
      "end_time": 500320.0,
      "text": "well so it's a set that contains all sets including its subsets and so on and so forth"
    },
    {
      "index": 67,
      "start_time": 500320.0,
      "end_time": 504100.0,
      "text": "these are the mind-blowing things that set theorists are thinking about"
    },
    {
      "index": 68,
      "start_time": 504100.0,
      "end_time": 514510.0,
      "text": "and they cannot sleep at night. So category theorists say \"let's not to worry about this\""
    },
    {
      "index": 69,
      "start_time": 514510.0,
      "end_time": 518940.0,
      "text": "well, they do worry about it but they have ways of doing this."
    },
    {
      "index": 70,
      "start_time": 518940.00000000006,
      "end_time": 523900.00000000006,
      "text": "So I will say it's a bunch of objects, ok?"
    },
    {
      "index": 71,
      "start_time": 523900.0,
      "end_time": 536540.0,
      "text": "So a category consists of objects"
    },
    {
      "index": 72,
      "start_time": 536540.0,
      "end_time": 543720.0,
      "text": "without specifying further whether they form a set or a bunch or a class – sometimes it's called a class"
    },
    {
      "index": 73,
      "start_time": 543720.0,
      "end_time": 548840.0,
      "text": "which is like less precise than a set."
    },
    {
      "index": 74,
      "start_time": 548840.0,
      "end_time": 558740.0,
      "text": "And these objects I will just draw as dots."
    },
    {
      "index": 75,
      "start_time": 558740.0,
      "end_time": 571680.0,
      "text": "And these arrows are called morphisms. I'll sometimes be saying \"morphisms\" sometimes I'll be saying \"arrows\""
    },
    {
      "index": 76,
      "start_time": 571680.0,
      "end_time": 576420.0,
      "text": "So a morphism or an arrow is something that goes between two objects"
    },
    {
      "index": 77,
      "start_time": 576420.0,
      "end_time": 581360.0,
      "text": "So you have an object a, then you have an object b,"
    },
    {
      "index": 78,
      "start_time": 581360.0,
      "end_time": 588380.0,
      "text": "then you have an arrow between them and you call it f"
    },
    {
      "index": 79,
      "start_time": 588380.0,
      "end_time": 595440.0,
      "text": "And now you might want to ask \"but what's an object?\""
    },
    {
      "index": 80,
      "start_time": 595440.0,
      "end_time": 599790.0,
      "text": "And I can't tell you!"
    },
    {
      "index": 81,
      "start_time": 599790.0,
      "end_time": 610920.0,
      "text": "An object is a primitive in this theory, it has no properties it has no"
    },
    {
      "index": 82,
      "start_time": 610920.0,
      "end_time": 618420.0,
      "text": "structure, internal structure, it's nothing. It's like the atom, it's a"
    },
    {
      "index": 83,
      "start_time": 618420.0,
      "end_time": 623180.0,
      "text": "point, it has no properties"
    },
    {
      "index": 84,
      "start_time": 623180.0,
      "end_time": 634230.0,
      "text": "Ok, what's a morphism? Well a morphism is also a primitive. It has no properties"
    },
    {
      "index": 85,
      "start_time": 634230.0,
      "end_time": 638640.0,
      "text": "well except that every arrow has a beginning and an end"
    },
    {
      "index": 86,
      "start_time": 638640.0,
      "end_time": 642180.0,
      "text": "ok so that's an important thing"
    },
    {
      "index": 87,
      "start_time": 642180.0,
      "end_time": 652490.0,
      "text": "so in fact the reason for having objects is so that you can mark the ends of arrows"
    },
    {
      "index": 88,
      "start_time": 652490.0,
      "end_time": 661530.0,
      "text": "They don't serve any other purpose as just being names for the ends of arrows."
    },
    {
      "index": 89,
      "start_time": 661530.0,
      "end_time": 668510.0,
      "text": "We're identifying the ends of arrows"
    },
    {
      "index": 90,
      "start_time": 668510.0,
      "end_time": 675320.0,
      "text": "and notice that this is really funny that we are using"
    },
    {
      "index": 91,
      "start_time": 675320.0,
      "end_time": 679460.0,
      "text": "arrows here, it's like going back to what I talked about the primitive"
    },
    {
      "index": 92,
      "start_time": 679460.0,
      "end_time": 690380.0,
      "text": "human beings hunting mammoths with bows and arrows, right? This is really"
    },
    {
      "index": 93,
      "start_time": 690380.0,
      "end_time": 698930.0,
      "text": "a very interesting thing that we perceive the universe through these"
    },
    {
      "index": 94,
      "start_time": 698930.0,
      "end_time": 705860.0,
      "text": "notions that were developed by hunter-gatherers, right?"
    },
    {
      "index": 95,
      "start_time": 705860.0,
      "end_time": 719040.0,
      "text": "They described the world in terms of spatial relationships, right?"
    },
    {
      "index": 96,
      "start_time": 719040.0,
      "end_time": 721520.0,
      "text": "So like, when I'm talking about category theory and when"
    },
    {
      "index": 97,
      "start_time": 721520.0,
      "end_time": 728450.0,
      "text": "mathematicians talk about it, they will put things in space. Maybe with their"
    },
    {
      "index": 98,
      "start_time": 728450.0,
      "end_time": 734180.0,
      "text": "hands – manipulate it – so we know how to manipulate things, right? We know how to"
    },
    {
      "index": 99,
      "start_time": 734180.0,
      "end_time": 739070.0,
      "text": "position things in space. We talk about spatial relationships: something is"
    },
    {
      "index": 100,
      "start_time": 739070.0,
      "end_time": 744980.0,
      "text": "above, something is below. Higher level of abstraction, lower level of abstraction"
    },
    {
      "index": 101,
      "start_time": 744980.0,
      "end_time": 751460.0,
      "text": "these are all spatial relationships, right?"
    },
    {
      "index": 102,
      "start_time": 751460.0,
      "end_time": 757460.0,
      "text": "Hunter-gatherers also understand movement. It comes from here, it goes here."
    },
    {
      "index": 103,
      "start_time": 757460.0,
      "end_time": 763940.0,
      "text": "This is movement this is an arrow from A to B, right? It has this little thing"
    },
    {
      "index": 104,
      "start_time": 763940.0,
      "end_time": 775840.0,
      "text": "here with barbs, so when you when you hit the animal it can't just pull it"
    },
    {
      "index": 105,
      "start_time": 775840.0,
      "end_time": 783050.0,
      "text": "And of course we have social language we are"
    },
    {
      "index": 106,
      "start_time": 783050.0,
      "end_time": 789920.0,
      "text": "hunter-gatherers, we're social animals so they talk about you know"
    },
    {
      "index": 107,
      "start_time": 789920.0,
      "end_time": 796579.0,
      "text": "relationships between things in terms of this guy points at this guy and"
    },
    {
      "index": 108,
      "start_time": 796579.0,
      "end_time": 802519.0,
      "text": "and by movement going from this place to that place through this"
    },
    {
      "index": 109,
      "start_time": 802519.0,
      "end_time": 807259.0,
      "text": "place and so on. So we'll be using this language all the time and I want you to"
    },
    {
      "index": 110,
      "start_time": 807259.0,
      "end_time": 817309.0,
      "text": "like realize what kind of language we are using and how it actually constrains us"
    },
    {
      "index": 111,
      "start_time": 817309.0,
      "end_time": 825259.0,
      "text": "Ok? But anyway, we have objects and objects we draw in some kind of spatial"
    },
    {
      "index": 112,
      "start_time": 825259.0,
      "end_time": 829790.0,
      "text": "relationship usually, because we are using the spatial part of our brain, we have"
    },
    {
      "index": 113,
      "start_time": 829790.0,
      "end_time": 845560.0,
      "text": "morphisms which are arrows so they suggest movement and relationship."
    },
    {
      "index": 114,
      "start_time": 845560.0,
      "end_time": 855300.0,
      "text": "So, what kind of things can happen? I mean we can have, let's say,"
    },
    {
      "index": 115,
      "start_time": 855300.0,
      "end_time": 863830.0,
      "text": "multiple arrows going between objects so we could have object A and B, you can have zero or"
    },
    {
      "index": 116,
      "start_time": 863830.0,
      "end_time": 870700.0,
      "text": "more arrows going between them. So every time you define the category you specify"
    },
    {
      "index": 117,
      "start_time": 870700.0,
      "end_time": 876910.0,
      "text": "\"what are the objects of this category?\" and for each pair of"
    },
    {
      "index": 118,
      "start_time": 876910.0,
      "end_time": 883180.0,
      "text": "objects you specify the arrows that go between these objects."
    },
    {
      "index": 119,
      "start_time": 883180.0,
      "end_time": 888560.0,
      "text": "Some objects are not connected with arrows, other objects are connected with one arrow,"
    },
    {
      "index": 120,
      "start_time": 888560.0,
      "end_time": 892030.0,
      "text": "other objects are connected with infinitely many arrows,"
    },
    {
      "index": 121,
      "start_time": 892030.0,
      "end_time": 898180.0,
      "text": "it could be an uncountable number of arrows going between two objects"
    },
    {
      "index": 122,
      "start_time": 898180.0,
      "end_time": 903850.0,
      "text": "So, like, if you have an idea that the category is sort of like a graph that's"
    },
    {
      "index": 123,
      "start_time": 903850.0,
      "end_time": 912130.0,
      "text": "a good idea, right, except that you have to be open-minded about what the graph is"
    },
    {
      "index": 124,
      "start_time": 912130.0,
      "end_time": 918730.0,
      "text": "it might have infinitely many nodes and can have infinitely many arrows between"
    },
    {
      "index": 125,
      "start_time": 918730.0,
      "end_time": 925230.0,
      "text": "between two nodes or you have zero or, you know."
    },
    {
      "index": 126,
      "start_time": 925230.0,
      "end_time": 929830.0,
      "text": "But you have to expand your mind around this"
    },
    {
      "index": 127,
      "start_time": 929830.0,
      "end_time": 937870.0,
      "text": "And of course you can have arrows going from B to A as well, and you can have"
    },
    {
      "index": 128,
      "start_time": 937870.0,
      "end_time": 944170.0,
      "text": "arrows going from B back to B, or from A back to A, or you can have multiple arrows"
    },
    {
      "index": 129,
      "start_time": 944170.0,
      "end_time": 949930.0,
      "text": "going from A to A, and so on. So all these are possibilities – sometimes people"
    },
    {
      "index": 130,
      "start_time": 949930.0,
      "end_time": 955960.0,
      "text": "get stuck and I get questions like \"How is it possible that you can"
    },
    {
      "index": 131,
      "start_time": 955960.0,
      "end_time": 960430.0,
      "text": "have more than one arrow? Aren't they all the same?\" no, they are different you"
    },
    {
      "index": 132,
      "start_time": 960430.0,
      "end_time": 966040.0,
      "text": "know? You can have infinitely many or an uncountable number of arrows going from"
    },
    {
      "index": 133,
      "start_time": 966040.0,
      "end_time": 972790.0,
      "text": "A back to A, it's okay, you just give them different names"
    },
    {
      "index": 134,
      "start_time": 972790.0,
      "end_time": 982330.0,
      "text": "This is f, this is g, this is h. So this is what a category is ."
    },
    {
      "index": 135,
      "start_time": 982330.0,
      "end_time": 992890.0,
      "text": "Now that's not all, because that just tells us about what are the elements of a category."
    },
    {
      "index": 136,
      "start_time": 992890.0,
      "end_time": 997210.0,
      "text": "We haven't talked about these two."
    },
    {
      "index": 137,
      "start_time": 997210.0,
      "end_time": 1003280.0,
      "text": "So composition is the property,"
    },
    {
      "index": 138,
      "start_time": 1003280.0,
      "end_time": 1009410.0,
      "text": "a very simple property that if you have an arrow from A to B, and you have"
    },
    {
      "index": 139,
      "start_time": 1009410.0,
      "end_time": 1015830.0,
      "text": "another arrow from B to C, so we have object A, object B and object C and you"
    },
    {
      "index": 140,
      "start_time": 1015830.0,
      "end_time": 1021680.0,
      "text": "have these two arrows, then there always must exist an arrow that's a"
    },
    {
      "index": 141,
      "start_time": 1021680.0,
      "end_time": 1028699.0,
      "text": "composition of these. So if I call this one f call this one g, I'm using"
    },
    {
      "index": 142,
      "start_time": 1028700.0,
      "end_time": 1034521.0,
      "text": "these names f and g that suggests functions, right? Because at some point this will be"
    },
    {
      "index": 143,
      "start_time": 1034520.0,
      "end_time": 1044000.0,
      "text": "one of our models for a category. So this is called \"g after f\"."
    },
    {
      "index": 144,
      "start_time": 1044000.0,
      "end_time": 1056210.0,
      "text": "\"After\" is this little circle. So this arrow is called \"g after f\". And here we have this idea that"
    },
    {
      "index": 145,
      "start_time": 1056210.0,
      "end_time": 1068150.0,
      "text": "going from A to B using f and going from B to C using g is identical to"
    },
    {
      "index": 146,
      "start_time": 1068150.0,
      "end_time": 1076700.0,
      "text": "going from A to C using this path called g after f. Ok, so this arrow is identical to"
    },
    {
      "index": 147,
      "start_time": 1076700.0,
      "end_time": 1078620.0,
      "text": "the composition of these arrows"
    },
    {
      "index": 148,
      "start_time": 1078620.0,
      "end_time": 1085460.0,
      "text": "ok? It's very important to understand that there might be multiple arrows going"
    },
    {
      "index": 149,
      "start_time": 1085460.0,
      "end_time": 1093710.0,
      "text": "from A to C, right? But this one is a composition of these two and it must exist."
    },
    {
      "index": 150,
      "start_time": 1093710.0,
      "end_time": 1100940.0,
      "text": "So for every composable pair of arrows, composable means the end of one"
    },
    {
      "index": 151,
      "start_time": 1100940.0,
      "end_time": 1105560.0,
      "text": "is the same as the beginning of the other. And here it's important that we"
    },
    {
      "index": 152,
      "start_time": 1105560.0,
      "end_time": 1112910.0,
      "text": "have these objects to identify the ends and the beginnings, right? So the end of"
    },
    {
      "index": 153,
      "start_time": 1112910.0,
      "end_time": 1120050.0,
      "text": "this is B, the beginning of this B, so they are composable. And if they are"
    },
    {
      "index": 154,
      "start_time": 1120050.0,
      "end_time": 1128140.0,
      "text": "composable then there must be a composition, there must be an arrow going from here to here."
    },
    {
      "index": 155,
      "start_time": 1128140.0,
      "end_time": 1135410.0,
      "text": "So this is called composition; check."
    },
    {
      "index": 156,
      "start_time": 1135410.0,
      "end_time": 1143660.0,
      "text": "Now when we are defining a category, the category is defined by giving us"
    },
    {
      "index": 157,
      "start_time": 1143660.0,
      "end_time": 1153860.0,
      "text": "objects, saying what the objects and arrows are, and then defining composition"
    },
    {
      "index": 158,
      "start_time": 1153860.0,
      "end_time": 1160010.0,
      "text": "which is sort of like a multiplication table for arrows. So for every two arrows"
    },
    {
      "index": 159,
      "start_time": 1160010.0,
      "end_time": 1164360.0,
      "text": "you have to define what is their composition. It's a humongous"
    },
    {
      "index": 160,
      "start_time": 1164360.0,
      "end_time": 1170460.0,
      "text": "multi-dimensional multiplication table or infinitely dimensional multiplication table"
    },
    {
      "index": 161,
      "start_time": 1170460.0,
      "end_time": 1174950.0,
      "text": "for every three objects you have to define all possible"
    },
    {
      "index": 162,
      "start_time": 1174950.0,
      "end_time": 1179900.0,
      "text": "combinations in which you you can compose arrows going between these"
    },
    {
      "index": 163,
      "start_time": 1179900.0,
      "end_time": 1181130.0,
      "text": "objects and so on"
    },
    {
      "index": 164,
      "start_time": 1181130.0,
      "end_time": 1188000.0,
      "text": "right? so it's a humongous multiplication table and the whole information about"
    },
    {
      "index": 165,
      "start_time": 1188000.0,
      "end_time": 1192170.0,
      "text": "the category is in this multiplication table"
    },
    {
      "index": 166,
      "start_time": 1192170.0,
      "end_time": 1197690.0,
      "text": "So remember this is the multiplication table for a category, it's"
    },
    {
      "index": 167,
      "start_time": 1197690.0,
      "end_time": 1202630.0,
      "text": "a composition table - how you compose morphisms."
    },
    {
      "index": 168,
      "start_time": 1202630.0,
      "end_time": 1213710.0,
      "text": "And different composition tables will give you different categories"
    },
    {
      "index": 169,
      "start_time": 1213710.0,
      "end_time": 1218600.0,
      "text": "Because since objects don't have structure, since arrows don't have structure"
    },
    {
      "index": 170,
      "start_time": 1218600.0,
      "end_time": 1223549.0,
      "text": "they don't contain any information. But the composition contains the information"
    },
    {
      "index": 171,
      "start_time": 1223550.0,
      "end_time": 1234081.0,
      "text": "and we just want to encode everything, everything, within this composition."
    },
    {
      "index": 172,
      "start_time": 1234080.0,
      "end_time": 1250279.0,
      "text": "Now Identity. For every object – let's call it A – there is an identity arrow"
    },
    {
      "index": 173,
      "start_time": 1250280.0,
      "end_time": 1258441.0,
      "text": "Which we will call \"id\". And sometimes id with a subscript \"a\", meaning this an identity for the object A. So there is this"
    },
    {
      "index": 174,
      "start_time": 1258440.0,
      "end_time": 1264679.0,
      "text": "arrow that we call identity. There's one per object, for every object in a category"
    },
    {
      "index": 175,
      "start_time": 1264680.0,
      "end_time": 1271011.0,
      "text": "there is an identity for this object. Now why am I calling this identity?"
    },
    {
      "index": 176,
      "start_time": 1271010.0,
      "end_time": 1288270.0,
      "text": "Because of composition. So if i have an arrow going from, well let's call it A and let's call it B,"
    },
    {
      "index": 177,
      "start_time": 1288270.0,
      "end_time": 1298010.0,
      "text": "okay, if I compose this arrow f with id_b I get back arrow f. In this"
    },
    {
      "index": 178,
      "start_time": 1298010.0,
      "end_time": 1302809.0,
      "text": "sense this is an identity, right? If you think of this is a multiplication"
    },
    {
      "index": 179,
      "start_time": 1302810.0,
      "end_time": 1312221.0,
      "text": "table, f times id is again f. So this is like a 1 in terms of composition."
    },
    {
      "index": 180,
      "start_time": 1312220.0,
      "end_time": 1332120.0,
      "text": "So I can write it using this notation that id_b after f (so first I go f, then I go id_b) is the same as f."
    },
    {
      "index": 181,
      "start_time": 1332120.0,
      "end_time": 1343570.0,
      "text": "Equal. Ok? This is one morphism, this is another morphism. They are equal, it's the same morphism, ok?"
    },
    {
      "index": 182,
      "start_time": 1343570.0,
      "end_time": 1357330.0,
      "text": "And of course there is this symmetric thing where I have id_a and have some, lets call it g,"
    },
    {
      "index": 183,
      "start_time": 1357330.0,
      "end_time": 1372570.0,
      "text": "from A to B. So if I start with an id (id_a) and follow it with g, I will get g."
    },
    {
      "index": 184,
      "start_time": 1372570.0,
      "end_time": 1379900.0,
      "text": "Ok so these two things, they are not the same, right? I mean this is the left identity,"
    },
    {
      "index": 185,
      "start_time": 1379900.0,
      "end_time": 1386290.0,
      "text": "this is the right identity. Sometimes they are well maybe I shouldn't say that"
    },
    {
      "index": 186,
      "start_time": 1386290.0,
      "end_time": 1391570.0,
      "text": "\"sometimes they're the same\" but its just that you have to have a left identity and you have to have a right identity"
    },
    {
      "index": 187,
      "start_time": 1391570.0,
      "end_time": 1400450.0,
      "text": "So this is one of the axioms of a category, or laws of the category, that in"
    },
    {
      "index": 188,
      "start_time": 1400450.0,
      "end_time": 1406750.0,
      "text": "every category – so if you think of the category as a graph, this graph has to"
    },
    {
      "index": 189,
      "start_time": 1406750.0,
      "end_time": 1411970.0,
      "text": "have some special properties. For instance it has to have an arrow going"
    },
    {
      "index": 190,
      "start_time": 1411970.0,
      "end_time": 1417670.0,
      "text": "back to the object, for every object there has to be this little loop."
    },
    {
      "index": 191,
      "start_time": 1417670.0,
      "end_time": 1421570.0,
      "text": "Ok. Must!"
    },
    {
      "index": 192,
      "start_time": 1421570.0,
      "end_time": 1427210.0,
      "text": "So that's one law, or actually two laws, left identity, right-identity."
    },
    {
      "index": 193,
      "start_time": 1427210.0,
      "end_time": 1435370.0,
      "text": "And there is a third law, and that's associativity. So if you have three objects"
    },
    {
      "index": 194,
      "start_time": 1435370.0,
      "end_time": 1439270.0,
      "text": "(well here you have three arrows). Lets have three arrows."
    },
    {
      "index": 195,
      "start_time": 1439270.0,
      "end_time": 1451810.0,
      "text": "Ok so we have object A, an arrow f to object B, then an arrow g to object C. You can"
    },
    {
      "index": 196,
      "start_time": 1451810.0,
      "end_time": 1466750.0,
      "text": "combine these to have g after f. but if you have another one going to D, then you"
    },
    {
      "index": 197,
      "start_time": 1466750.0,
      "end_time": 1477340.0,
      "text": "can combine these. We have three arrows (f g h), three arrows can"
    },
    {
      "index": 198,
      "start_time": 1477340.0,
      "end_time": 1483580.0,
      "text": "be composed in two different ways. So this one composition,"
    },
    {
      "index": 199,
      "start_time": 1483580.0,
      "end_time": 1495410.0,
      "text": "I could compose f with g first (g after f), and then I compose this with h. So I have h after g after f."
    },
    {
      "index": 200,
      "start_time": 1495410.0,
      "end_time": 1508970.0,
      "text": "Ok? Now I can also compose g with h first. Right, so I'll have h after g."
    },
    {
      "index": 201,
      "start_time": 1508970.0,
      "end_time": 1525160.0,
      "text": "Ok, now I can compose this arrow with this arrow, right, and i will get h after g after f"
    },
    {
      "index": 202,
      "start_time": 1525160.0,
      "end_time": 1531410.0,
      "text": "Ok? The difference between these two is where I put the parentheses"
    },
    {
      "index": 203,
      "start_time": 1531410.0,
      "end_time": 1537980.0,
      "text": "Now if I had to remember where to put parentheses every time I draw a diagram"
    },
    {
      "index": 204,
      "start_time": 1537980.0,
      "end_time": 1548480.0,
      "text": "it would become extremely complex and probably my brain would just give up"
    },
    {
      "index": 205,
      "start_time": 1548480.0,
      "end_time": 1551270.0,
      "text": "okay"
    },
    {
      "index": 206,
      "start_time": 1551270.0,
      "end_time": 1559100.0,
      "text": "therefore the axiom of the category is that this and this is the same"
    },
    {
      "index": 207,
      "start_time": 1559100.0,
      "end_time": 1574400.0,
      "text": "So h after g after f must always be equal to h after g after f."
    },
    {
      "index": 208,
      "start_time": 1574400.0,
      "end_time": 1582049.0,
      "text": "So this is called associativity, right? Normal thing. You can associate it this way or this way, you get the same"
    },
    {
      "index": 209,
      "start_time": 1582050.0,
      "end_time": 1590331.0,
      "text": "result and that's extremely important in order to make this manageable for"
    },
    {
      "index": 210,
      "start_time": 1590330.0,
      "end_time": 1598970.0,
      "text": "us humans. Now you might think \"what if we didn't do this, is it possible"
    },
    {
      "index": 211,
      "start_time": 1598970.0,
      "end_time": 1602629.0,
      "text": "still to have a theory in which this is not true?\""
    },
    {
      "index": 212,
      "start_time": 1602630.0,
      "end_time": 1608331.0,
      "text": "Well it is possible and of course there are mathematicians who are working"
    },
    {
      "index": 213,
      "start_time": 1608330.0,
      "end_time": 1615440.0,
      "text": "with stuff that's maybe not completely false, the associativity is not"
    },
    {
      "index": 214,
      "start_time": 1615440.0,
      "end_time": 1623720.0,
      "text": "completely false, but they make associativity weak, meaning that these two ways"
    },
    {
      "index": 215,
      "start_time": 1623720.0,
      "end_time": 1629749.0,
      "text": "of combining things are not really identical but they are isomorphic"
    },
    {
      "index": 216,
      "start_time": 1629750.0,
      "end_time": 1641241.0,
      "text": "Ok, yes. > But what about in the real world, stuff like finite precision arithmetic"
    },
    {
      "index": 217,
      "start_time": 1641240.0,
      "end_time": 1645860.0,
      "text": "> is that the kind of thing you're alluding to? Like, you're multiplying floats and the order in which you"
    },
    {
      "index": 218,
      "start_time": 1645860.0,
      "end_time": 1648950.0,
      "text": "> multiply them, you may end up with a slightly different result."
    },
    {
      "index": 219,
      "start_time": 1648950.0,
      "end_time": 1657080.0,
      "text": "Well then they would not form a category in this sense."
    },
    {
      "index": 220,
      "start_time": 1657080.0,
      "end_time": 1660620.0,
      "text": "The category has to have associativity. Yes?"
    },
    {
      "index": 221,
      "start_time": 1660620.0,
      "end_time": 1668120.0,
      "text": "> So what do you mean by the two ways of composition are isomorphic?"
    },
    {
      "index": 222,
      "start_time": 1668120.0,
      "end_time": 1683760.0,
      "text": "It means that there is a transformation that turns this into this, that is not an identity."
    },
    {
      "index": 223,
      "start_time": 1683760.0,
      "end_time": 1695100.0,
      "text": "So morphisms can also, ok so this is a separate thing, you can have identity between morphisms"
    },
    {
      "index": 224,
      "start_time": 1695100.0,
      "end_time": 1704160.0,
      "text": "that's not identity, it's weak identity, right? Here i'm assuming – well okay"
    },
    {
      "index": 225,
      "start_time": 1704160.0,
      "end_time": 1713610.0,
      "text": "disclosure right now okay – I said objects don't form a set in general if they form"
    },
    {
      "index": 226,
      "start_time": 1713610.0,
      "end_time": 1720990.0,
      "text": "a set then a category is called small – if they can form a set."
    },
    {
      "index": 227,
      "start_time": 1720990.0,
      "end_time": 1728310.0,
      "text": "If they don't form a set it's a large category. And morphisms on the other"
    },
    {
      "index": 228,
      "start_time": 1728310.0,
      "end_time": 1738480.0,
      "text": "hand, between any two objects they form a set. So that's okay right? Now is there"
    },
    {
      "index": 229,
      "start_time": 1738480.0,
      "end_time": 1744120.0,
      "text": "a category theory in which they don't form a set? Of course there is."
    },
    {
      "index": 230,
      "start_time": 1744120.0,
      "end_time": 1751670.0,
      "text": "These are the higher-order categories in which arrows don't form sets, they form objects in a category."
    },
    {
      "index": 231,
      "start_time": 1751670.0,
      "end_time": 1758240.0,
      "text": "But we are not going to talk about that."
    },
    {
      "index": 232,
      "start_time": 1758240.0,
      "end_time": 1766420.0,
      "text": "So that's it, that's all, that's the category. That's the definition of category. Yes?"
    },
    {
      "index": 233,
      "start_time": 1766420.0,
      "end_time": 1776940.0,
      "text": "> In terms of definition, when you say that two arrows are isomorphic does that mean they have the same beginning and ending?"
    },
    {
      "index": 234,
      "start_time": 1776940.0,
      "end_time": 1783110.0,
      "text": "What is isomorphic? > Two arrows, would they be isomorphic if they have the same beginning and ending?"
    },
    {
      "index": 235,
      "start_time": 1783110.0,
      "end_time": 1788120.0,
      "text": "No, no they are different"
    },
    {
      "index": 236,
      "start_time": 1788120.0,
      "end_time": 1792509.0,
      "text": "No"
    },
    {
      "index": 237,
      "start_time": 1792510.0,
      "end_time": 1793821.0,
      "text": "Yes?"
    },
    {
      "index": 238,
      "start_time": 1793820.0,
      "end_time": 1802040.0,
      "text": "> Is this so much different from a group?"
    },
    {
      "index": 239,
      "start_time": 1802040.0,
      "end_time": 1812240.0,
      "text": "So the question is \"is that different from a group?\" and it has some"
    },
    {
      "index": 240,
      "start_time": 1812240.0,
      "end_time": 1815660.0,
      "text": "similarities to a group, actually it has similarities to something that's"
    },
    {
      "index": 241,
      "start_time": 1815660.0,
      "end_time": 1825200.0,
      "text": "called a monoid, right. Because a group is a monoid that also has an inverse, right?"
    },
    {
      "index": 242,
      "start_time": 1825200.0,
      "end_time": 1831830.0,
      "text": "So there are two ways in which you can impose further conditions on this"
    },
    {
      "index": 243,
      "start_time": 1831830.0,
      "end_time": 1836780.0,
      "text": "and say \"what if every arrow has an inverse?\" right, you can define an"
    },
    {
      "index": 244,
      "start_time": 1836780.0,
      "end_time": 1844220.0,
      "text": "inverse, say if arrow f and g, if they combine, compose to an identity then one"
    },
    {
      "index": 245,
      "start_time": 1844220.0,
      "end_time": 1850670.0,
      "text": "is the inverse of another. That's the definition of an inverse, right. So if you do this, then you"
    },
    {
      "index": 246,
      "start_time": 1850670.0,
      "end_time": 1855380.0,
      "text": "end up with something that's called a groupoid. A groupoid is a category in which"
    },
    {
      "index": 247,
      "start_time": 1855380.0,
      "end_time": 1863630.0,
      "text": "every arrow has an inverse. It's still not a group, it's more than a group, because a group"
    },
    {
      "index": 248,
      "start_time": 1863630.0,
      "end_time": 1870430.0,
      "text": "is really a category in which there's only one object and arrows between them"
    },
    {
      "index": 249,
      "start_time": 1870430.0,
      "end_time": 1877280.0,
      "text": "we'll be talking about a monoid as a category and in"
    },
    {
      "index": 250,
      "start_time": 1877280.0,
      "end_time": 1882140.0,
      "text": "particular a group. But this is more because now you have you know you have"
    },
    {
      "index": 251,
      "start_time": 1882140.0,
      "end_time": 1887390.0,
      "text": "transformations going between objects so you cannot, in a group you can compose"
    },
    {
      "index": 252,
      "start_time": 1887390.0,
      "end_time": 1893420.0,
      "text": "anything with anything right? Here you can't, they have to be"
    },
    {
      "index": 253,
      "start_time": 1893420.0,
      "end_time": 1897620.0,
      "text": "composable, the end of one has to be the beginning of another right you"
    },
    {
      "index": 254,
      "start_time": 1897620.0,
      "end_time": 1901100.0,
      "text": "cannot compose anything with anything right"
    },
    {
      "index": 255,
      "start_time": 1901100.0,
      "end_time": 1906450.0,
      "text": "that's the biggest distinction"
    },
    {
      "index": 256,
      "start_time": 1906450.0,
      "end_time": 1919500.0,
      "text": "Ok, now."
    },
    {
      "index": 257,
      "start_time": 1919500.0,
      "end_time": 1924390.0,
      "text": "So let me give you an example, ok, and this is the example that we'll be"
    },
    {
      "index": 258,
      "start_time": 1924390.0,
      "end_time": 1933030.0,
      "text": "studying a lot because this is an example from programming, right, we have a"
    },
    {
      "index": 259,
      "start_time": 1933030.0,
      "end_time": 1940470.0,
      "text": "basic useful category that we use in programming and this is the category in which"
    },
    {
      "index": 260,
      "start_time": 1940470.0,
      "end_time": 1951720.0,
      "text": "objects are types and arrows are functions. Right? Like if any single"
    },
    {
      "index": 261,
      "start_time": 1951720.0,
      "end_time": 1962970.0,
      "text": "argument function takes an argument of a type A and returns a result of type B"
    },
    {
      "index": 262,
      "start_time": 1962970.0,
      "end_time": 1973440.0,
      "text": "alright so in that sense, a function is an arrow or a morphism between two types"
    },
    {
      "index": 263,
      "start_time": 1973440.0,
      "end_time": 1982530.0,
      "text": "so that's the category in which this is – actually in Haskell it's almost exactly"
    },
    {
      "index": 264,
      "start_time": 1982530.0,
      "end_time": 1987690.0,
      "text": "– well maybe in ML this is almost exactly the category which you"
    },
    {
      "index": 265,
      "start_time": 1987690.0,
      "end_time": 1997120.0,
      "text": "are working with, right. Types are your objects, functions are your morphisms."
    },
    {
      "index": 266,
      "start_time": 1997120.0,
      "end_time": 2008190.0,
      "text": "In Haskell it's a little bit more complicated because of laziness."
    },
    {
      "index": 267,
      "start_time": 2008190.0,
      "end_time": 2018480.0,
      "text": "Haskell is a lazy language so the trick is that in Haskell every type also"
    },
    {
      "index": 268,
      "start_time": 2018480.0,
      "end_time": 2024480.0,
      "text": "contains this undefined value, the bottom value which means like if you try to"
    },
    {
      "index": 269,
      "start_time": 2024480.0,
      "end_time": 2029010.0,
      "text": "evaluate it you will get into an infinite loop, it will take you forever"
    },
    {
      "index": 270,
      "start_time": 2029010.0,
      "end_time": 2037679.0,
      "text": "because categories don't really take into account time, its like time really is"
    },
    {
      "index": 271,
      "start_time": 2037680.0,
      "end_time": 2045871.0,
      "text": "really hard to describe in mathematics right whereas in computation we worry"
    },
    {
      "index": 272,
      "start_time": 2045870.0,
      "end_time": 2051240.0,
      "text": "about time, right? I mean if something takes too long to calculate that's"
    },
    {
      "index": 273,
      "start_time": 2051239.9999999998,
      "end_time": 2057299.9999999998,
      "text": "useless for us right? And in particular if it takes infinite time to calculate"
    },
    {
      "index": 274,
      "start_time": 2057300.0000000002,
      "end_time": 2064169.0000000002,
      "text": "which means it never terminates, ok, it's a calculation so if you have a function"
    },
    {
      "index": 275,
      "start_time": 2064170.0,
      "end_time": 2071371.0,
      "text": "that goes forever what's the return type for the function? It's a function that's supposed to return"
    },
    {
      "index": 276,
      "start_time": 2071370.0,
      "end_time": 2077730.0,
      "text": "an integer, but it never does because it goes into an infinite loop. So in this case"
    },
    {
      "index": 277,
      "start_time": 2077730.0,
      "end_time": 2083730.0,
      "text": "in Haskell you say it returns an Int type but Int type contains this special"
    },
    {
      "index": 278,
      "start_time": 2083730.0,
      "end_time": 2091800.0,
      "text": "value called bottom which means it never terminates. And that's the digression"
    },
    {
      "index": 279,
      "start_time": 2091800.0000000002,
      "end_time": 2097920.0,
      "text": "I'll make once and maybe from time to time I will say \"well of course except for"
    },
    {
      "index": 280,
      "start_time": 2097920.0,
      "end_time": 2102630.0,
      "text": "bottoms and we are ignoring bottoms or we are ignoring never-ending"
    },
    {
      "index": 281,
      "start_time": 2102630.0,
      "end_time": 2108450.0,
      "text": "calculations and so on\" right so there's a lot of caveats"
    },
    {
      "index": 282,
      "start_time": 2108450.0,
      "end_time": 2113280.0,
      "text": "you're in the beginning and I just want to get rid of them and later we can"
    },
    {
      "index": 283,
      "start_time": 2113280.0,
      "end_time": 2129510.0,
      "text": "think of them in simpler terms. But of course you might ask but \"what are types?\""
    },
    {
      "index": 284,
      "start_time": 2129510.0,
      "end_time": 2139200.0,
      "text": "Types in a programming language what are they?"
    },
    {
      "index": 285,
      "start_time": 2139200.0,
      "end_time": 2146530.0,
      "text": "Sets of values ok. So there is a model, a kind of simplistic model maybe"
    },
    {
      "index": 286,
      "start_time": 2146530.0,
      "end_time": 2151930.0,
      "text": "this works in ML it won't work in Haskell because of the bottoms right"
    },
    {
      "index": 287,
      "start_time": 2151930.0,
      "end_time": 2157180.0,
      "text": "but the simplest model for types is that data they are just sets. Sets of values"
    },
    {
      "index": 288,
      "start_time": 2157180.0,
      "end_time": 2167230.0,
      "text": "right and so we can model programming as \"in a category of sets\" we can say okay so"
    },
    {
      "index": 289,
      "start_time": 2167230.0,
      "end_time": 2174160.0,
      "text": "instead of types we will be saying sets of values, right? And functions are just"
    },
    {
      "index": 290,
      "start_time": 2174160.0,
      "end_time": 2181390.0,
      "text": "functions between sets, so you can define functions on sets, functions from one set"
    },
    {
      "index": 291,
      "start_time": 2181390.0,
      "end_time": 2186790.0,
      "text": "to another set. And that's a good model too. So sometimes I'll be"
    },
    {
      "index": 292,
      "start_time": 2186790.0,
      "end_time": 2190750.0,
      "text": "talking about sets and functions sometimes i'll be talking about types"
    },
    {
      "index": 293,
      "start_time": 2190750.0,
      "end_time": 2195250.0,
      "text": "and functions. And of course when I say functions"
    },
    {
      "index": 294,
      "start_time": 2195250.0,
      "end_time": 2200770.0,
      "text": "I'm talking about mathematical functions, right? So a mathematical function"
    },
    {
      "index": 295,
      "start_time": 2200770.0,
      "end_time": 2207850.0,
      "text": "is defined between sets so the function is just, you know, you take a value from one"
    },
    {
      "index": 296,
      "start_time": 2207850.0,
      "end_time": 2214740.0,
      "text": "set and it gives you a value from another set"
    },
    {
      "index": 297,
      "start_time": 2214740.0,
      "end_time": 2225240.0,
      "text": "So I can even draw a picture of what I mean by \"function\" with a set"
    },
    {
      "index": 298,
      "start_time": 2225240.0,
      "end_time": 2237990.0,
      "text": "I hope you memorised the definition of a category. It's so simple, it's very elementary."
    },
    {
      "index": 299,
      "start_time": 2237990.0,
      "end_time": 2244960.0,
      "text": "So I can erase this now. So it's like you have one set, you have another set, you have elements of this set,"
    },
    {
      "index": 300,
      "start_time": 2244960.0,
      "end_time": 2251490.0,
      "text": "elements of this set, and a function sort of takes elements of this set"
    },
    {
      "index": 301,
      "start_time": 2251490.0,
      "end_time": 2259950.0,
      "text": "to elements of this set. And again I'm using arrows, but these are different arrows, these aren't morphisms."
    },
    {
      "index": 302,
      "start_time": 2259950.0,
      "end_time": 2265390.0,
      "text": "So one function corresponds to one morphism."
    },
    {
      "index": 303,
      "start_time": 2265390.0,
      "end_time": 2273150.0,
      "text": "But this is another thing that you have to be very careful with, this schizophrenic"
    },
    {
      "index": 304,
      "start_time": 2273150.0,
      "end_time": 2288330.0,
      "text": "view of a category; that every category – well not every category, a lot of categories – come from some model."
    },
    {
      "index": 305,
      "start_time": 2288330.0,
      "end_time": 2298920.0,
      "text": "for instance you take sets, set theory. And you say \"I'm going to represent these"
    },
    {
      "index": 306,
      "start_time": 2298920.0,
      "end_time": 2309800.0,
      "text": "sets as object in my category\" this category by the way is called Set capital."
    },
    {
      "index": 307,
      "start_time": 2309800.0,
      "end_time": 2314779.0,
      "text": "this is the category of sets and functions, right, we'll be using it quite"
    },
    {
      "index": 308,
      "start_time": 2314780.0,
      "end_time": 2324110.0,
      "text": "often. So I'll be talking about the category of sets and the origin of this"
    },
    {
      "index": 309,
      "start_time": 2324110.0,
      "end_time": 2332360.0,
      "text": "category is that I started with sets, right, and I know what sets are: they have"
    },
    {
      "index": 310,
      "start_time": 2332360.0,
      "end_time": 2339020.0,
      "text": "structure, every set has elements and there are functions and functions"
    },
    {
      "index": 311,
      "start_time": 2339020.0,
      "end_time": 2343191.0,
      "text": "in sets, they just the map elements to elements"
    },
    {
      "index": 312,
      "start_time": 2343190.0,
      "end_time": 2347599.0,
      "text": "okay? So I know all this stuff, I'm looking under a microscope and I say I"
    },
    {
      "index": 313,
      "start_time": 2347600.0,
      "end_time": 2352461.0,
      "text": "know it has elements, I know that the function are actually a bunch of"
    },
    {
      "index": 314,
      "start_time": 2352460.0,
      "end_time": 2359150.0,
      "text": "mappings, it's a mapping from one set to another, right? Now when I build a category"
    },
    {
      "index": 315,
      "start_time": 2359150.0,
      "end_time": 2369200.0,
      "text": "on top of this, I have to forget about the structure"
    },
    {
      "index": 316,
      "start_time": 2369200.0,
      "end_time": 2377210.0,
      "text": "I get amnesia and I say \"this is set A what's inside of the set? I have no idea.\""
    },
    {
      "index": 317,
      "start_time": 2377210.0,
      "end_time": 2389690.0,
      "text": "it's an atom, it has no structure, because now I'm putting on my category glasses. No structure."
    },
    {
      "index": 318,
      "start_time": 2389690.0,
      "end_time": 2393110.0,
      "text": "What are the arrows between these sets?"
    },
    {
      "index": 319,
      "start_time": 2393110.0,
      "end_time": 2399290.0,
      "text": "Well, I look at what what kind of sets these are, right, I know elements of the"
    },
    {
      "index": 320,
      "start_time": 2399290.0,
      "end_time": 2405620.0,
      "text": "set I know what kind of functions are possible right so I know how many arrows,"
    },
    {
      "index": 321,
      "start_time": 2405620.0,
      "end_time": 2412010.0,
      "text": "how many functions are from this set to this set and I build my category based"
    },
    {
      "index": 322,
      "start_time": 2412010.0,
      "end_time": 2420110.0,
      "text": "on this. I say, okay this set corresponds to an object A, this set correspond to an"
    },
    {
      "index": 323,
      "start_time": 2420110.0,
      "end_time": 2426830.0,
      "text": "object B and there are 10 arrows between these objects. Fine!"
    },
    {
      "index": 324,
      "start_time": 2426830.0,
      "end_time": 2432500.0,
      "text": "What are these arrows? I don't know! I forgot! I just know there are 10 of them."
    },
    {
      "index": 325,
      "start_time": 2432500.0,
      "end_time": 2442460.0,
      "text": "Ok, and  I call them ABCD or fgh, okay and the next thing is, ok so if I have functions"
    },
    {
      "index": 326,
      "start_time": 2442460.0,
      "end_time": 2447680.0,
      "text": "from this set to this, and I have other functions from this set to this set."
    },
    {
      "index": 327,
      "start_time": 2447680.0,
      "end_time": 2451760.0,
      "text": "Oh! I can compose them, right?"
    },
    {
      "index": 328,
      "start_time": 2451760.0,
      "end_time": 2456590.0,
      "text": "What does it mean to compose functions? Well you apply a function to an argument,"
    },
    {
      "index": 329,
      "start_time": 2456590.0,
      "end_time": 2460940.0,
      "text": "right you get a result you take this result you apply the second function to"
    },
    {
      "index": 330,
      "start_time": 2460940.0,
      "end_time": 2465890.0,
      "text": "this result and you get a third, another result, right? So you combine this"
    },
    {
      "index": 331,
      "start_time": 2465890.0,
      "end_time": 2478980.0,
      "text": "you start at here, you ended up here you get a function that goes..."
    },
    {
      "index": 332,
      "start_time": 2478980.0,
      "end_time": 2483180.0,
      "text": "ok so starting from X here"
    },
    {
      "index": 333,
      "start_time": 2483180.0,
      "end_time": 2489810.0,
      "text": "it produces a Y here and Y goes into Z here and there is a function that"
    },
    {
      "index": 334,
      "start_time": 2489810.0,
      "end_time": 2496710.0,
      "text": "just takes X directly to Z, and that's the composition of these two functions"
    },
    {
      "index": 335,
      "start_time": 2496710.0,
      "end_time": 2506850.0,
      "text": "So I know how to compose functions on sets using this, right? So I use this"
    },
    {
      "index": 336,
      "start_time": 2506850.0,
      "end_time": 2514470.0,
      "text": "information to create my big infinite-dimensional multiplication table"
    },
    {
      "index": 337,
      "start_time": 2514470.0,
      "end_time": 2520650.0,
      "text": "composition table for my category Set. And then I forget!"
    },
    {
      "index": 338,
      "start_time": 2520650.0,
      "end_time": 2527490.0,
      "text": "And of course there is an identity function that just takes an x into x,"
    },
    {
      "index": 339,
      "start_time": 2527490.0,
      "end_time": 2534150.0,
      "text": "there's another x into x, this is an identity function, right? So every set has an"
    },
    {
      "index": 340,
      "start_time": 2534150.0,
      "end_time": 2539580.0,
      "text": "identity function that just doesn't move this set, it just maps the set into itself"
    },
    {
      "index": 341,
      "start_time": 2539580.0,
      "end_time": 2550640.0,
      "text": "by mapping every element to itself. It's like a trivial function, right?"
    },
    {
      "index": 342,
      "start_time": 2550640.0,
      "end_time": 2559180.0,
      "text": "Thats how we do it in Haskell, right? Yes? > But it doesn't have to map every element to itself though, rig ht?"
    },
    {
      "index": 343,
      "start_time": 2559180.0,
      "end_time": 2562660.0,
      "text": "> it just needs to map the set to itself."
    },
    {
      "index": 344,
      "start_time": 2562660.0,
      "end_time": 2567500.0,
      "text": "No, because you can map the set to itself in many different ways, right?"
    },
    {
      "index": 345,
      "start_time": 2567500.0,
      "end_time": 2571300.0,
      "text": "You can interchange elements if you want."
    },
    {
      "index": 346,
      "start_time": 2571300.0,
      "end_time": 2574000.0,
      "text": "that's also a mapping that is a set to itself, right?"
    },
    {
      "index": 347,
      "start_time": 2574000.0,
      "end_time": 2577260.0,
      "text": "> Well, from a categoric point of view"
    },
    {
      "index": 348,
      "start_time": 2577260.0,
      "end_time": 2584410.0,
      "text": "Ok so what we are doing here, we are studying this set and we find out that"
    },
    {
      "index": 349,
      "start_time": 2584410.0,
      "end_time": 2591609.0,
      "text": "there are many functions going from this set to itself, right? One of them is the"
    },
    {
      "index": 350,
      "start_time": 2591610.0,
      "end_time": 2599361.0,
      "text": "identity function, This will become our identity morphism, right?"
    },
    {
      "index": 351,
      "start_time": 2599360.0,
      "end_time": 2605500.0,
      "text": "And, by the way, an identity function, when composed with any other function will give you"
    },
    {
      "index": 352,
      "start_time": 2605500.0,
      "end_time": 2611680.0,
      "text": "back the function, right? So it's a good identity function, I know, from set theory."
    },
    {
      "index": 353,
      "start_time": 2611680.0,
      "end_time": 2618130.0,
      "text": "Ok so I know that I will get, in my multiplication table that I'm building, when"
    },
    {
      "index": 354,
      "start_time": 2618130.0,
      "end_time": 2624460.0,
      "text": "I take this function as my identity morphism, it will be an identity in my"
    },
    {
      "index": 355,
      "start_time": 2624460.0,
      "end_time": 2634059.0,
      "text": "big multiplication table. So I'm abstracting, I'm just slashing information left and"
    },
    {
      "index": 356,
      "start_time": 2634060.0,
      "end_time": 2640781.0,
      "text": "right, I'm forgetting about what's inside the object, what these functions do, and I"
    },
    {
      "index": 357,
      "start_time": 2640780.0,
      "end_time": 2651849.0,
      "text": "end up with this category Set. And in this category Set I have these objects that"
    },
    {
      "index": 358,
      "start_time": 2651850.0,
      "end_time": 2655060.0,
      "text": "now I forgot where they came from,"
    },
    {
      "index": 359,
      "start_time": 2655060.0,
      "end_time": 2659891.0,
      "text": "I have these arrows, I forgot where they came from, but I have the multiplication"
    },
    {
      "index": 360,
      "start_time": 2659890.0,
      "end_time": 2665290.0,
      "text": "table, the composition table for them, right? And this composition"
    },
    {
      "index": 361,
      "start_time": 2665290.0,
      "end_time": 2675610.0,
      "text": "fulfils my axioms of category theory right? I mean this composition is obviously"
    },
    {
      "index": 362,
      "start_time": 2675610.0,
      "end_time": 2682240.0,
      "text": "associative, right? Composition of functions is associative, so I get a good category. I"
    },
    {
      "index": 363,
      "start_time": 2682240.0,
      "end_time": 2686650.0,
      "text": "have identity, I have associativity, I have everything. So I got this huge"
    },
    {
      "index": 364,
      "start_time": 2686650.0,
      "end_time": 2691540.0,
      "text": "multiplication table now I can forget about where it came from, and now i have"
    },
    {
      "index": 365,
      "start_time": 2691540.0,
      "end_time": 2699010.0,
      "text": "the category Set. And in this category Set, I don't care about the"
    },
    {
      "index": 366,
      "start_time": 2699010.0,
      "end_time": 2705130.0,
      "text": "structure of my object or the structure of my functions or my morphisms I forget"
    },
    {
      "index": 367,
      "start_time": 2705130.0,
      "end_time": 2711670.0,
      "text": "that morphisms are really functions, I forgot all this. And now we can start thinking"
    },
    {
      "index": 368,
      "start_time": 2711670.0,
      "end_time": 2717640.0,
      "text": "about, you know, what can I say about these objects just by looking at the"
    },
    {
      "index": 369,
      "start_time": 2717640.0,
      "end_time": 2724030.0,
      "text": "morphisms? And it turns out I can say a lot of things. And then we'll"
    },
    {
      "index": 370,
      "start_time": 2724030.0,
      "end_time": 2729370.0,
      "text": "see later you know how you can identify just by looking at morphisms, how you can"
    },
    {
      "index": 371,
      "start_time": 2729370.0,
      "end_time": 2738460.0,
      "text": "identify \"Oh, this set is actually empty.\" Right? How do you know its empty?"
    },
    {
      "index": 372,
      "start_time": 2738460.0,
      "end_time": 2746410.0,
      "text": "I mean if, if you forgot the information that it has no elements, you only have"
    },
    {
      "index": 373,
      "start_time": 2746410.0,
      "end_time": 2755440.0,
      "text": "morphisms. Well it turns out that an empty set has this property that can be"
    },
    {
      "index": 374,
      "start_time": 2755440.0,
      "end_time": 2762310.0,
      "text": "expressed just in terms of morphisms, nothing else. And I can identify an empty"
    },
    {
      "index": 375,
      "start_time": 2762310.0,
      "end_time": 2769090.0,
      "text": "set, I can identify a single element set using just morphisms, nothing else."
    },
    {
      "index": 376,
      "start_time": 2769090.0,
      "end_time": 2774450.0,
      "text": "It's not easy but it's possible."
    },
    {
      "index": 377,
      "start_time": 2774450.0,
      "end_time": 2781589.0,
      "text": "So the thing is that you can identify a lot of properties of sets just by looking"
    },
    {
      "index": 378,
      "start_time": 2781590.0,
      "end_time": 2786721.0,
      "text": "at the multiplication table, you don't really have to know what's inside these"
    },
    {
      "index": 379,
      "start_time": 2786720.0,
      "end_time": 2795270.0,
      "text": "sets. And that gives you a completely new way of looking at things, a more abstract"
    },
    {
      "index": 380,
      "start_time": 2795270.0,
      "end_time": 2797010.0,
      "text": "way of looking at things."
    },
    {
      "index": 381,
      "start_time": 2797010.0,
      "end_time": 2805710.0,
      "text": "It's like if you think about what's inside a set, you're thinking \"assembly language of sets\""
    },
    {
      "index": 382,
      "start_time": 2805710.0,
      "end_time": 2812160.0,
      "text": "Thinking about elements, how they are mapped you know? That's the assembly language."
    },
    {
      "index": 383,
      "start_time": 2812160.0,
      "end_time": 2818550.0,
      "text": "Category theory gives you this higher-level language in which you don't have to"
    },
    {
      "index": 384,
      "start_time": 2818550.0,
      "end_time": 2825060.0,
      "text": "look inside this set, you just look at how they are connected with arrows. And this"
    },
    {
      "index": 385,
      "start_time": 2825060.0,
      "end_time": 2832710.0,
      "text": "is like the ultimate in data hiding, right? You have an object it's a"
    },
    {
      "index": 386,
      "start_time": 2832710.0,
      "end_time": 2840569.0,
      "text": "it's a data type, its a set, but you cannot look inside of it. It shrunk to a"
    },
    {
      "index": 387,
      "start_time": 2840570.0,
      "end_time": 2849901.0,
      "text": "point. All you have is its interface, its interface is how it connects to other"
    },
    {
      "index": 388,
      "start_time": 2849900.0,
      "end_time": 2855810.0,
      "text": "objects, all these arrows coming out of this object and into this object. They"
    },
    {
      "index": 389,
      "start_time": 2855810.0,
      "end_time": 2864180.0,
      "text": "define the interface. So like, if you take this idea of data hiding and abstraction"
    },
    {
      "index": 390,
      "start_time": 2864180.0,
      "end_time": 2872940.0,
      "text": "this is where it leads you eventually. This is the end of the road for abstraction,"
    },
    {
      "index": 391,
      "start_time": 2872940.0,
      "end_time": 2881250.0,
      "text": "right? This is the end of the road for data hiding. This is it. Like the most"
    },
    {
      "index": 392,
      "start_time": 2881250.0,
      "end_time": 2887020.0,
      "text": "abstract language that we can think of."
    },
    {
      "index": 393,
      "start_time": 2887020.0,
      "end_time": 2897020.0,
      "text": "And we can stop now."
    }
  ]
}