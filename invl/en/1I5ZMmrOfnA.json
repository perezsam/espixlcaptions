{
  "video_id": "1I5ZMmrOfnA",
  "title": "How Computers Calculate - the ALU: Crash Course Computer Science #5",
  "es": 1,
  "json": [
    {
      "index": 1,
      "start_time": 3160.0,
      "end_time": 5860.0,
      "text": "Hi, I’m Carrie Ann and this is Crash Course Computer Science."
    },
    {
      "index": 2,
      "start_time": 5860.0,
      "end_time": 9580.0,
      "text": "So last episode, we talked about how numbers can be represented in binary. Representing"
    },
    {
      "index": 3,
      "start_time": 9580.0,
      "end_time": 13740.0,
      "text": "Like, 00101010 is 42 in decimal."
    },
    {
      "index": 4,
      "start_time": 13740.0,
      "end_time": 19200.0,
      "text": "Representing  and storing numbers is an important function of a computer, but the real goal is computation,"
    },
    {
      "index": 5,
      "start_time": 19200.0,
      "end_time": 23480.0,
      "text": "or manipulating numbers in a structured and purposeful way, like adding two numbers together."
    },
    {
      "index": 6,
      "start_time": 23480.0,
      "end_time": 27060.0,
      "text": "These operations are handled by a computer’s Arithmetic and Logic Unit,"
    },
    {
      "index": 7,
      "start_time": 27060.0,
      "end_time": 29720.0,
      "text": "but most people call it by its street name: the ALU."
    },
    {
      "index": 8,
      "start_time": 29720.0,
      "end_time": 32660.0,
      "text": "The ALU is the mathematical brain of a computer."
    },
    {
      "index": 9,
      "start_time": 32659.999999999996,
      "end_time": 36460.0,
      "text": "When you understand an ALU’s design and function, you’ll understand a fundamental"
    },
    {
      "index": 10,
      "start_time": 36460.0,
      "end_time": 41860.0,
      "text": "part of modern computers. It is THE thing that does all of the computation in a computer,"
    },
    {
      "index": 11,
      "start_time": 41860.0,
      "end_time": 43860.0,
      "text": "so basically everything uses it."
    },
    {
      "index": 12,
      "start_time": 43860.0,
      "end_time": 45620.0,
      "text": "First though, look at this beauty."
    },
    {
      "index": 13,
      "start_time": 45620.0,
      "end_time": 50900.0,
      "text": "This is perhaps the most famous ALU ever, the Intel 74181."
    },
    {
      "index": 14,
      "start_time": 50900.0,
      "end_time": 52860.0,
      "text": "When it was released in 1970, it was"
    },
    {
      "index": 15,
      "start_time": 52860.0,
      "end_time": 57580.0,
      "text": "It was the first complete ALU that fit entirely inside of a single chip -"
    },
    {
      "index": 16,
      "start_time": 57580.0,
      "end_time": 59840.0,
      "text": "Which was a huge engineering feat at the time."
    },
    {
      "index": 17,
      "start_time": 59840.0,
      "end_time": 63340.0,
      "text": "So today we’re going to take those Boolean logic gates we learned about last week"
    },
    {
      "index": 18,
      "start_time": 63340.0,
      "end_time": 68540.0,
      "text": "to build a simple ALU circuit with much of the same functionality as the 74181."
    },
    {
      "index": 19,
      "start_time": 68540.0,
      "end_time": 70500.0,
      "text": "And over the next few episodes we’ll use"
    },
    {
      "index": 20,
      "start_time": 70500.0,
      "end_time": 74160.0,
      "text": "this to construct a computer from scratch. So it’s going to get a little bit complicated,"
    },
    {
      "index": 21,
      "start_time": 74160.0,
      "end_time": 76060.0,
      "text": "but I think you guys can handle it."
    },
    {
      "index": 22,
      "start_time": 76060.0,
      "end_time": 85300.0,
      "text": "INTRO"
    },
    {
      "index": 23,
      "start_time": 85300.0,
      "end_time": 90280.0,
      "text": "An ALU is really two units in one -- there’s an arithmetic unit and a logic unit."
    },
    {
      "index": 24,
      "start_time": 90280.0,
      "end_time": 94840.0,
      "text": "Let's start with the arithmetic unit, which is responsible for handling all numerical operations in a"
    },
    {
      "index": 25,
      "start_time": 94840.0,
      "end_time": 99560.0,
      "text": "computer, like addition and subtraction. It also does a bunch of other simple things like"
    },
    {
      "index": 26,
      "start_time": 99560.0,
      "end_time": 103990.0,
      "text": "add one to a number, which is called an increment operation, but we’ll talk about those later."
    },
    {
      "index": 27,
      "start_time": 103990.0,
      "end_time": 107980.0,
      "text": "Today, we’re going to focus on the pièce de résistance, the crème de la crème of"
    },
    {
      "index": 28,
      "start_time": 107980.0,
      "end_time": 112480.0,
      "text": "operations that underlies almost everything else a computer does - adding two numbers together."
    },
    {
      "index": 29,
      "start_time": 112480.0,
      "end_time": 114220.0,
      "text": "We could build this circuit entirely out of"
    },
    {
      "index": 30,
      "start_time": 114220.0,
      "end_time": 117620.0,
      "text": "individual transistors, but that would get confusing really fast."
    },
    {
      "index": 31,
      "start_time": 117620.0,
      "end_time": 123340.0,
      "text": "So instead as we talked about in Episode 3 – we can use a high-level of abstraction and build our components"
    },
    {
      "index": 32,
      "start_time": 123340.0,
      "end_time": 128140.0,
      "text": "out of logic gates, in this case: AND, OR, NOT and XOR gates."
    },
    {
      "index": 33,
      "start_time": 128139.99999999999,
      "end_time": 132930.0,
      "text": "The simplest adding circuit that we can build takes two binary digits, and adds them together."
    },
    {
      "index": 34,
      "start_time": 132930.0,
      "end_time": 138060.0,
      "text": "So we have two inputs, A and B, and one output, which is the sum of those two digits."
    },
    {
      "index": 35,
      "start_time": 138060.0,
      "end_time": 141860.0,
      "text": "Just to clarify: A, B and the output are all single bits."
    },
    {
      "index": 36,
      "start_time": 141860.0,
      "end_time": 144520.0,
      "text": "There are only four possible input combinations."
    },
    {
      "index": 37,
      "start_time": 144520.0,
      "end_time": 147400.0,
      "text": "The first three are: 0+0 = 0"
    },
    {
      "index": 38,
      "start_time": 147400.0,
      "end_time": 150900.0,
      "text": "1+0 = 1 0+1 = 1"
    },
    {
      "index": 39,
      "start_time": 150900.0,
      "end_time": 155420.0,
      "text": "Remember that in binary, 1 is the same as true, and 0 is the same as false."
    },
    {
      "index": 40,
      "start_time": 155420.0,
      "end_time": 159720.0,
      "text": "So this set of inputs exactly matches the boolean logic of an XOR gate, and we can use it as"
    },
    {
      "index": 41,
      "start_time": 159720.0,
      "end_time": 160720.0,
      "text": "our 1-bit adder."
    },
    {
      "index": 42,
      "start_time": 160720.0,
      "end_time": 166300.0,
      "text": "But the fourth input combination, 1 + 1, is a special case. 1 + 1 is 2 (obviously)"
    },
    {
      "index": 43,
      "start_time": 166300.0,
      "end_time": 170180.0,
      "text": "but there’s no 2 digit in binary, so as we talked about last episode, the result is"
    },
    {
      "index": 44,
      "start_time": 170180.0,
      "end_time": 174930.0,
      "text": "0 and the 1 is carried to the next column. So the sum is really 10 in binary."
    },
    {
      "index": 45,
      "start_time": 174930.0,
      "end_time": 180280.0,
      "text": "Now, the output of our XOR gate is partially correct - 1 plus 1, outputs 0."
    },
    {
      "index": 46,
      "start_time": 180280.0,
      "end_time": 183040.0,
      "text": "But, we need an extra output wire for that carry bit."
    },
    {
      "index": 47,
      "start_time": 183040.0,
      "end_time": 186980.0,
      "text": "The carry bit is only “true” when the inputs are 1 AND 1, because that's the only"
    },
    {
      "index": 48,
      "start_time": 186980.0,
      "end_time": 190690.0,
      "text": "time when the result (two) is bigger than 1 bit can store… and conveniently we have"
    },
    {
      "index": 49,
      "start_time": 190690.0,
      "end_time": 195100.0,
      "text": "a gate for that! An AND gate, which is only true when both inputs are true, so"
    },
    {
      "index": 50,
      "start_time": 195100.0,
      "end_time": 197220.0,
      "text": "we’ll add that to our circuit too."
    },
    {
      "index": 51,
      "start_time": 197220.0,
      "end_time": 199980.0,
      "text": "And that's it. This circuit is called a half adder. It’s"
    },
    {
      "index": 52,
      "start_time": 199980.0,
      "end_time": 204040.0,
      "text": "It's not that complicated - just two logic gates - but let’s abstract away even this level"
    },
    {
      "index": 53,
      "start_time": 204040.0,
      "end_time": 208260.0,
      "text": "of detail and encapsulate our newly minted half adder as its own component, with two"
    },
    {
      "index": 54,
      "start_time": 208260.0,
      "end_time": 212780.0,
      "text": "inputs - bits A and B - and two outputs, the sum and the carry bits."
    },
    {
      "index": 55,
      "start_time": 212780.0,
      "end_time": 216860.0,
      "text": "This takes us to another level of abstraction… heh… I feel like I say that a lot."
    },
    {
      "index": 56,
      "start_time": 216860.0,
      "end_time": 223880.0,
      "text": "I wonder if this is going to become a thing."
    },
    {
      "index": 57,
      "start_time": 223880.0,
      "end_time": 226480.0,
      "text": "Anyway, If you want to add more than 1 + 1"
    },
    {
      "index": 58,
      "start_time": 226480.0,
      "end_time": 230760.0,
      "text": "we’re going to need a “Full Adder.” That half-adder left us with a carry bit as output."
    },
    {
      "index": 59,
      "start_time": 230760.0,
      "end_time": 234250.0,
      "text": "That means that when we move on to the next column in a multi-column addition,"
    },
    {
      "index": 60,
      "start_time": 234250.0,
      "end_time": 239000.0,
      "text": "and every column after that, we are going to have to add three bits together, no two."
    },
    {
      "index": 61,
      "start_time": 239000.0,
      "end_time": 240980.0,
      "text": "A full adder is a bit more complicated - it"
    },
    {
      "index": 62,
      "start_time": 240980.0,
      "end_time": 247040.0,
      "text": "takes three bits as inputs: A, B and C. So the maximum possible input is 1 + 1 + 1,"
    },
    {
      "index": 63,
      "start_time": 247040.0,
      "end_time": 252080.0,
      "text": "which equals 1 carry out 1, so we still only need two output wires: sum and carry."
    },
    {
      "index": 64,
      "start_time": 252080.0,
      "end_time": 257440.0,
      "text": "We can build a full adder using half adders. To do this, we use a half adder to add A plus B"
    },
    {
      "index": 65,
      "start_time": 257440.0,
      "end_time": 262670.0,
      "text": "just like before – but then feed that result and input C into a second half adder."
    },
    {
      "index": 66,
      "start_time": 262670.0,
      "end_time": 267070.0,
      "text": "Lastly, we need a OR gate to check if either one of the carry bits was true."
    },
    {
      "index": 67,
      "start_time": 267070.0,
      "end_time": 271630.0,
      "text": "That’s it, we just made a full adder! Again,we can go up a level of abstraction and wrap"
    },
    {
      "index": 68,
      "start_time": 271630.0,
      "end_time": 276460.0,
      "text": "up this full adder as its own component. It takes three inputs, adds them, and outputs"
    },
    {
      "index": 69,
      "start_time": 276460.0,
      "end_time": 278040.0,
      "text": "the sum and the carry, if there is one."
    },
    {
      "index": 70,
      "start_time": 278040.0,
      "end_time": 282140.0,
      "text": "Armed with our new components, we can now build a circuit that takes two, 8-bit numbers"
    },
    {
      "index": 71,
      "start_time": 282140.0,
      "end_time": 284340.0,
      "text": "– Let’s call them A and B – and adds them together."
    },
    {
      "index": 72,
      "start_time": 284340.0,
      "end_time": 286180.0,
      "text": "Let’s start with the very first bit of"
    },
    {
      "index": 73,
      "start_time": 286180.0,
      "end_time": 291080.0,
      "text": "A and B, which we’ll call A0 and B0. At this point, there is no carry bit to deal"
    },
    {
      "index": 74,
      "start_time": 291080.0,
      "end_time": 295310.0,
      "text": "with, because this is our first addition. So we can use our half adder to add these"
    },
    {
      "index": 75,
      "start_time": 295310.0,
      "end_time": 301100.0,
      "text": "two bits together. The output is sum0. Now we want to add A1 and B1 together."
    },
    {
      "index": 76,
      "start_time": 301100.0,
      "end_time": 306220.0,
      "text": "It's possible there was a carry from the previous addition of A0 and B0, so this time we need"
    },
    {
      "index": 77,
      "start_time": 306220.0,
      "end_time": 311490.0,
      "text": "to use a full adder that also inputs the carry bit. We output this result as sum1."
    },
    {
      "index": 78,
      "start_time": 311490.0,
      "end_time": 316460.0,
      "text": "Then, we take any carry from this full adder, and run it into the next full adder that handles"
    },
    {
      "index": 79,
      "start_time": 316460.0,
      "end_time": 321540.0,
      "text": "A2 and B2. And we just keep doing this in a big chain until all 8 bits have been added."
    },
    {
      "index": 80,
      "start_time": 321540.0,
      "end_time": 326060.0,
      "text": "Notice how the carry bits ripple forward to each subsequent adder. For this reason,"
    },
    {
      "index": 81,
      "start_time": 326060.0,
      "end_time": 332680.0,
      "text": "this is called an 8-bit ripple carry adder. Notice how our last full adder has a carry out."
    },
    {
      "index": 82,
      "start_time": 332680.0,
      "end_time": 336200.0,
      "text": "If there is a carry into the 9th bit, it means the sum of the two numbers is too large to fit into 8-bits."
    },
    {
      "index": 83,
      "start_time": 336200.0,
      "end_time": 337580.0,
      "text": "This is called an overflow."
    },
    {
      "index": 84,
      "start_time": 337580.0,
      "end_time": 343340.0,
      "text": "In general, an overflow occurs when the result of an addition is too large to be represented by the number of bits you are using."
    },
    {
      "index": 85,
      "start_time": 343340.0,
      "end_time": 345770.0,
      "text": "This can usually cause errors and unexpected behavior."
    },
    {
      "index": 86,
      "start_time": 345770.0,
      "end_time": 350200.0,
      "text": "Famously, the original PacMan arcade game used 8 bits to keep track of what level you were on."
    },
    {
      "index": 87,
      "start_time": 350200.0,
      "end_time": 355100.0,
      "text": "This meant that if you made it past level 255 – the largest number storablein 8 bits –"
    },
    {
      "index": 88,
      "start_time": 355100.0,
      "end_time": 358130.0,
      "text": "to level 256, the ALU overflowed."
    },
    {
      "index": 89,
      "start_time": 358130.0,
      "end_time": 361540.0,
      "text": "This caused a bunch of errors and glitches making the level unbeatable."
    },
    {
      "index": 90,
      "start_time": 361540.0,
      "end_time": 364820.0,
      "text": "The bug became a rite of passage for the greatest PacMan players."
    },
    {
      "index": 91,
      "start_time": 364820.0,
      "end_time": 369560.0,
      "text": "So if we want to avoid overflows, we can extend our circuit with more full adders, allowing"
    },
    {
      "index": 92,
      "start_time": 369560.0,
      "end_time": 374980.0,
      "text": "us to add 16 or 32 bit numbers. This makes overflows less likely to happen, but at the"
    },
    {
      "index": 93,
      "start_time": 374980.0,
      "end_time": 379420.0,
      "text": "expense of more gates. An additional downside is that it takes a little bit of time for"
    },
    {
      "index": 94,
      "start_time": 379420.0,
      "end_time": 381400.0,
      "text": "each of the carries to ripple forward."
    },
    {
      "index": 95,
      "start_time": 381400.0,
      "end_time": 386400.0,
      "text": "Admittedly, not very much time, electrons move pretty fast, so we’re talking about billionths of a second,"
    },
    {
      "index": 96,
      "start_time": 386400.0,
      "end_time": 389120.0,
      "text": "but that’s enough to make a difference in today’s fast computers."
    },
    {
      "index": 97,
      "start_time": 389120.0,
      "end_time": 395060.0,
      "text": "For this reason, modern computers use a slightly different adding circuit called a ‘carry-look-ahead’ adder"
    },
    {
      "index": 98,
      "start_time": 395060.0,
      "end_time": 399860.0,
      "text": "which is faster, but ultimately does exactly the same thing-- adds binary numbers."
    },
    {
      "index": 99,
      "start_time": 399860.0,
      "end_time": 403600.0,
      "text": "The ALU’s arithmetic unit also has circuits for other math operations"
    },
    {
      "index": 100,
      "start_time": 403600.0,
      "end_time": 406540.0,
      "text": "and in general these 8 operations are always supported."
    },
    {
      "index": 101,
      "start_time": 406540.0,
      "end_time": 410140.0,
      "text": "And like our adder, these other operations are built from individual logic gates."
    },
    {
      "index": 102,
      "start_time": 410140.0,
      "end_time": 414460.0,
      "text": "Interestingly, you may have noticed that there are no multiply and divide operations."
    },
    {
      "index": 103,
      "start_time": 414460.0,
      "end_time": 419680.0,
      "text": "That's because simple ALUs don’t have a circuit for this, and instead just perform a series of additions."
    },
    {
      "index": 104,
      "start_time": 419680.0,
      "end_time": 421880.0,
      "text": "Let’s say you want to multiply 12 by 5."
    },
    {
      "index": 105,
      "start_time": 421880.0,
      "end_time": 426500.0,
      "text": "That’s the same thing as adding 12 to itself 5 times. So it would take 5 passes through"
    },
    {
      "index": 106,
      "start_time": 426500.0,
      "end_time": 430960.0,
      "text": "the ALU to do this one multiplication. And this is how many simple processors,"
    },
    {
      "index": 107,
      "start_time": 430960.0,
      "end_time": 435600.0,
      "text": "like those in your thermostat, TV remote, and microwave, do multiplication."
    },
    {
      "index": 108,
      "start_time": 435600.0,
      "end_time": 437220.0,
      "text": "It’s slow, but it gets the job done."
    },
    {
      "index": 109,
      "start_time": 437220.0,
      "end_time": 440500.0,
      "text": "However, fancier processors, like those in your laptop or smartphone,"
    },
    {
      "index": 110,
      "start_time": 440500.0,
      "end_time": 443600.0,
      "text": "have arithmetic units with dedicated circuits for multiplication."
    },
    {
      "index": 111,
      "start_time": 443600.0,
      "end_time": 447870.0,
      "text": "And as you might expect, the circuit is more complicated than addition -- there’s no"
    },
    {
      "index": 112,
      "start_time": 447870.0,
      "end_time": 451540.0,
      "text": "magic, it just takes a lot more logic gates – which is why less expensive processors"
    },
    {
      "index": 113,
      "start_time": 451540.0,
      "end_time": 452680.0,
      "text": "don’t have this feature."
    },
    {
      "index": 114,
      "start_time": 452680.0,
      "end_time": 456720.0,
      "text": "Ok, let’s move on to the other half of the ALU: the Logic Unit."
    },
    {
      "index": 115,
      "start_time": 456720.0,
      "end_time": 459700.0,
      "text": "Instead of arithmetic operations, the Logic Unit performs… well..."
    },
    {
      "index": 116,
      "start_time": 459700.0,
      "end_time": 464070.0,
      "text": "logical operations, like AND, OR and NOT, which we’ve talked about previously."
    },
    {
      "index": 117,
      "start_time": 464070.0,
      "end_time": 467680.0,
      "text": "It also performs simple numerical tests, like checking if a number is negative."
    },
    {
      "index": 118,
      "start_time": 467680.0,
      "end_time": 471660.0,
      "text": "For example, here’s a circuit that tests if the output of the ALU is zero."
    },
    {
      "index": 119,
      "start_time": 471660.0,
      "end_time": 475380.0,
      "text": "It does this using a bunch of OR gates to see if any of the bits are 1."
    },
    {
      "index": 120,
      "start_time": 475380.0,
      "end_time": 481460.0,
      "text": "Even if one single bit is 1, we know the number can’t be zero and then we use a final NOT gate to flip this"
    },
    {
      "index": 121,
      "start_time": 481460.0,
      "end_time": 485110.0,
      "text": "input so the output is 1 only if the input number is 0."
    },
    {
      "index": 122,
      "start_time": 485110.0,
      "end_time": 489190.0,
      "text": "So that’s a high level overview of what makes up an ALU. We even built several of"
    },
    {
      "index": 123,
      "start_time": 489190.0,
      "end_time": 491620.0,
      "text": "the main components from scratch, like our ripple adder."
    },
    {
      "index": 124,
      "start_time": 491620.0,
      "end_time": 494680.0,
      "text": "As you saw, it’s just a big bunch of logic gates connected in clever ways."
    },
    {
      "index": 125,
      "start_time": 494680.0,
      "end_time": 498740.0,
      "text": "Which brings us back to that ALU you admired so much at the beginning of the episode."
    },
    {
      "index": 126,
      "start_time": 498740.0,
      "end_time": 501220.0,
      "text": "The Intel 74181."
    },
    {
      "index": 127,
      "start_time": 501220.0,
      "end_time": 506780.0,
      "text": "Unlike the 8-bit ALU we made today, the 74181 could only handle 4-bit inputs,"
    },
    {
      "index": 128,
      "start_time": 506780.0,
      "end_time": 509080.0,
      "text": "which means YOU BUILT AN ALU THAT’S LIKE"
    },
    {
      "index": 129,
      "start_time": 509080.0,
      "end_time": 514700.0,
      "text": "TWICE AS GOOD AS THAT SUPER FAMOUS ONE. WITH YOUR MIND! Well.. sort of."
    },
    {
      "index": 130,
      "start_time": 514700.00000000006,
      "end_time": 516820.00000000006,
      "text": "We didn’t build the whole thing… but you get the idea."
    },
    {
      "index": 131,
      "start_time": 516820.00000000006,
      "end_time": 521840.00000000006,
      "text": "The 74181 used about 70 logic gates, and it couldn’t multiply or divide."
    },
    {
      "index": 132,
      "start_time": 521840.00000000006,
      "end_time": 527540.0,
      "text": "But it was a huge step forward in miniaturization, opening the doors to more capable and less expensive computers."
    },
    {
      "index": 133,
      "start_time": 527540.0,
      "end_time": 530360.0,
      "text": "This 4-bit ALU circuit is already a lot to take in,"
    },
    {
      "index": 134,
      "start_time": 530360.0,
      "end_time": 534819.0,
      "text": "but our 8-bit ALU would require hundreds of logic gates to fully build and engineers"
    },
    {
      "index": 135,
      "start_time": 534819.0,
      "end_time": 539129.0,
      "text": "don’t want to see all that complexity when using an ALU, so they came up with a special"
    },
    {
      "index": 136,
      "start_time": 539129.0,
      "end_time": 549440.0,
      "text": "symbol to wrap it all up, which looks like a big ‘V’. Just another level of abstraction!"
    },
    {
      "index": 137,
      "start_time": 549440.0,
      "end_time": 557300.0,
      "text": "Our 8-bit ALU has two inputs, A and B, each with 8 bits. We also need a way to specify what operation the ALU should perform,"
    },
    {
      "index": 138,
      "start_time": 557300.0,
      "end_time": 559700.0,
      "text": "for example, addition or subtraction."
    },
    {
      "index": 139,
      "start_time": 559700.0,
      "end_time": 561880.0,
      "text": "For that, we use a 4-bit operation code."
    },
    {
      "index": 140,
      "start_time": 561880.0,
      "end_time": 567000.0,
      "text": "We’ll talk about this more in a later episode, but in brief, 1000 might be the command"
    },
    {
      "index": 141,
      "start_time": 567000.0,
      "end_time": 573280.0,
      "text": "to add, while 1100 is the command for subtract. Basically, the operation code tells the ALU"
    },
    {
      "index": 142,
      "start_time": 573280.0,
      "end_time": 578600.0,
      "text": "what operation to perform. And the result of that operation on inputs A and B is an 8-bit output."
    },
    {
      "index": 143,
      "start_time": 578600.0,
      "end_time": 583760.0,
      "text": "ALUs also output a series of Flags, which are 1-bit outputs for particular states and statuses."
    },
    {
      "index": 144,
      "start_time": 583760.0,
      "end_time": 590260.0,
      "text": "For example, if we subtract two numbers, and the result is 0, our zero-testing circuit, the one we made earlier,"
    },
    {
      "index": 145,
      "start_time": 590260.0,
      "end_time": 595300.0,
      "text": "sets the Zero Flag to True (1). This is useful if we are trying to determine if two numbers are are equal."
    },
    {
      "index": 146,
      "start_time": 595300.0,
      "end_time": 597740.0,
      "text": "If we wanted to test if A was less than B,"
    },
    {
      "index": 147,
      "start_time": 597740.0,
      "end_time": 603220.0,
      "text": "we can use the ALU to calculate A subtract B and look to see if the Negative Flag was set to true."
    },
    {
      "index": 148,
      "start_time": 603220.0,
      "end_time": 605700.0,
      "text": "If it was, we know that A was smaller than B."
    },
    {
      "index": 149,
      "start_time": 605700.0,
      "end_time": 609620.0,
      "text": "And finally, there’s also a wire attached to the carry out on the adder we built,"
    },
    {
      "index": 150,
      "start_time": 609620.0,
      "end_time": 613980.0,
      "text": "so if there is an overflow, we’ll know about it. This is called the Overflow Flag."
    },
    {
      "index": 151,
      "start_time": 613980.0,
      "end_time": 618840.0,
      "text": "Fancier ALUs will have more flags, but these three flags are universal and frequently used."
    },
    {
      "index": 152,
      "start_time": 618840.0,
      "end_time": 621380.0,
      "text": "In fact, we’ll be using them soon in a future episode."
    },
    {
      "index": 153,
      "start_time": 621380.0,
      "end_time": 625640.0,
      "text": "So now you know how your computer does all its basic mathematical operations digitally"
    },
    {
      "index": 154,
      "start_time": 625640.0,
      "end_time": 627440.0,
      "text": "with no gears or levers required."
    },
    {
      "index": 155,
      "start_time": 627440.0,
      "end_time": 631600.0,
      "text": "We’re going to use this ALU when we construct our CPU two episodes from now."
    },
    {
      "index": 156,
      "start_time": 631600.0,
      "end_time": 641600.0,
      "text": "But before that, our computer is going to need some memory! We'll talk about that next week."
    }
  ]
}