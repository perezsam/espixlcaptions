{
  "video_id": "u2TwK3fED8A",
  "title": "coursera - Design and Analysis of Algorithms I - 1.1 Introduction : Why Study Algorithms ?",
  "es": 0,
  "json": [
    {
      "index": 1,
      "start_time": 560.0,
      "end_time": 3469.0,
      "text": "Welcome to this first course in the design and analysis of algorithms. I mentioned"
    },
    {
      "index": 2,
      "start_time": 3469.0,
      "end_time": 6390.0,
      "text": "many of you are already clear on your reasons for taking this course, but let me"
    },
    {
      "index": 3,
      "start_time": 6390.0,
      "end_time": 9390.0,
      "text": "begin by justifying the course&#39;s existence and giving you several different"
    },
    {
      "index": 4,
      "start_time": 9390.0,
      "end_time": 13250.0,
      "text": "motivations for learning about algorithms. So what is an algorithm? Well, we&#39;re not"
    },
    {
      "index": 5,
      "start_time": 13250.0,
      "end_time": 16730.0,
      "text": "going to be needing a precise definition in this course, but essentially, an"
    },
    {
      "index": 6,
      "start_time": 16730.0,
      "end_time": 20449.0,
      "text": "algorithm is a well defined set of rules. A recipe in effect for solving some kind"
    },
    {
      "index": 7,
      "start_time": 20449.0,
      "end_time": 24310.0,
      "text": "of computational problem. So for example, maybe you&#39;re given a bunch of numbers and"
    },
    {
      "index": 8,
      "start_time": 24310.0,
      "end_time": 27689.0,
      "text": "you want to rearrange them into sorted order. Maybe you&#39;re given a road network"
    },
    {
      "index": 9,
      "start_time": 27689.0,
      "end_time": 30710.0,
      "text": "with an origin and a destination and you want to compute the shortest path from"
    },
    {
      "index": 10,
      "start_time": 30710.0,
      "end_time": 34450.0,
      "text": "point A to point B. Maybe you&#39;re given a bunch of tasks with deadlines and you want"
    },
    {
      "index": 11,
      "start_time": 34450.0,
      "end_time": 38080.0,
      "text": "to know whether or not it&#39;s feasible to accomplish all of those tasks by the"
    },
    {
      "index": 12,
      "start_time": 38080.0,
      "end_time": 43620.0,
      "text": "respective deadlines. So, why study algorithms. Well first of all,"
    },
    {
      "index": 13,
      "start_time": 43620.0,
      "end_time": 46870.0,
      "text": "understanding the field of algorithms and also the related field of data structures,"
    },
    {
      "index": 14,
      "start_time": 46870.0,
      "end_time": 50390.0,
      "text": "is crucial for doing serious work in pretty much any other branch of computer"
    },
    {
      "index": 15,
      "start_time": 50390.0,
      "end_time": 54300.0,
      "text": "science. That&#39;s the precise reason why, here at Stanford University, this is the"
    },
    {
      "index": 16,
      "start_time": 54300.0,
      "end_time": 57610.0,
      "text": "course that&#39;s required for all of the degrees that the computer science"
    },
    {
      "index": 17,
      "start_time": 57610.0,
      "end_time": 62240.0,
      "text": "department grants. Be it at bachelors, a masters, or PHD degree, we insist that you"
    },
    {
      "index": 18,
      "start_time": 62240.0,
      "end_time": 66689.0,
      "text": "have mastery of the field of algorithms. So what are some examples of uses in the"
    },
    {
      "index": 19,
      "start_time": 66689.0,
      "end_time": 70469.0,
      "text": "rest of computer science. Well, if your doing routing in a communication network,"
    },
    {
      "index": 20,
      "start_time": 70469.0,
      "end_time": 74640.0,
      "text": "that piggybacks on classical shortest path algorithms. The effectiveness. The public"
    },
    {
      "index": 21,
      "start_time": 74640.0,
      "end_time": 78799.0,
      "text": "key photography really rests on that, of number theoretic algorithms. In safe"
    },
    {
      "index": 22,
      "start_time": 78799.0,
      "end_time": 82130.0,
      "text": "computer graphics, you need to [inaudible] primitives. They&#39;re supplying those study"
    },
    {
      "index": 23,
      "start_time": 82130.0,
      "end_time": 85840.0,
      "text": "of geometric algorithms. Data base industries rely on balance search"
    },
    {
      "index": 24,
      "start_time": 85840.0,
      "end_time": 90139.0,
      "text": "[inaudible] data structures as covered in this course. [inaudible] Biology using"
    },
    {
      "index": 25,
      "start_time": 90139.0,
      "end_time": 94659.0,
      "text": "dynamic programming algorithms to measure similarity among genomes. And the list"
    },
    {
      "index": 26,
      "start_time": 94659.0,
      "end_time": 100560.0,
      "text": "goes on and on. A second reason to study algorithms is that they play a key role in"
    },
    {
      "index": 27,
      "start_time": 100560.0,
      "end_time": 103639.0,
      "text": "modern technological innovation. Obviously, I could give any number of"
    },
    {
      "index": 28,
      "start_time": 103639.0,
      "end_time": 107319.0,
      "text": "examples here, and let me just state one super obvious one. Which is that search"
    },
    {
      "index": 29,
      "start_time": 107319.0,
      "end_time": 110719.0,
      "text": "engines use a tapestry of algorithms to efficiently compute the relevance of"
    },
    {
      "index": 30,
      "start_time": 110719.0,
      "end_time": 114060.0,
      "text": "various webpages. The most famous such algorithm which you may have heard of is"
    },
    {
      "index": 31,
      "start_time": 114060.0,
      "end_time": 120340.0,
      "text": "the PageRank algorithm, in use by Google. Indeed. In a December, 2010 report to the"
    },
    {
      "index": 32,
      "start_time": 120340.0,
      "end_time": 123259.0,
      "text": "United States White House, the President Council of Advisors on Science and"
    },
    {
      "index": 33,
      "start_time": 123259.0,
      "end_time": 127139.0,
      "text": "Technology argued that, in many areas, performance gains due to improvement in"
    },
    {
      "index": 34,
      "start_time": 127139.0,
      "end_time": 131120.0,
      "text": "algorithms have vastly exceeded even the dramatic performance gains due to"
    },
    {
      "index": 35,
      "start_time": 131120.0,
      "end_time": 135860.0,
      "text": "increased processor speed, as you&#39;d be familiar with in the form of [inaudible]"
    },
    {
      "index": 36,
      "start_time": 135860.0,
      "end_time": 139140.0,
      "text": "Law. Third, although this is getting significantly outside the scope of this"
    },
    {
      "index": 37,
      "start_time": 139140.0,
      "end_time": 143040.0,
      "text": "course, algorithms are increasingly being used to provide a novel lense on processes"
    },
    {
      "index": 38,
      "start_time": 143040.0,
      "end_time": 146590.0,
      "text": "outside of computer science and technology. For example, the study of"
    },
    {
      "index": 39,
      "start_time": 146590.0,
      "end_time": 149760.0,
      "text": "quantum computation has provided a new and computational view point on quantum"
    },
    {
      "index": 40,
      "start_time": 149760.0,
      "end_time": 153689.0,
      "text": "mechanics. Price fluctuations in economic markets can be fruitfully viewed as an"
    },
    {
      "index": 41,
      "start_time": 153689.0,
      "end_time": 157560.0,
      "text": "algorithmic process. And even evolution can be usefully thought of as a"
    },
    {
      "index": 42,
      "start_time": 157560.0,
      "end_time": 163110.0,
      "text": "surprisingly effective search algorithm. The last two reasons I&#39;m gonna give you"
    },
    {
      "index": 43,
      "start_time": 163110.0,
      "end_time": 166360.0,
      "text": "might sound a little flippant, but, I think there&#39;s more than a grain of truth"
    },
    {
      "index": 44,
      "start_time": 166360.0,
      "end_time": 170000.0,
      "text": "to both of them. Now, I don&#39;t know about you, but back when I was a student my"
    },
    {
      "index": 45,
      "start_time": 170000.0,
      "end_time": 174040.0,
      "text": "favorite classes were always challenging classes. But, after I struggled through"
    },
    {
      "index": 46,
      "start_time": 174040.0,
      "end_time": 178420.0,
      "text": "them I somehow felt like I had a few more IQ points than when I started. So, I hope"
    },
    {
      "index": 47,
      "start_time": 178420.0,
      "end_time": 181969.0,
      "text": "this course provides a similar experience for many of you. That, on the one hand,"
    },
    {
      "index": 48,
      "start_time": 181969.0,
      "end_time": 185299.0,
      "text": "it&#39;s a bit of a struggle, you find the, the concepts challenging, but perhaps you"
    },
    {
      "index": 49,
      "start_time": 185299.0,
      "end_time": 191370.0,
      "text": "feel just a, a tinge smarter after we&#39;re done. Finally, I hope that by the end of"
    },
    {
      "index": 50,
      "start_time": 191370.0,
      "end_time": 193769.0,
      "text": "the course, a constant fraction of you will agree with me that designing and"
    },
    {
      "index": 51,
      "start_time": 193769.0,
      "end_time": 197849.0,
      "text": "analyzing algorithms is simply fun. It&#39;s an endeavor that requires a rare blend of"
    },
    {
      "index": 52,
      "start_time": 197849.0,
      "end_time": 201090.0,
      "text": "creativity and precision. And it can certainly be frustrating at times. But"
    },
    {
      "index": 53,
      "start_time": 201090.0,
      "end_time": 205280.0,
      "text": "even more than that, it is addictive. So let&#39;s now descend from these lofty"
    },
    {
      "index": 54,
      "start_time": 205280.0,
      "end_time": 209230.0,
      "text": "generalities, and, get much more concrete. And also, let&#39;s remember that we&#39;ve all"
    },
    {
      "index": 55,
      "start_time": 209230.0,
      "end_time": 215780.0,
      "text": "been learning and using algorithms since we were little kids. So once upon a time"
    },
    {
      "index": 56,
      "start_time": 215780.0,
      "end_time": 219739.0,
      "text": "in roughly third grade or so you learned how to multiple two numbers. Now you"
    },
    {
      "index": 57,
      "start_time": 219739.0,
      "end_time": 223230.0,
      "text": "probably weren&#39;t thinking in these terms at the time, but multiplying two numbers"
    },
    {
      "index": 58,
      "start_time": 223230.0,
      "end_time": 226530.0,
      "text": "is certainly a well defined computational problem and that procedure you learned"
    },
    {
      "index": 59,
      "start_time": 226530.0,
      "end_time": 231200.0,
      "text": "back in third grade or so is indeed an algorithm so lets just make that a little"
    },
    {
      "index": 60,
      "start_time": 231200.0,
      "end_time": 235420.0,
      "text": "bit more precise. In this computational problem we&#39;re given as input two numbers"
    },
    {
      "index": 61,
      "start_time": 235420.0,
      "end_time": 240499.0,
      "text": "lets say we have ten digits. And to make things interesting why don&#39;t you think"
    },
    {
      "index": 62,
      "start_time": 240499.0,
      "end_time": 243629.0,
      "text": "about N as being really quite large, say in the thousands. Maybe we&#39;re implementing"
    },
    {
      "index": 63,
      "start_time": 243629.0,
      "end_time": 247480.0,
      "text": "an algorithm that&#39;s going to be used in cryptography application where you need to"
    },
    {
      "index": 64,
      "start_time": 247480.0,
      "end_time": 252999.0,
      "text": "keep track of really quite large numbers. So if we call the two infinite numbers X"
    },
    {
      "index": 65,
      "start_time": 252999.0,
      "end_time": 261280.0,
      "text": "and Y, the problem is simply to compute their products X times Y. So a quick"
    },
    {
      "index": 66,
      "start_time": 261279.99999999997,
      "end_time": 264610.0,
      "text": "digression, I&#39;ll certainly be the first to admit that my handwriting is not the"
    },
    {
      "index": 67,
      "start_time": 264610.0,
      "end_time": 269500.0,
      "text": "greatest. I got a C in penmanship back in elementary school and I think the teacher"
    },
    {
      "index": 68,
      "start_time": 269500.0,
      "end_time": 273620.0,
      "text": "was being, a little generous. But, you know, it&#39;s an acquired taste but trust me,"
    },
    {
      "index": 69,
      "start_time": 273620.0,
      "end_time": 277900.0,
      "text": "you will get used to it. &gt;&gt; Okay, back to integer multiplication. Now, when we talk"
    },
    {
      "index": 70,
      "start_time": 277900.0,
      "end_time": 280810.0,
      "text": "about procedures for multiplying two numbers, we&#39;re gonna be interested in"
    },
    {
      "index": 71,
      "start_time": 280810.0,
      "end_time": 286210.0,
      "text": "counting how many steps are required in order to execute, the multiplication. So"
    },
    {
      "index": 72,
      "start_time": 286210.0,
      "end_time": 289350.0,
      "text": "how do we count a step? We&#39;ll talk more about this later, but for multiplying two"
    },
    {
      "index": 73,
      "start_time": 289350.0,
      "end_time": 293850.0,
      "text": "numbers lets just call a step the addition or multiplication of two single digit"
    },
    {
      "index": 74,
      "start_time": 293850.0,
      "end_time": 298610.0,
      "text": "numbers. So let&#39;s review the integer multiplication algorithm that we learned"
    },
    {
      "index": 75,
      "start_time": 298610.0,
      "end_time": 302060.0,
      "text": "back in grade school just by working through a concrete example. Specifically,"
    },
    {
      "index": 76,
      "start_time": 302060.0,
      "end_time": 307080.0,
      "text": "let&#39;s take of n equals four, so it&#39;s like a two four digit numbers. Let&#39;s say five,"
    },
    {
      "index": 77,
      "start_time": 307080.0,
      "end_time": 315190.0,
      "text": "six, seven, eight. And one, two, three, four. [sound]. Now as you&#39;ll recall, the"
    },
    {
      "index": 78,
      "start_time": 315190.0,
      "end_time": 318699.0,
      "text": "procedure we learned way back when was just to take each digit at the bottom"
    },
    {
      "index": 79,
      "start_time": 318699.0,
      "end_time": 322789.0,
      "text": "number and multiply it by each of the top numbers. And then to take each of those, N"
    },
    {
      "index": 80,
      "start_time": 322789.0,
      "end_time": 326780.0,
      "text": "partial products, and add them up. So, for example, you start with the four, you"
    },
    {
      "index": 81,
      "start_time": 326780.0,
      "end_time": 331000.0,
      "text": "multiple it by eight, you get 32, carry the three. Four times seven is 28, add the"
    },
    {
      "index": 82,
      "start_time": 331000.0,
      "end_time": 335190.0,
      "text": "three, you get one. Carry the three, and so on. So that gives you this first"
    },
    {
      "index": 83,
      "start_time": 335190.0,
      "end_time": 341720.0,
      "text": "partial product. 22 seven twelve. Then you do a shift, so you effectively put a zero"
    },
    {
      "index": 84,
      "start_time": 341720.0,
      "end_time": 346430.0,
      "text": "in this final digit, and you repeat that procedure using the next digit, the three."
    },
    {
      "index": 85,
      "start_time": 346430.0,
      "end_time": 353599.0,
      "text": "So again, three times eight is four, carry the two, and so on. And you can see the"
    },
    {
      "index": 86,
      "start_time": 353599.0,
      "end_time": 359660.0,
      "text": "final two partial products using the two and the one. And having computed all of"
    },
    {
      "index": 87,
      "start_time": 359660.0,
      "end_time": 364900.0,
      "text": "the partial products, you just add them up to get the final product. Now, the"
    },
    {
      "index": 88,
      "start_time": 364900.0,
      "end_time": 368740.0,
      "text": "question I&#39;m interested in, is, how much work, how many primitive operations did we"
    },
    {
      "index": 89,
      "start_time": 368740.0,
      "end_time": 372629.0,
      "text": "do to multiply these two numbers? And more generally, how many does it require to"
    },
    {
      "index": 90,
      "start_time": 372629.0,
      "end_time": 378150.0,
      "text": "multiply to N digit numbers as a function of N? Well, just to get sort of a ballpark"
    },
    {
      "index": 91,
      "start_time": 378150.0,
      "end_time": 382720.0,
      "text": "viewpoint for what&#39;s going on, we started with two N digit numbers. And at the end"
    },
    {
      "index": 92,
      "start_time": 382720.0,
      "end_time": 388340.0,
      "text": "of the day, we basically filled out a grid. Of size roughly end by end. Give and"
    },
    {
      "index": 93,
      "start_time": 388340.0,
      "end_time": 392720.0,
      "text": "take a little bit. So just in ballpark terms. It seems that multiplying two end"
    },
    {
      "index": 94,
      "start_time": 392720.0,
      "end_time": 397300.0,
      "text": "numbers require essentially a quadratic number of operations. As the small numbers"
    },
    {
      "index": 95,
      "start_time": 397300.0,
      "end_time": 401259.0,
      "text": "operations to fill in the entry in this grid. The grid is end by end roughly. So"
    },
    {
      "index": 96,
      "start_time": 401259.0,
      "end_time": 404940.0,
      "text": "that&#39;s roughly n squared operations. And a little more detail. We can look at each of"
    },
    {
      "index": 97,
      "start_time": 404940.0,
      "end_time": 409729.0,
      "text": "the partial product separately. So, to compute say this first partial product,"
    },
    {
      "index": 98,
      "start_time": 409729.0,
      "end_time": 413550.0,
      "text": "what did we do. We took the four, we multiplied it by each of the N digits on"
    },
    {
      "index": 99,
      "start_time": 413550.0,
      "end_time": 417659.0,
      "text": "top. We also did some carries. So that affects things a little bit. But in the"
    },
    {
      "index": 100,
      "start_time": 417659.0,
      "end_time": 423000.0,
      "text": "end, we did somewhere between say N and 2N, primitive operations to compute this"
    },
    {
      "index": 101,
      "start_time": 423000.0,
      "end_time": 430830.0,
      "text": "first partial product. And that&#39;s true of course for each of the N partial products."
    },
    {
      "index": 102,
      "start_time": 430830.0,
      "end_time": 435039.0,
      "text": "So that&#39;s roughly n operations for each of the n partial products. So that&#39;s roughly"
    },
    {
      "index": 103,
      "start_time": 435039.0,
      "end_time": 439349.0,
      "text": "n-squared operations, give you all of the partial products. Then we have to add all"
    },
    {
      "index": 104,
      "start_time": 439349.0,
      "end_time": 444240.0,
      "text": "up at the end, but that takes just an extra number of cost and times n primitive"
    },
    {
      "index": 105,
      "start_time": 444240.0,
      "end_time": 448979.0,
      "text": "operations. Do all of those additions. So summarizing, overall, the number of"
    },
    {
      "index": 106,
      "start_time": 448979.0,
      "end_time": 454720.0,
      "text": "primitive operations required to multiply two end digit numbers using this procedure"
    },
    {
      "index": 107,
      "start_time": 454720.0,
      "end_time": 462770.0,
      "text": "grows quadratically with the length end. So, for example, if you double the length"
    },
    {
      "index": 108,
      "start_time": 462770.0,
      "end_time": 467360.0,
      "text": "of two numbers, you expect to, to roughly four times as many primitive operations,"
    },
    {
      "index": 109,
      "start_time": 467360.0,
      "end_time": 473400.0,
      "text": "if you use this itirival rhythm for multiplying two numbers. Now, depending on"
    },
    {
      "index": 110,
      "start_time": 473400.0,
      "end_time": 476860.0,
      "text": "what type of third grader you were, you might well have accepted this procedure as"
    },
    {
      "index": 111,
      "start_time": 476860.0,
      "end_time": 481699.0,
      "text": "being the unique, or at least the optimal way of multiplying to N digit numbers"
    },
    {
      "index": 112,
      "start_time": 481699.0,
      "end_time": 485330.0,
      "text": "together. And if you wanna be an expert algorithm designer, that kind of obedient"
    },
    {
      "index": 113,
      "start_time": 485330.0,
      "end_time": 490270.0,
      "text": "attitude is something you&#39;re gonna have to learn to discard. Here&#39;s a favorite quote"
    },
    {
      "index": 114,
      "start_time": 490270.0,
      "end_time": 494970.0,
      "text": "of mine. It&#39;s from a quite early textbook in the field, The Design and Analysis of"
    },
    {
      "index": 115,
      "start_time": 494970.0,
      "end_time": 499849.0,
      "text": "Computer Algorithms by AO Hoftcroft and Olmond. And after highlighting a number of"
    },
    {
      "index": 116,
      "start_time": 499849.0,
      "end_time": 503400.0,
      "text": "algorithmic design techniques, they conclude by saying, perhaps the most"
    },
    {
      "index": 117,
      "start_time": 503400.0,
      "end_time": 508129.0,
      "text": "important principle for the good algorithm designer is to refuse to be content. So"
    },
    {
      "index": 118,
      "start_time": 508129.0,
      "end_time": 512890.0,
      "text": "that&#39;s a beautifully accurate quote. I might rephrase it more succinctly by just"
    },
    {
      "index": 119,
      "start_time": 512890.0,
      "end_time": 517269.0,
      "text": "saying if you want to be a good algorithm designer, you should adopt the following"
    },
    {
      "index": 120,
      "start_time": 517269.0,
      "end_time": 523050.0,
      "text": "mantra. You should always be asking can we do better. This is a particularly"
    },
    {
      "index": 121,
      "start_time": 523049.99999999994,
      "end_time": 527910.0,
      "text": "appropriate question to ask when you&#39;re faced with some kind of naive or obvious"
    },
    {
      "index": 122,
      "start_time": 527910.0,
      "end_time": 531459.0,
      "text": "algorithm for solving a problem, like the third grade algorithm for energy"
    },
    {
      "index": 123,
      "start_time": 531459.0,
      "end_time": 534980.0,
      "text": "multiplication. This will come up over and over again. We&#39;ll see an algorithm, there"
    },
    {
      "index": 124,
      "start_time": 534980.0,
      "end_time": 539329.0,
      "text": "will be an obvious solution but, with some extra algorithmic ingenuity, by detecting"
    },
    {
      "index": 125,
      "start_time": 539329.0,
      "end_time": 543880.0,
      "text": "subtle structure in the problem, we&#39;ll be able to do significantly qualitatively"
    },
    {
      "index": 126,
      "start_time": 543880.0,
      "end_time": 550880.0,
      "text": "better than the naive or obvious solution to the problem. So let&#39;s apply this cocky"
    },
    {
      "index": 127,
      "start_time": 550880.0,
      "end_time": 555720.0,
      "text": "attitude to the problem of multiplying two integers. Let&#39;s just suppose, as a working"
    },
    {
      "index": 128,
      "start_time": 555720.0,
      "end_time": 558850.0,
      "text": "hypothesis, that there is some procedure which is better than what we learned back"
    },
    {
      "index": 129,
      "start_time": 558850.0,
      "end_time": 561440.0,
      "text": "in elementary school. What could it possibly look like? Well, as reasonably"
    },
    {
      "index": 130,
      "start_time": 561440.0,
      "end_time": 561440.0,
      "text": "seasoned programmers, you all know that there are, on the one hand, iterative"
    },
    {
      "index": 131,
      "start_time": 561440.0,
      "end_time": 561440.0,
      "text": "programs, liked the one we just reviewed for integer multiplication. But there&#39;s"
    },
    {
      "index": 132,
      "start_time": 561440.0,
      "end_time": 561649.0,
      "text": "also recursive programs. So in a recursive program, what you do is you take the"
    },
    {
      "index": 133,
      "start_time": 561649.0,
      "end_time": 562120.0,
      "text": "problem at hand that you&#39;re trying to solve, and you identify smaller sub"
    },
    {
      "index": 134,
      "start_time": 562120.0,
      "end_time": 562579.0,
      "text": "problems of it which you then solve recursively, which you then call your"
    },
    {
      "index": 135,
      "start_time": 562579.0,
      "end_time": 565230.0,
      "text": "function once again on. So as someone with some programming experience, you know that"
    },
    {
      "index": 136,
      "start_time": 565230.0,
      "end_time": 568820.0,
      "text": "there are not only iterative algorithms, iterative programs like the one we just"
    },
    {
      "index": 137,
      "start_time": 568820.0,
      "end_time": 572410.0,
      "text": "outlined for multiplying two integers, but there are also recursive programs. These"
    },
    {
      "index": 138,
      "start_time": 572410.0,
      "end_time": 576690.0,
      "text": "are programs that call themselves typically on an input of a similar form"
    },
    {
      "index": 139,
      "start_time": 576690.0,
      "end_time": 581279.0,
      "text": "but with smaller size. So as a working hypothesis, let&#39;s imagine that there&#39;s"
    },
    {
      "index": 140,
      "start_time": 581279.0,
      "end_time": 586320.0,
      "text": "some interesting recursive approach to multiplying two integers. What must such"
    },
    {
      "index": 141,
      "start_time": 586320.0,
      "end_time": 590029.0,
      "text": "an algorithm look like? Well it must somehow fundamentally involve calling"
    },
    {
      "index": 142,
      "start_time": 590029.0,
      "end_time": 595130.0,
      "text": "itself on smaller problems, that is, on smaller numbers, numbers with fewer"
    },
    {
      "index": 143,
      "start_time": 595130.0,
      "end_time": 599060.0,
      "text": "digits. So what kind of? [inaudible] decomposition on numbers could be used to"
    },
    {
      "index": 144,
      "start_time": 599060.0,
      "end_time": 602839.0,
      "text": "enable this kind of recursive approach. Well, if you think about it, there&#39;s a"
    },
    {
      "index": 145,
      "start_time": 602839.0,
      "end_time": 606730.0,
      "text": "pretty natural way to break a number with a bunch of digits into a couple numbers"
    },
    {
      "index": 146,
      "start_time": 606730.0,
      "end_time": 611029.0,
      "text": "with fewer digits. Namely, just take the first half of the digits, the first N over"
    },
    {
      "index": 147,
      "start_time": 611029.0,
      "end_time": 614450.0,
      "text": "two digits, regard that as a number in its own right. And the second half of the"
    },
    {
      "index": 148,
      "start_time": 614450.0,
      "end_time": 619130.0,
      "text": "digits, regard that as a number in its own right. So perhaps this decomposition will"
    },
    {
      "index": 149,
      "start_time": 619130.0,
      "end_time": 624100.0,
      "text": "have some use in enabling a requisite attack on how to multiply two integers. So"
    },
    {
      "index": 150,
      "start_time": 624100.0,
      "end_time": 632760.0,
      "text": "we&#39;re gonna investigate that in more detail on this next slide. Given X and Y,"
    },
    {
      "index": 151,
      "start_time": 632760.0,
      "end_time": 639029.0,
      "text": "each with N over two digits, we&#39;re going to represent X as terms of its first half"
    },
    {
      "index": 152,
      "start_time": 639029.0,
      "end_time": 644720.0,
      "text": "of the digits A, and its second half of the digits, B. Similarly, we will write Y"
    },
    {
      "index": 153,
      "start_time": 644720.0,
      "end_time": 650300.0,
      "text": "the second input, in terms of its first half and second half of digits, C and D."
    },
    {
      "index": 154,
      "start_time": 650300.0,
      "end_time": 660050.0,
      "text": "And in the expansion, A, B, C, and D are all entered with two digit numbers. I&#39;m"
    },
    {
      "index": 155,
      "start_time": 660050.0,
      "end_time": 664220.0,
      "text": "just assuming for convenience here that N is even. This would extend to the case"
    },
    {
      "index": 156,
      "start_time": 664220.0,
      "end_time": 668430.0,
      "text": "where N is odd in the natural way where you break it into N over two rounded up"
    },
    {
      "index": 157,
      "start_time": 668430.0,
      "end_time": 678200.0,
      "text": "and N over two rounded down. So in our previous example where X was 5678 and Y"
    },
    {
      "index": 158,
      "start_time": 678200.0,
      "end_time": 686220.0,
      "text": "was 1234 we would have A being equal to 56, the first two digits of the four and X"
    },
    {
      "index": 159,
      "start_time": 686220.0,
      "end_time": 691790.0,
      "text": "and D would be the other two digits and similarly for C and D in a D composition"
    },
    {
      "index": 160,
      "start_time": 691790.0,
      "end_time": 701670.0,
      "text": "of Y. So now on just purely mechanical way we can expand the product of X times Y in"
    },
    {
      "index": 161,
      "start_time": 701670.0,
      "end_time": 709779.0,
      "text": "terms of misrepresentation in terms of these smaller numbers A, B, C and D. So X"
    },
    {
      "index": 162,
      "start_time": 709779.0,
      "end_time": 715180.0,
      "text": "times Y by representation, is just the same thing as 10N over two times A+B times"
    },
    {
      "index": 163,
      "start_time": 715180.0,
      "end_time": 720709.0,
      "text": "quantity ten to the N over two, C+D. And now, if we expand this in group like"
    },
    {
      "index": 164,
      "start_time": 720709.0,
      "end_time": 730380.0,
      "text": "terms, we get a ten to the N times AC+ a ten to the N over two times AD+BC. So"
    },
    {
      "index": 165,
      "start_time": 730380.0,
      "end_time": 736899.0,
      "text": "that&#39;s combining two terms from the expansion +BD. And I am gonna call this"
    },
    {
      "index": 166,
      "start_time": 736899.0,
      "end_time": 742990.0,
      "text": "expression circled in green, star. Now what I want you to think about and make"
    },
    {
      "index": 167,
      "start_time": 742990.0,
      "end_time": 748630.0,
      "text": "sure you understand is that this expansion that I circled and called star immediately"
    },
    {
      "index": 168,
      "start_time": 748630.0,
      "end_time": 752399.0,
      "text": "suggests a recursive algorithm for multiplying two integers. Now it&#39;s not"
    },
    {
      "index": 169,
      "start_time": 752399.0,
      "end_time": 755089.0,
      "text": "clear whether that algorithm&#39;s going to be fast or slow or whether this is a good"
    },
    {
      "index": 170,
      "start_time": 755089.0,
      "end_time": 760000.0,
      "text": "idea or a crack pot idea, but certainly it&#39;s a legitimate recursive approach to"
    },
    {
      "index": 171,
      "start_time": 760000.0,
      "end_time": 766949.0,
      "text": "multiplying two integers, specifically. The relevant products in star, namely AC,"
    },
    {
      "index": 172,
      "start_time": 766949.0,
      "end_time": 772019.0,
      "text": "AD, BC, and BD all involve smaller numbers than what we started with. Those are all N"
    },
    {
      "index": 173,
      "start_time": 772019.0,
      "end_time": 775500.0,
      "text": "over two digit numbers, whereas our original inputs had N digits. So we can"
    },
    {
      "index": 174,
      "start_time": 775500.0,
      "end_time": 779949.0,
      "text": "legitimately solve those recursively. You can invoke our same algorithm to"
    },
    {
      "index": 175,
      "start_time": 779949.0,
      "end_time": 785920.0,
      "text": "[inaudible], to compute those in a recursive way. [sound]. Now, once we&#39;ve"
    },
    {
      "index": 176,
      "start_time": 785920.0,
      "end_time": 790139.0,
      "text": "invoked our, multiplication algorithm recursively four times to compute these"
    },
    {
      "index": 177,
      "start_time": 790139.0,
      "end_time": 794610.0,
      "text": "four relevant products. Now we can just, compute the expression in star in the"
    },
    {
      "index": 178,
      "start_time": 794610.0,
      "end_time": 799630.0,
      "text": "obvious way. We take AD and BC, we add them together, using the just standard"
    },
    {
      "index": 179,
      "start_time": 799630.0,
      "end_time": 804470.0,
      "text": "first grade iterative addition algorithm. Then we pad both AC and the result of that"
    },
    {
      "index": 180,
      "start_time": 804470.0,
      "end_time": 808399.0,
      "text": "addition by a bunch of zeroes. And over two zeroes or N zeroes as appropriate. Now"
    },
    {
      "index": 181,
      "start_time": 808399.0,
      "end_time": 812089.0,
      "text": "we have these three constituent terms, and we just add them up again using the grade"
    },
    {
      "index": 182,
      "start_time": 812089.0,
      "end_time": 819370.0,
      "text": "school algorithm to compute the overall expression. So to keep this intro lecture"
    },
    {
      "index": 183,
      "start_time": 819370.0,
      "end_time": 822279.0,
      "text": "brisk, I haven&#39;t discussed the base case of this recursive algorithm. As hopefully"
    },
    {
      "index": 184,
      "start_time": 822279.0,
      "end_time": 825790.0,
      "text": "you all know, recursive algorithms do need base cases. At some point, the recursion"
    },
    {
      "index": 185,
      "start_time": 825790.0,
      "end_time": 829000.0,
      "text": "has gotta stop. Otherwise, your algorithm is never gonna terminate. So in"
    },
    {
      "index": 186,
      "start_time": 829000.0,
      "end_time": 832380.0,
      "text": "multiplication, all you do is if your past is input two single digit numbers, you&#39;d"
    },
    {
      "index": 187,
      "start_time": 832380.0,
      "end_time": 836139.0,
      "text": "multiply them in one primitive operation, and return the result. If the numbers have"
    },
    {
      "index": 188,
      "start_time": 836139.0,
      "end_time": 839600.0,
      "text": "two or more digits, you would recurse in the way we described here. If there&#39;s one"
    },
    {
      "index": 189,
      "start_time": 839600.0,
      "end_time": 845509.0,
      "text": "digit, you just compute them, and you&#39;re done. So who knows whether this"
    },
    {
      "index": 190,
      "start_time": 845509.0,
      "end_time": 848250.0,
      "text": "[inaudible] algorithm is a good idea or not? It&#39;s totally not obvious. You should"
    },
    {
      "index": 191,
      "start_time": 848250.0,
      "end_time": 852050.0,
      "text": "not even necessarily have any intuition about how this compares to the [inaudible]"
    },
    {
      "index": 192,
      "start_time": 852050.0,
      "end_time": 855709.0,
      "text": "algorithm you learned back in elementary school. So in lieu of answering that"
    },
    {
      "index": 193,
      "start_time": 855709.0,
      "end_time": 860209.0,
      "text": "question, although we will answer it, several lectures hence. I wanna show you a"
    },
    {
      "index": 194,
      "start_time": 860209.0,
      "end_time": 864709.0,
      "text": "second, still more clever recursive algorithm for integer multiplication. So"
    },
    {
      "index": 195,
      "start_time": 864709.0,
      "end_time": 868380.0,
      "text": "this goes by the name [inaudible] multiplication, after the founder, sort of"
    },
    {
      "index": 196,
      "start_time": 868380.0,
      "end_time": 873180.0,
      "text": "the key point, is a trick pointed out by the mathematician Gauss, in the early"
    },
    {
      "index": 197,
      "start_time": 873180.0,
      "end_time": 877620.0,
      "text": "nineteenth century. So to explain this algorithm, let me write once again our"
    },
    {
      "index": 198,
      "start_time": 877620.0,
      "end_time": 882459.0,
      "text": "expansion in terms of the ampertuitive numbers, so we have the product X times Y"
    },
    {
      "index": 199,
      "start_time": 882459.0,
      "end_time": 892089.0,
      "text": "which we wrote as. Ten to the n a, c plus ten to the n over two. Ad plus BC plus BD."
    },
    {
      "index": 200,
      "start_time": 892089.0,
      "end_time": 897130.0,
      "text": "Now, the previous approach was in recognition of the four products that we"
    },
    {
      "index": 201,
      "start_time": 897130.0,
      "end_time": 900060.0,
      "text": "see in this expression. We made four recursive calls. So here&#39;s the trick, and"
    },
    {
      "index": 202,
      "start_time": 900060.0,
      "end_time": 904000.0,
      "text": "this is really what [inaudible] figured out over 200 years ago. Which is that, it"
    },
    {
      "index": 203,
      "start_time": 904000.0,
      "end_time": 907190.0,
      "text": "seems there are four products, but fundamentally, in this expression, there&#39;s"
    },
    {
      "index": 204,
      "start_time": 907190.0,
      "end_time": 912459.0,
      "text": "really only three quantities that we care about. There&#39;s the AC. Coefficient of this"
    },
    {
      "index": 205,
      "start_time": 912459.0,
      "end_time": 918699.0,
      "text": "first term, there&#39;s AD+BC, the coefficient of this middle term, and there&#39;s BD. So we"
    },
    {
      "index": 206,
      "start_time": 918699.0,
      "end_time": 924279.0,
      "text": "care about AD and BC as quantities individually, only inasmuch as we care"
    },
    {
      "index": 207,
      "start_time": 924279.0,
      "end_time": 928130.0,
      "text": "about their sum. We really don&#39;t care about them individually. So that motivates"
    },
    {
      "index": 208,
      "start_time": 928130.0,
      "end_time": 932300.0,
      "text": "the question, perhaps, we can somehow uncover these three different quantities"
    },
    {
      "index": 209,
      "start_time": 932300.0,
      "end_time": 937899.0,
      "text": "using only three recursive calls rather than. Four. In fact we can&#39;t and that&#39;s"
    },
    {
      "index": 210,
      "start_time": 937899.0,
      "end_time": 943259.0,
      "text": "carat two by multiplication. So, to be more specific. Our first to recursive"
    },
    {
      "index": 211,
      "start_time": 943259.0,
      "end_time": 949449.0,
      "text": "calls are shared with the previous recursive algorithm. You go ahead and"
    },
    {
      "index": 212,
      "start_time": 949449.0,
      "end_time": 956639.0,
      "text": "compute A, C and B, D recursively. The third step is the clever one where we"
    },
    {
      "index": 213,
      "start_time": 956639.0,
      "end_time": 963639.0,
      "text": "recursively compute the product of quantity A plus B with C plus D. Now"
    },
    {
      "index": 214,
      "start_time": 963639.0,
      "end_time": 967199.0,
      "text": "expanding what are we going to get when we recursively compute this product? We&#39;re"
    },
    {
      "index": 215,
      "start_time": 967199.0,
      "end_time": 979269.0,
      "text": "going to get AC plus BD plus AD plus BC. And here is Gauss&#39; trick. [inaudible]"
    },
    {
      "index": 216,
      "start_time": 979269.0,
      "end_time": 984389.0,
      "text": "observation, which is that the result of the third recursive call minus each of the"
    },
    {
      "index": 217,
      "start_time": 984389.0,
      "end_time": 990509.0,
      "text": "first two what happens. Well the AC is gonna to cancel the AC, the BD is gonna to"
    },
    {
      "index": 218,
      "start_time": 990509.0,
      "end_time": 998560.0,
      "text": "cancel the BD. And we will be left with AD plus BC, which is exactly that middle"
    },
    {
      "index": 219,
      "start_time": 998560.0,
      "end_time": 1003139.0,
      "text": "co-efficient that we cared about. So, we can indeed compute the sum of AD and BC"
    },
    {
      "index": 220,
      "start_time": 1003140.0,
      "end_time": 1008181.0,
      "text": "without separately computing each of them. And that&#39;s exactly what we wanted. So,"
    },
    {
      "index": 221,
      "start_time": 1008180.0,
      "end_time": 1012240.0,
      "text": "what does this buy us? This gives us another second recursive algorithm for"
    },
    {
      "index": 222,
      "start_time": 1012240.0,
      "end_time": 1017160.0,
      "text": "multiplying two integers, that makes use of fewer recursive calls. Only three"
    },
    {
      "index": 223,
      "start_time": 1017160.0,
      "end_time": 1024350.0,
      "text": "recursive calls rather than four. And as before, there&#39;s a little bit of work to do"
    },
    {
      "index": 224,
      "start_time": 1024349.9999999999,
      "end_time": 1028249.9999999999,
      "text": "beyond the recursive calls but not much. You just have to do some padding by zeros"
    },
    {
      "index": 225,
      "start_time": 1028250.0,
      "end_time": 1033340.0,
      "text": "and adding up the results. So there&#39;s two points I want you to appreciate about all"
    },
    {
      "index": 226,
      "start_time": 1033339.9999999999,
      "end_time": 1037939.9999999999,
      "text": "these image and multiplication items. The first point is [inaudible] design space is"
    },
    {
      "index": 227,
      "start_time": 1037940.0,
      "end_time": 1042730.0,
      "text": "incredibly rich. Much richer than you might have initially had intuition for."
    },
    {
      "index": 228,
      "start_time": 1042730.0,
      "end_time": 1046170.0,
      "text": "Multiplying two integers what else can you do other than the elementary school"
    },
    {
      "index": 229,
      "start_time": 1046170.0000000001,
      "end_time": 1049480.0,
      "text": "algebra. Well, what have we seen? You can do a lot of other things. In particular,"
    },
    {
      "index": 230,
      "start_time": 1049480.0,
      "end_time": 1053270.0,
      "text": "the second recursive algorithm looks nothing like what we learned back in grade"
    },
    {
      "index": 231,
      "start_time": 1053270.0,
      "end_time": 1057130.0,
      "text": "school. And you&#39;ll see this over and over again, that, with sufficient ingenuity,"
    },
    {
      "index": 232,
      "start_time": 1057130.0,
      "end_time": 1060920.0,
      "text": "sufficient cleverness, you can solve problems in ways much differently and"
    },
    {
      "index": 233,
      "start_time": 1060920.0,
      "end_time": 1066270.0,
      "text": "sometimes much better than using the naive straightforward algorithm. The second"
    },
    {
      "index": 234,
      "start_time": 1066270.0,
      "end_time": 1070380.0,
      "text": "takeaway point from this discussion of integer multiplication algorithms is that"
    },
    {
      "index": 235,
      "start_time": 1070380.0,
      "end_time": 1075400.0,
      "text": "sometimes you have interesting algorithmic ideas for which it&#39;s totally not obvious"
    },
    {
      "index": 236,
      "start_time": 1075400.0,
      "end_time": 1079190.0,
      "text": "what kinds of properties, or what kind of performance guarantees those algorithms"
    },
    {
      "index": 237,
      "start_time": 1079190.0,
      "end_time": 1082420.0,
      "text": "enjoy. [inaudible]. Particular confronted with these three different integer"
    },
    {
      "index": 238,
      "start_time": 1082420.0,
      "end_time": 1087260.0,
      "text": "multiplication algorithms how can we not wonder which of the three is the best?"
    },
    {
      "index": 239,
      "start_time": 1087260.0,
      "end_time": 1090920.0,
      "text": "Which of these requires the fewest number of [inaudible] operations to multiply two"
    },
    {
      "index": 240,
      "start_time": 1090920.0,
      "end_time": 1094870.0,
      "text": "integers? In particular, does one of these novel recursive approaches do better than"
    },
    {
      "index": 241,
      "start_time": 1094870.0,
      "end_time": 1097780.0,
      "text": "the algorithm we learned back in elementary school? The answer to that"
    },
    {
      "index": 242,
      "start_time": 1097780.0,
      "end_time": 1101330.0,
      "text": "question is totally non-obvious and it requires non-trivial mathematical analysis"
    },
    {
      "index": 243,
      "start_time": 1101330.0,
      "end_time": 1104460.0,
      "text": "to answer. [inaudible] lectures will provide you with the tools to not only"
    },
    {
      "index": 244,
      "start_time": 1104460.0,
      "end_time": 1108030.0,
      "text": "precisely understand and answer this question but more generally to predict the"
    },
    {
      "index": 245,
      "start_time": 1108030.0,
      "end_time": 1111270.0,
      "text": "running times of an entire genre of divide and conquer algorithms. Algorithms like"
    },
    {
      "index": 246,
      "start_time": 1111270.0,
      "end_time": 1121270.0,
      "text": "carrot tubal multiplication. So, stay tuned."
    }
  ]
}