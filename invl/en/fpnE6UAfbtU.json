{
  "video_id": "fpnE6UAfbtU",
  "title": "Registers and RAM: Crash Course Computer Science #6",
  "es": 0,
  "json": [
    {
      "index": 1,
      "start_time": 3180.0,
      "end_time": 5790.0,
      "text": "Hi, I’m Carrie Anne and welcome to Crash Course Computer Science."
    },
    {
      "index": 2,
      "start_time": 5790.0,
      "end_time": 11030.0,
      "text": "So last episode, using just logic gates, we built a simple ALU, which performs arithmetic"
    },
    {
      "index": 3,
      "start_time": 11030.0,
      "end_time": 13969.0,
      "text": "and logic operations, hence the ‘A’ and the ‘L’."
    },
    {
      "index": 4,
      "start_time": 13969.0,
      "end_time": 17360.0,
      "text": "But of course, there’s not much point in calculating a result only to throw it away"
    },
    {
      "index": 5,
      "start_time": 17360.0,
      "end_time": 22740.0,
      "text": "- it would be useful to store that value somehow, and maybe even run several operations in a row."
    },
    {
      "index": 6,
      "start_time": 22740.0,
      "end_time": 24850.0,
      "text": "That&#39;s where computer memory comes in!"
    },
    {
      "index": 7,
      "start_time": 24850.0,
      "end_time": 28650.0,
      "text": "If you&#39;ve ever been in the middle of a long RPG campaign on your console, or slogging"
    },
    {
      "index": 8,
      "start_time": 28650.0,
      "end_time": 32940.0,
      "text": "through a difficult level on Minesweeper on your desktop, and your dog came by, tripped"
    },
    {
      "index": 9,
      "start_time": 32940.0,
      "end_time": 36980.0,
      "text": "and pulled the power cord out of the wall, you know the agony of losing all your progress."
    },
    {
      "index": 10,
      "start_time": 36980.0,
      "end_time": 38200.0,
      "text": "Condolences."
    },
    {
      "index": 11,
      "start_time": 38200.0,
      "end_time": 42010.0,
      "text": "But the reason for your loss is that your console, your laptop and your computers make"
    },
    {
      "index": 12,
      "start_time": 42010.0,
      "end_time": 46540.0,
      "text": "use of Random Access Memory, or RAM, which stores things like game state - as long as"
    },
    {
      "index": 13,
      "start_time": 46540.0,
      "end_time": 47720.0,
      "text": "the power stays on."
    },
    {
      "index": 14,
      "start_time": 47720.0,
      "end_time": 51680.0,
      "text": "Another type of memory, called persistent memory, can survive without power, and it’s"
    },
    {
      "index": 15,
      "start_time": 51680.0,
      "end_time": 55660.0,
      "text": "used for different things; We&#39;ll talk about the persistence of memory in a later episode."
    },
    {
      "index": 16,
      "start_time": 55660.0,
      "end_time": 60010.0,
      "text": "Today, we’re going to start small - literally by building a circuit that can store one.."
    },
    {
      "index": 17,
      "start_time": 60010.0,
      "end_time": 61720.0,
      "text": "single.. bit of information."
    },
    {
      "index": 18,
      "start_time": 61720.0,
      "end_time": 65760.0,
      "text": "After that, we’ll scale up, and build our very own memory module, and we’ll combine"
    },
    {
      "index": 19,
      "start_time": 65760.0,
      "end_time": 70300.0,
      "text": "it with our ALU next time, when we finally build our very own CPU!"
    },
    {
      "index": 20,
      "start_time": 70300.0,
      "end_time": 79370.0,
      "text": "INTRO"
    },
    {
      "index": 21,
      "start_time": 79370.0,
      "end_time": 83290.0,
      "text": "All of the logic circuits we&#39;ve discussed so far go in one direction - always flowing"
    },
    {
      "index": 22,
      "start_time": 83290.0,
      "end_time": 86470.0,
      "text": "forward - like our 8-bit ripple adder from last episode."
    },
    {
      "index": 23,
      "start_time": 86470.0,
      "end_time": 89660.0,
      "text": "But we can also create circuits that loop back on themselves."
    },
    {
      "index": 24,
      "start_time": 89660.0,
      "end_time": 94190.0,
      "text": "Let’s try taking an ordinary OR gate, and feed the output back into one of its inputs"
    },
    {
      "index": 25,
      "start_time": 94190.0,
      "end_time": 95230.0,
      "text": "and see what happens."
    },
    {
      "index": 26,
      "start_time": 95230.0,
      "end_time": 97430.0,
      "text": "First, let’s set both inputs to 0."
    },
    {
      "index": 27,
      "start_time": 97430.0,
      "end_time": 101970.0,
      "text": "So 0 OR 0 is 0, and so this circuit always outputs 0."
    },
    {
      "index": 28,
      "start_time": 101970.0,
      "end_time": 104010.0,
      "text": "If we were to flip input A to 1."
    },
    {
      "index": 29,
      "start_time": 104010.0,
      "end_time": 108410.0,
      "text": "1 OR 0 is 1, so now the output of the OR gate is 1."
    },
    {
      "index": 30,
      "start_time": 108410.0,
      "end_time": 112950.0,
      "text": "A fraction of a second later, that loops back around into input B, so the OR gate sees that"
    },
    {
      "index": 31,
      "start_time": 112950.0,
      "end_time": 114670.0,
      "text": "both of its inputs are now 1."
    },
    {
      "index": 32,
      "start_time": 114670.0,
      "end_time": 118330.0,
      "text": "1 OR 1 is still 1, so there is no change in output."
    },
    {
      "index": 33,
      "start_time": 118330.0,
      "end_time": 121990.0,
      "text": "If we flip input A back to 0, the OR gate still outputs 1."
    },
    {
      "index": 34,
      "start_time": 121990.0,
      "end_time": 124610.0,
      "text": "So now we&#39;ve got a circuit that records a “1” for us."
    },
    {
      "index": 35,
      "start_time": 124610.0,
      "end_time": 127910.0,
      "text": "Except, we&#39;ve got a teensy tiny problem - this change is permanent!"
    },
    {
      "index": 36,
      "start_time": 127910.0,
      "end_time": 132640.0,
      "text": "No matter how hard we try, there’s no way to get this circuit to flip back from a 1"
    },
    {
      "index": 37,
      "start_time": 132640.0,
      "end_time": 133640.0,
      "text": "to a 0."
    },
    {
      "index": 38,
      "start_time": 133640.0,
      "end_time": 136499.0,
      "text": "Now let’s look at this same circuit, but with an AND gate instead."
    },
    {
      "index": 39,
      "start_time": 136499.0,
      "end_time": 139240.0,
      "text": "We&#39;ll start inputs A and B both at 1."
    },
    {
      "index": 40,
      "start_time": 139240.0,
      "end_time": 141370.0,
      "text": "1 AND 1 outputs 1 forever."
    },
    {
      "index": 41,
      "start_time": 141370.0,
      "end_time": 146300.0,
      "text": "But, if we then flip input A to 0, because it’s an AND gate, the output will go to 0."
    },
    {
      "index": 42,
      "start_time": 146300.0,
      "end_time": 149820.0,
      "text": "So this circuit records a 0, the opposite of our other circuit."
    },
    {
      "index": 43,
      "start_time": 149820.0,
      "end_time": 154980.0,
      "text": "Like before, no matter what input we apply to input A afterwards, the circuit will always output 0."
    },
    {
      "index": 44,
      "start_time": 154980.0,
      "end_time": 158230.0,
      "text": "Now we’ve got circuits that can record both 0s and 1s."
    },
    {
      "index": 45,
      "start_time": 158230.0,
      "end_time": 162340.0,
      "text": "The key to making this a useful piece of memory is to combine our two circuits into what is"
    },
    {
      "index": 46,
      "start_time": 162340.0,
      "end_time": 164099.0,
      "text": "called the AND-OR Latch."
    },
    {
      "index": 47,
      "start_time": 164099.0,
      "end_time": 168480.0,
      "text": "It has two inputs, a &quot;set&quot; input, which sets the output to a 1, and a &quot;reset&quot; input, which"
    },
    {
      "index": 48,
      "start_time": 168480.0,
      "end_time": 170400.0,
      "text": "resets the output to a 0."
    },
    {
      "index": 49,
      "start_time": 170400.0,
      "end_time": 174960.0,
      "text": "If set and reset are both 0, the circuit just outputs whatever was last put in it."
    },
    {
      "index": 50,
      "start_time": 174960.0,
      "end_time": 178200.0,
      "text": "In other words, it remembers a single bit of information!"
    },
    {
      "index": 51,
      "start_time": 178200.0,
      "end_time": 179440.0,
      "text": "Memory!"
    },
    {
      "index": 52,
      "start_time": 179440.0,
      "end_time": 183780.0,
      "text": "This is called a “latch” because it “latches onto” a particular value and stays that way."
    },
    {
      "index": 53,
      "start_time": 183780.0,
      "end_time": 188520.0,
      "text": "The action of putting data into memory is called writing, whereas getting the data out"
    },
    {
      "index": 54,
      "start_time": 188520.0,
      "end_time": 189519.0,
      "text": "is called reading."
    },
    {
      "index": 55,
      "start_time": 189519.0,
      "end_time": 192510.0,
      "text": "Ok, so we’ve got a way to store a single bit of information!"
    },
    {
      "index": 56,
      "start_time": 192510.0,
      "end_time": 193510.0,
      "text": "Great!"
    },
    {
      "index": 57,
      "start_time": 193510.0,
      "end_time": 198310.0,
      "text": "Unfortunately, having two different wires for input – set and reset – is a bit confusing."
    },
    {
      "index": 58,
      "start_time": 198310.0,
      "end_time": 202849.0,
      "text": "To make this a little easier to use, we really want a single wire to input data, that we"
    },
    {
      "index": 59,
      "start_time": 202849.0,
      "end_time": 204950.0,
      "text": "can set to either 0 or 1 to store the value."
    },
    {
      "index": 60,
      "start_time": 204950.0,
      "end_time": 208790.0,
      "text": "Additionally, we are going to need a wire that enables the memory to be either available"
    },
    {
      "index": 61,
      "start_time": 208790.0,
      "end_time": 212900.0,
      "text": "for writing or “locked” down --which is called the write enable line."
    },
    {
      "index": 62,
      "start_time": 212900.0,
      "end_time": 217400.0,
      "text": "By adding a few extra logic gates, we can build this circuit, which is called a Gated Latch"
    },
    {
      "index": 63,
      "start_time": 217400.0,
      "end_time": 219129.0,
      "text": "since the “gate” can be opened or closed."
    },
    {
      "index": 64,
      "start_time": 219129.0,
      "end_time": 221739.0,
      "text": "Now this circuit is starting to get a little complicated."
    },
    {
      "index": 65,
      "start_time": 221739.0,
      "end_time": 224939.0,
      "text": "We don’t want to have to deal with all the individual logic gates... so as before, we’re"
    },
    {
      "index": 66,
      "start_time": 224939.0,
      "end_time": 228979.0,
      "text": "going to bump up a level of abstraction, and put our whole Gated Latch circuit in a box"
    },
    {
      "index": 67,
      "start_time": 228979.0,
      "end_time": 230849.0,
      "text": "-- a box that stores one bit."
    },
    {
      "index": 68,
      "start_time": 230849.0,
      "end_time": 232889.0,
      "text": "Let’s test out our new component!"
    },
    {
      "index": 69,
      "start_time": 232889.0,
      "end_time": 234650.0,
      "text": "Let’s start everything at 0."
    },
    {
      "index": 70,
      "start_time": 234650.0,
      "end_time": 240580.0,
      "text": "If we toggle the Data wire from 0 to 1 or 1 to 0, nothing happens - the output stays at 0."
    },
    {
      "index": 71,
      "start_time": 240580.0,
      "end_time": 244209.0,
      "text": "That’s because the write enable wire is off, which prevents any change to the memory."
    },
    {
      "index": 72,
      "start_time": 244209.0,
      "end_time": 247950.0,
      "text": "So we need to “open” the “gate” by turning the write enable wire to 1."
    },
    {
      "index": 73,
      "start_time": 247950.0,
      "end_time": 251819.0,
      "text": "Now we can put a 1 on the data line to save the value 1 to our latch."
    },
    {
      "index": 74,
      "start_time": 251819.0,
      "end_time": 254010.0,
      "text": "Notice how the output is now 1."
    },
    {
      "index": 75,
      "start_time": 254010.0,
      "end_time": 254820.0,
      "text": "Success!"
    },
    {
      "index": 76,
      "start_time": 254820.0,
      "end_time": 258400.0,
      "text": "We can turn off the enable line and the output stays as 1."
    },
    {
      "index": 77,
      "start_time": 258399.99999999997,
      "end_time": 261958.99999999997,
      "text": "Once again, we can toggle the value on the data line all we want, but the output will"
    },
    {
      "index": 78,
      "start_time": 261959.0,
      "end_time": 262959.0,
      "text": "stay the same."
    },
    {
      "index": 79,
      "start_time": 262959.0,
      "end_time": 264990.0,
      "text": "The value is saved in memory."
    },
    {
      "index": 80,
      "start_time": 264990.0,
      "end_time": 269650.0,
      "text": "Now let’s turn the enable line on again use our data line to set the latch to 0."
    },
    {
      "index": 81,
      "start_time": 269650.0,
      "end_time": 270650.0,
      "text": "Done."
    },
    {
      "index": 82,
      "start_time": 270650.0,
      "end_time": 272910.0,
      "text": "Enable line off, and the output is 0."
    },
    {
      "index": 83,
      "start_time": 272910.0,
      "end_time": 273919.0,
      "text": "And it works!"
    },
    {
      "index": 84,
      "start_time": 273919.0,
      "end_time": 277190.0,
      "text": "Now, of course, computer memory that only stores one bit of information isn’t very"
    },
    {
      "index": 85,
      "start_time": 277190.0,
      "end_time": 279780.0,
      "text": "useful -- definitely not enough to run Frogger."
    },
    {
      "index": 86,
      "start_time": 279780.0,
      "end_time": 281300.0,
      "text": "Or anything, really."
    },
    {
      "index": 87,
      "start_time": 281300.0,
      "end_time": 283480.0,
      "text": "But we’re not limited to using only one latch."
    },
    {
      "index": 88,
      "start_time": 283480.0,
      "end_time": 288270.0,
      "text": "If we put 8 latches side-by-side, we can store 8 bits of information like an 8-bit number."
    },
    {
      "index": 89,
      "start_time": 288270.0,
      "end_time": 293400.0,
      "text": "A group of latches operating like this is called a register, which holds a single number,"
    },
    {
      "index": 90,
      "start_time": 293400.0,
      "end_time": 296060.0,
      "text": "and the number of bits in a register is called its width."
    },
    {
      "index": 91,
      "start_time": 296060.0,
      "end_time": 301819.0,
      "text": "Early computers had 8-bit registers, then 16, 32, and today, many computers have registers"
    },
    {
      "index": 92,
      "start_time": 301819.0,
      "end_time": 303419.0,
      "text": "that are 64-bits wide."
    },
    {
      "index": 93,
      "start_time": 303419.0,
      "end_time": 306750.0,
      "text": "To write to our register, we first have to enable all of the latches."
    },
    {
      "index": 94,
      "start_time": 306750.0,
      "end_time": 311800.0,
      "text": "We can do this with a single wire that connects to all of their enable inputs, which we set to 1."
    },
    {
      "index": 95,
      "start_time": 311800.0,
      "end_time": 317320.0,
      "text": "We then send our data in using the 8 data wires, and then set enable back to 0, and"
    },
    {
      "index": 96,
      "start_time": 317320.0,
      "end_time": 319660.0,
      "text": "the 8 bit value is now saved in memory."
    },
    {
      "index": 97,
      "start_time": 319660.0,
      "end_time": 323430.0,
      "text": "Putting latches side-by-side works ok for a small-ish number of bits."
    },
    {
      "index": 98,
      "start_time": 323430.0,
      "end_time": 328800.0,
      "text": "A 64-bit register would need 64 wires running to the data pins, and 64 wires running to"
    },
    {
      "index": 99,
      "start_time": 328800.0,
      "end_time": 329970.0,
      "text": "the outputs."
    },
    {
      "index": 100,
      "start_time": 329970.0,
      "end_time": 336500.0,
      "text": "Luckily we only need 1 wire to enable all the latches, but that’s still 129 wires."
    },
    {
      "index": 101,
      "start_time": 336500.0,
      "end_time": 340660.0,
      "text": "For 256 bits, we end up with 513 wires!"
    },
    {
      "index": 102,
      "start_time": 340660.0,
      "end_time": 342140.0,
      "text": "The solution is a matrix!"
    },
    {
      "index": 103,
      "start_time": 342140.0,
      "end_time": 346160.0,
      "text": "In this matrix, we don’t arrange our latches in a row, we put them in a grid."
    },
    {
      "index": 104,
      "start_time": 346160.0,
      "end_time": 352520.0,
      "text": "For 256 bits, we need a 16 by 16 grid of latches with 16 rows and columns of wires."
    },
    {
      "index": 105,
      "start_time": 352520.0,
      "end_time": 356990.0,
      "text": "To activate any one latch, we must turn on the corresponding row AND column wire."
    },
    {
      "index": 106,
      "start_time": 356990.0,
      "end_time": 358930.0,
      "text": "Let’s zoom in and see how this works."
    },
    {
      "index": 107,
      "start_time": 358930.0,
      "end_time": 362780.0,
      "text": "We only want the latch at the intersection of the two active wires to be enabled,"
    },
    {
      "index": 108,
      "start_time": 362780.0,
      "end_time": 365780.0,
      "text": "but all of the other latches should stay disabled."
    },
    {
      "index": 109,
      "start_time": 365780.0,
      "end_time": 368310.0,
      "text": "For this, we can use our trusty AND gate!"
    },
    {
      "index": 110,
      "start_time": 368310.0,
      "end_time": 372710.0,
      "text": "The AND gate will output a 1 only if the row and the column wires are both 1."
    },
    {
      "index": 111,
      "start_time": 372710.0,
      "end_time": 375720.0,
      "text": "So we can use this signal to uniquely select a single latch."
    },
    {
      "index": 112,
      "start_time": 375720.0,
      "end_time": 380760.0,
      "text": "This row/column setup connects all our latches with a single, shared, write enable wire."
    },
    {
      "index": 113,
      "start_time": 380760.0,
      "end_time": 384720.0,
      "text": "In order for a latch to become write enabled, the row wire, the column wire, and the write"
    },
    {
      "index": 114,
      "start_time": 384720.0,
      "end_time": 386360.0,
      "text": "enable wire must all be 1."
    },
    {
      "index": 115,
      "start_time": 386360.0,
      "end_time": 389860.0,
      "text": "That should only ever be true for one single latch at any given time."
    },
    {
      "index": 116,
      "start_time": 389860.0,
      "end_time": 392830.0,
      "text": "This means we can use a single, shared wire for data."
    },
    {
      "index": 117,
      "start_time": 392830.0,
      "end_time": 397180.0,
      "text": "Because only one latch will ever be write enabled, only one will ever save the data"
    },
    {
      "index": 118,
      "start_time": 397180.0,
      "end_time": 400550.0,
      "text": "-- the rest of the latches will simply ignore values on the data wire because they are not"
    },
    {
      "index": 119,
      "start_time": 400550.0,
      "end_time": 401830.0,
      "text": "write enabled."
    },
    {
      "index": 120,
      "start_time": 401830.0,
      "end_time": 406650.0,
      "text": "We can use the same trick with a read enable wire to read the data later, to get the data"
    },
    {
      "index": 121,
      "start_time": 406650.0,
      "end_time": 408669.0,
      "text": "out of one specific latch."
    },
    {
      "index": 122,
      "start_time": 408669.0,
      "end_time": 415001.0,
      "text": "This means in total, for 256 bits of memory, we only need 35 wires - 1 data wire, 1 write"
    },
    {
      "index": 123,
      "start_time": 415001.0,
      "end_time": 419940.0,
      "text": "enable wire, 1 read enable wire, and 16 rows and columns for the selection."
    },
    {
      "index": 124,
      "start_time": 419940.0,
      "end_time": 421750.0,
      "text": "That’s significant wire savings!"
    },
    {
      "index": 125,
      "start_time": 421750.0,
      "end_time": 425139.0,
      "text": "But we need a way to uniquely specify each intersection."
    },
    {
      "index": 126,
      "start_time": 425139.0,
      "end_time": 428419.0,
      "text": "We can think of this like a city, where you might want to meet someone at 12th avenue"
    },
    {
      "index": 127,
      "start_time": 428419.0,
      "end_time": 431530.0,
      "text": "and 8th street -- that&#39;s an address that defines an intersection."
    },
    {
      "index": 128,
      "start_time": 431530.0,
      "end_time": 435960.0,
      "text": "The latch we just saved our one bit into has an address of row 12 and column 8."
    },
    {
      "index": 129,
      "start_time": 435960.0,
      "end_time": 440880.0,
      "text": "Since there is a maximum of 16 rows, we store the row address in a 4 bit number."
    },
    {
      "index": 130,
      "start_time": 440880.0,
      "end_time": 443740.0,
      "text": "12 is 1100 in binary."
    },
    {
      "index": 131,
      "start_time": 443740.0,
      "end_time": 448680.0,
      "text": "We can do the same for the column address: 8 is 1000 in binary."
    },
    {
      "index": 132,
      "start_time": 448680.0,
      "end_time": 455159.0,
      "text": "So the address for the particular latch we just used can be written as 11001000."
    },
    {
      "index": 133,
      "start_time": 455159.0,
      "end_time": 459030.0,
      "text": "To convert from an address into something that selects the right row or column, we need"
    },
    {
      "index": 134,
      "start_time": 459030.0,
      "end_time": 463250.0,
      "text": "a special component called a multiplexer -- which is the computer component with a pretty cool"
    },
    {
      "index": 135,
      "start_time": 463250.0,
      "end_time": 465360.0,
      "text": "name at least compared to the ALU."
    },
    {
      "index": 136,
      "start_time": 465360.0,
      "end_time": 470069.0,
      "text": "Multiplexers come in all different sizes, but because we have 16 rows, we need a 1 to"
    },
    {
      "index": 137,
      "start_time": 470069.0,
      "end_time": 471069.0,
      "text": "16 multiplexer."
    },
    {
      "index": 138,
      "start_time": 471069.0,
      "end_time": 472099.0,
      "text": "It works like this."
    },
    {
      "index": 139,
      "start_time": 472099.0,
      "end_time": 476680.0,
      "text": "You feed it a 4 bit number, and it connects the input line to a corresponding output line."
    },
    {
      "index": 140,
      "start_time": 476680.0,
      "end_time": 482069.0,
      "text": "So if we pass in 0000, it will select the very first column for us."
    },
    {
      "index": 141,
      "start_time": 482069.0,
      "end_time": 486249.0,
      "text": "If we pass in 0001, the next column is selected, and so on."
    },
    {
      "index": 142,
      "start_time": 486249.0,
      "end_time": 490689.0,
      "text": "We need one multiplexer to handle our rows and another multiplexer to handle the columns."
    },
    {
      "index": 143,
      "start_time": 490689.0,
      "end_time": 496800.0,
      "text": "Ok, it’s starting to get complicated again, so let’s make our 256-bit memory its own component."
    },
    {
      "index": 144,
      "start_time": 496800.0,
      "end_time": 504980.0,
      "text": "Once again a new level of abstraction!"
    },
    {
      "index": 145,
      "start_time": 504980.0,
      "end_time": 509700.0,
      "text": "It takes an 8-bit address for input - the 4 bits for the column and 4 for the row."
    },
    {
      "index": 146,
      "start_time": 509700.0,
      "end_time": 512220.0,
      "text": "We also need write and read enable wires."
    },
    {
      "index": 147,
      "start_time": 512220.0,
      "end_time": 517080.0,
      "text": "And finally, we need just one data wire, which can be used to read or write data."
    },
    {
      "index": 148,
      "start_time": 517080.00000000006,
      "end_time": 522089.00000000006,
      "text": "Unfortunately, even 256-bits of memory isn’t enough to run much of anything, so we need"
    },
    {
      "index": 149,
      "start_time": 522089.00000000006,
      "end_time": 523530.00000000006,
      "text": "to scale up even more!"
    },
    {
      "index": 150,
      "start_time": 523530.0,
      "end_time": 525730.0,
      "text": "We’re going to put them in a row."
    },
    {
      "index": 151,
      "start_time": 525730.0,
      "end_time": 526820.0,
      "text": "Just like with the registers."
    },
    {
      "index": 152,
      "start_time": 526820.0,
      "end_time": 531709.0,
      "text": "We’ll make a row of 8 of them, so we can store an 8 bit number - also known as a byte."
    },
    {
      "index": 153,
      "start_time": 531709.0,
      "end_time": 537210.0,
      "text": "To do this, we feed the exact same address into all 8 of our 256-bit memory components"
    },
    {
      "index": 154,
      "start_time": 537210.0,
      "end_time": 541240.0,
      "text": "at the same time, and each one saves one bit of the number."
    },
    {
      "index": 155,
      "start_time": 541240.0,
      "end_time": 547900.0,
      "text": "That means the component we just made can store 256 bytes at 256 different addresses."
    },
    {
      "index": 156,
      "start_time": 547900.0,
      "end_time": 551620.0,
      "text": "Again, to keep things simple, we want to leave behind this inner complexity."
    },
    {
      "index": 157,
      "start_time": 551620.0,
      "end_time": 555720.0,
      "text": "Instead of thinking of this as a series of individual memory modules and circuits, we’ll"
    },
    {
      "index": 158,
      "start_time": 555720.0,
      "end_time": 558470.0,
      "text": "think of it as a uniform bank of addressable memory."
    },
    {
      "index": 159,
      "start_time": 558470.0,
      "end_time": 563540.0,
      "text": "We have 256 addresses, and at each address, we can read or write an 8-bit value."
    },
    {
      "index": 160,
      "start_time": 563540.0,
      "end_time": 568110.0,
      "text": "We’re going to use this memory component next episode when we build our CPU."
    },
    {
      "index": 161,
      "start_time": 568110.0,
      "end_time": 572269.0,
      "text": "The way that modern computers scale to megabytes and gigabytes of memory is by doing the same"
    },
    {
      "index": 162,
      "start_time": 572269.0,
      "end_time": 576430.0,
      "text": "thing we’ve been doing here -- keep packaging up little bundles of memory into larger, and"
    },
    {
      "index": 163,
      "start_time": 576430.0,
      "end_time": 577790.0,
      "text": "larger, and larger arrangements."
    },
    {
      "index": 164,
      "start_time": 577790.0,
      "end_time": 582260.0,
      "text": "As the number of memory locations grow, our addresses have to grow as well."
    },
    {
      "index": 165,
      "start_time": 582260.0,
      "end_time": 588680.0,
      "text": "8 bits hold enough numbers to provide addresses for 256 bytes of our memory, but that’s all."
    },
    {
      "index": 166,
      "start_time": 588680.0,
      "end_time": 593900.0,
      "text": "To address a gigabyte – or a billion bytes of memory – we need 32-bit addresses."
    },
    {
      "index": 167,
      "start_time": 593900.0,
      "end_time": 598070.0,
      "text": "An important property of this memory is that we can access any memory location, at any"
    },
    {
      "index": 168,
      "start_time": 598070.0,
      "end_time": 599889.0,
      "text": "time, and in a random order."
    },
    {
      "index": 169,
      "start_time": 599889.0,
      "end_time": 603440.0,
      "text": "For this reason, it’s called Random-Access Memory or RAM."
    },
    {
      "index": 170,
      "start_time": 603440.0,
      "end_time": 607640.0,
      "text": "When you hear people talking about how much RAM a computer has - that&#39;s the computer’s memory."
    },
    {
      "index": 171,
      "start_time": 607640.0,
      "end_time": 611540.0,
      "text": "RAM is like a human’s short term or working memory, where you keep track of things going"
    },
    {
      "index": 172,
      "start_time": 611540.0,
      "end_time": 614750.0,
      "text": "on right now - like whether or not you had lunch or paid your phone bill."
    },
    {
      "index": 173,
      "start_time": 614750.0,
      "end_time": 618589.0,
      "text": "Here’s an actual stick of RAM - with 8 memory modules soldered onto the board."
    },
    {
      "index": 174,
      "start_time": 618589.0,
      "end_time": 622070.0,
      "text": "If we carefully opened up one of these modules and zoomed in, The first thing you would see"
    },
    {
      "index": 175,
      "start_time": 622070.0,
      "end_time": 623480.0,
      "text": "are 32 squares of memory."
    },
    {
      "index": 176,
      "start_time": 623480.0,
      "end_time": 628050.0,
      "text": "Zoom into one of those squares, and we can see each one is comprised of 4 smaller blocks."
    },
    {
      "index": 177,
      "start_time": 628050.0,
      "end_time": 631450.0,
      "text": "If we zoom in again, we get down to the matrix of individual bits."
    },
    {
      "index": 178,
      "start_time": 631450.0,
      "end_time": 634760.0,
      "text": "This is a matrix of 128 by 64 bits."
    },
    {
      "index": 179,
      "start_time": 634760.0,
      "end_time": 637829.0,
      "text": "That’s 8192 bits in total."
    },
    {
      "index": 180,
      "start_time": 637829.0,
      "end_time": 643930.0,
      "text": "Each of our 32 squares has 4 matrices, so that’s 32 thousand, 7 hundred and 68 bits."
    },
    {
      "index": 181,
      "start_time": 643930.0,
      "end_time": 645480.0,
      "text": "And there are 32 squares in total."
    },
    {
      "index": 182,
      "start_time": 645480.0,
      "end_time": 649860.0,
      "text": "So all in all, that’s roughly 1 million bits of memory in each chip."
    },
    {
      "index": 183,
      "start_time": 649860.0,
      "end_time": 654840.0,
      "text": "Our RAM stick has 8 of these chips, so in total, this RAM can store 8 millions bits,"
    },
    {
      "index": 184,
      "start_time": 654840.0,
      "end_time": 656700.0,
      "text": "otherwise known as 1 megabyte."
    },
    {
      "index": 185,
      "start_time": 656700.0,
      "end_time": 660650.0,
      "text": "That’s not a lot of memory these days -- this is a RAM module from the 1980’s."
    },
    {
      "index": 186,
      "start_time": 660650.0,
      "end_time": 665670.0,
      "text": "Today you can buy RAM that has a gigabyte or more of memory - that’s billions of bytes"
    },
    {
      "index": 187,
      "start_time": 665670.0,
      "end_time": 666400.0,
      "text": "of memory."
    },
    {
      "index": 188,
      "start_time": 666400.0,
      "end_time": 671020.0,
      "text": "So, today, we built a piece of SRAM - Static Random-Access Memory – which uses latches."
    },
    {
      "index": 189,
      "start_time": 671020.0,
      "end_time": 675040.0,
      "text": "There are other types of RAM, such as DRAM, Flash memory, and NVRAM."
    },
    {
      "index": 190,
      "start_time": 675040.0,
      "end_time": 679340.0,
      "text": "These are very similar in function to SRAM, but use different circuits to store the individual"
    },
    {
      "index": 191,
      "start_time": 679340.0,
      "end_time": 684100.0,
      "text": "bits -- for example, using different logic gates, capacitors, charge traps, or memristors."
    },
    {
      "index": 192,
      "start_time": 684100.0,
      "end_time": 688990.0,
      "text": "But fundamentally, all of these technologies store bits of information in massively nested"
    },
    {
      "index": 193,
      "start_time": 688990.0,
      "end_time": 691019.0,
      "text": "matrices of memory cells."
    },
    {
      "index": 194,
      "start_time": 691019.0,
      "end_time": 695660.0,
      "text": "Like many things in computing, the fundamental operation is relatively simple.. it’s the"
    },
    {
      "index": 195,
      "start_time": 695660.0,
      "end_time": 700180.0,
      "text": "layers and layers of abstraction that’s mind blowing -- like a russian doll that"
    },
    {
      "index": 196,
      "start_time": 700180.0,
      "end_time": 702900.0,
      "text": "keeps getting smaller and smaller and smaller."
    },
    {
      "index": 197,
      "start_time": 702900.0,
      "end_time": 704720.0,
      "text": "I’ll see you next week."
    },
    {
      "index": 198,
      "start_time": 704720.0,
      "end_time": 714720.0,
      "text": "Credits"
    }
  ]
}